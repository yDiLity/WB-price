const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const { OpenAI } = require('openai');
const path = require('path');
const nodemailer = require('nodemailer');

// üõ°Ô∏è –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ë–ê–ù–ê WILDBERRIES
class WBAntibanService {
  constructor() {
    this.requestCount = 0;
    this.lastRequestTime = 0;
    this.userAgents = [
      // Chrome Windows
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',
      // Chrome macOS
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
      // Firefox
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/120.0',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0',
      // Safari
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
      // Edge
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0'
    ];
    this.bannedIPs = new Set();
    this.requestHistory = [];
    this.proxyList = []; // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
    this.currentProxyIndex = 0;
    this.banDetectionCount = 0;
    this.emergencyMode = false;
    this.cache = new Map(); // –ö–µ—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    this.cacheExpiry = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  getRandomDelay() {
    return Math.floor(Math.random() * 10000) + 5000; // 5-15 —Å–µ–∫—É–Ω–¥
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
  getRandomUserAgent() {
    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  checkRateLimit() {
    const now = Date.now();
    const oneMinute = 60 * 1000;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ –º–∏–Ω—É—Ç—ã)
    this.requestHistory = this.requestHistory.filter(time => now - time < oneMinute);

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    const maxRequests = this.emergencyMode ? 20 : 50;

    if (this.requestHistory.length >= maxRequests) {
      console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É (${maxRequests}), –∂–¥–µ–º...`);
      return false;
    }

    return true;
  }

  // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  async addDelay() {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;

    // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    let minDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    if (this.emergencyMode) {
      minDelay = 15000; // 15 —Å–µ–∫—É–Ω–¥
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –±–∞–Ω–∞—Ö
    if (this.banDetectionCount > 3) {
      minDelay += this.banDetectionCount * 2000; // +2 —Å–µ–∫ –∑–∞ –∫–∞–∂–¥—ã–π –±–∞–Ω
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    const randomDelay = Math.floor(Math.random() * 5000); // 0-5 —Å–µ–∫—É–Ω–¥
    const totalDelay = minDelay + randomDelay;

    if (timeSinceLastRequest < totalDelay) {
      const waitTime = totalDelay - timeSinceLastRequest;
      console.log(`‚è±Ô∏è –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${waitTime}ms (—Ä–µ–∂–∏–º: ${this.emergencyMode ? '—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π' : '–æ–±—ã—á–Ω—ã–π'})`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
    this.requestHistory.push(this.lastRequestTime);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±–∞–Ω–∞
  checkForBan(response, responseText) {
    const banIndicators = [
      'captcha',
      'blocked',
      'forbidden',
      'rate limit',
      'too many requests',
      '–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      '–¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
      'access denied',
      'service unavailable',
      'cloudflare',
      'ddos protection',
      'security check',
      '–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      '—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
      '–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç'
    ];

    const textLower = responseText.toLowerCase();
    const hasBanIndicator = banIndicators.some(indicator => textLower.includes(indicator));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
    const isBannedStatus = [403, 429, 503, 520, 521, 522, 523, 524].includes(response.status);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É)
    const isSuspiciousSize = responseText.length < 100 && response.status === 200;

    if (isBannedStatus || hasBanIndicator || isSuspiciousSize) {
      this.banDetectionCount++;
      console.log(`üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ë–ê–ù #${this.banDetectionCount}! –°—Ç–∞—Ç—É—Å: ${response.status}, –†–∞–∑–º–µ—Ä: ${responseText.length}`);

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –±–∞–Ω–∞—Ö
      if (this.banDetectionCount >= 3 && !this.emergencyMode) {
        this.activateEmergencyMode();
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      this.sendBanNotification(response.status, responseText.substring(0, 200));

      return true;
    }

    return false;
  }

  // üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ
  async sendBanNotification(status, responsePreview) {
    try {
      const message = `üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê WILDBERRIES!\n\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${status}\n` +
        `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
        `üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤: ${this.banDetectionCount}\n` +
        `üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${this.emergencyMode ? '–ê–ö–¢–ò–í–ï–ù' : '–û—Ç–∫–ª—é—á–µ–Ω'}\n` +
        `üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: ${this.proxyList.filter(p => p.isActive).length}\n\n` +
        `üìù –ü—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞: ${responsePreview}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await fetch('http://localhost:3001/api/send-email-alert', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          subject: 'üö® –ë–õ–û–ö–ò–†–û–í–ö–ê WILDBERRIES –û–ë–ù–ê–†–£–ñ–ï–ù–ê',
          message: message
        })
      }).catch(err => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', err.message));

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  getSafeHeaders() {
    const acceptLanguages = [
      'ru-RU,ru;q=0.9,en;q=0.8',
      'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
      'ru,en-US;q=0.9,en;q=0.8',
      'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'
    ];

    const referers = [
      'https://www.wildberries.ru/',
      'https://www.wildberries.ru/catalog/dom-i-dacha/tovary-dlya-remonta/instrumenty',
      'https://www.wildberries.ru/catalog/krasota/uhod-za-volosami',
      'https://www.wildberries.ru/catalog/elektronika/smartfony-i-telefony',
      'https://www.wildberries.ru/catalog/dom-i-dacha/kuhnya/posuda-i-kuhonnye-prinadlezhnosti',
      'https://www.wildberries.ru/catalog/krasota',
      'https://www.wildberries.ru/catalog/muzhchinam',
      'https://www.wildberries.ru/catalog/zhenshchinam'
    ];

    const baseHeaders = {
      'User-Agent': this.getRandomUserAgent(),
      'Accept': 'application/json, text/plain, */*',
      'Accept-Language': acceptLanguages[Math.floor(Math.random() * acceptLanguages.length)],
      'Accept-Encoding': 'gzip, deflate, br',
      'Referer': referers[Math.floor(Math.random() * referers.length)],
      'Origin': 'https://www.wildberries.ru',
      'DNT': '1',
      'Connection': 'keep-alive',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache'
    };

    // –°–ª—É—á–∞–π–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    if (Math.random() > 0.5) {
      baseHeaders['X-Requested-With'] = 'XMLHttpRequest';
    }

    if (Math.random() > 0.6) {
      baseHeaders['Sec-Fetch-Dest'] = 'empty';
      baseHeaders['Sec-Fetch-Mode'] = 'cors';
      baseHeaders['Sec-Fetch-Site'] = 'same-site';
    }

    if (Math.random() > 0.7) {
      baseHeaders['Sec-CH-UA'] = '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"';
      baseHeaders['Sec-CH-UA-Mobile'] = '?0';
      baseHeaders['Sec-CH-UA-Platform'] = '"Windows"';
    }

    if (Math.random() > 0.8) {
      baseHeaders['Upgrade-Insecure-Requests'] = '1';
    }

    return baseHeaders;
  }

  // üíæ –†–∞–±–æ—Ç–∞ —Å –∫–µ—à–µ–º
  getCachedData(key) {
    const cached = this.cache.get(key);
    if (cached) {
      const expiry = cached.customExpiry || this.cacheExpiry;
      if (Date.now() - cached.timestamp < expiry) {
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞:', key);
        return cached.data;
      }
    }
    return null;
  }

  setCachedData(key, data, customExpiry = null) {
    this.cache.set(key, {
      data: data,
      timestamp: Date.now(),
      customExpiry: customExpiry
    });

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫–µ—à–∞
    if (this.cache.size > 1000) {
      const oldestKeys = Array.from(this.cache.keys()).slice(0, 100);
      oldestKeys.forEach(key => this.cache.delete(key));
    }
  }

  // üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
  addProxy(proxy) {
    this.proxyList.push({
      ...proxy,
      isActive: true,
      failCount: 0,
      lastUsed: 0,
      successRate: 1.0
    });
    console.log('üåê –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–∫—Å–∏:', proxy.host);
  }

  getNextProxy() {
    if (this.proxyList.length === 0) return null;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    const activeProxies = this.proxyList.filter(p => p.isActive && p.failCount < 3);
    if (activeProxies.length === 0) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      this.proxyList.forEach(p => {
        p.failCount = 0;
        p.isActive = true;
      });
      return this.proxyList[0];
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å –ª—É—á—à–∏–º success rate
    const bestProxy = activeProxies.sort((a, b) => b.successRate - a.successRate)[0];
    bestProxy.lastUsed = Date.now();

    return bestProxy;
  }

  markProxyFailed(proxy) {
    if (proxy) {
      proxy.failCount++;
      proxy.successRate = Math.max(0.1, proxy.successRate - 0.1);

      if (proxy.failCount >= 3) {
        proxy.isActive = false;
        console.log('üö´ –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫:', proxy.host);
      }
    }
  }

  markProxySuccess(proxy) {
    if (proxy) {
      proxy.successRate = Math.min(1.0, proxy.successRate + 0.05);
    }
  }

  // üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  activateEmergencyMode() {
    this.emergencyMode = true;
    console.log('üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ï–ñ–ò–ú - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    setTimeout(() => {
      this.emergencyMode = false;
      console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω');
    }, 30 * 60 * 1000);
  }

  // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getStats() {
    const activeProxies = this.proxyList.filter(p => p.isActive).length;
    const avgSuccessRate = this.proxyList.length > 0
      ? this.proxyList.reduce((sum, p) => sum + p.successRate, 0) / this.proxyList.length
      : 0;

    return {
      totalProxies: this.proxyList.length,
      activeProxies,
      avgSuccessRate: (avgSuccessRate * 100).toFixed(1) + '%',
      requestsLastMinute: this.requestHistory.filter(time =>
        Date.now() - time < 60000
      ).length,
      emergencyMode: this.emergencyMode,
      banDetectionCount: this.banDetectionCount,
      cacheSize: this.cache.size
    };
  }
}

const antibanService = new WBAntibanService();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const logisticsRouter = require('./server/logistics');
const competitorsRouter = require('./server/routes/competitors');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Express
const app = express();
const port = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(cors());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(bodyParser.json());

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
app.use('/uploads', express.static(path.join(__dirname, 'server/uploads')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI, –µ—Å–ª–∏ –µ—Å—Ç—å API-–∫–ª—é—á
let openai = null;
if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò
function simulateAIResponse(product, competitors) {
  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  const competitorPrices = competitors.map(c => c.currentPrice);
  const avgCompetitorPrice = competitorPrices.reduce((sum, price) => sum + price, 0) / competitorPrices.length;
  const minCompetitorPrice = Math.min(...competitorPrices);
  const maxCompetitorPrice = Math.max(...competitorPrices);

  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞
  const currentPrice = product.currentPrice;
  const costPrice = product.costPrice || currentPrice * 0.6;
  const minMargin = 1.2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ 20%
  const minPrice = costPrice * minMargin;

  let recommendedPrice;

  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ 10% –∏ –±–æ–ª–µ–µ
  if (currentPrice > avgCompetitorPrice * 1.1) {
    recommendedPrice = Math.round(avgCompetitorPrice * 1.05); // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ü–µ–Ω—É –Ω–∞ 5% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
  }
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –º–∞—Ä–∂–∏
  else if (currentPrice < minPrice) {
    recommendedPrice = Math.round(minPrice);
  }
  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  else if (currentPrice < minCompetitorPrice * 0.9) {
    recommendedPrice = Math.round(minCompetitorPrice * 0.95); // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ü–µ–Ω—É –Ω–∞ 5% –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
  }
  // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
  else {
    recommendedPrice = currentPrice;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  let response = `## –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ "${product.name}"\n\n`;

  response += `### –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:\n`;
  response += `- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}\n`;
  response += `- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${Math.round(avgCompetitorPrice)} ‚ÇΩ\n`;
  response += `- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${minCompetitorPrice} ‚ÇΩ\n`;
  response += `- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${maxCompetitorPrice} ‚ÇΩ\n\n`;

  response += `### –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n`;
  response += `- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} ‚ÇΩ\n`;
  response += `- –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${costPrice} ‚ÇΩ\n`;
  response += `- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ (—Å –º–∞—Ä–∂–æ–π 20%): ${Math.round(minPrice)} ‚ÇΩ\n\n`;

  response += `### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;

  if (recommendedPrice > currentPrice) {
    response += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É –¥–æ ${recommendedPrice} ‚ÇΩ (–Ω–∞ ${Math.round((recommendedPrice - currentPrice) / currentPrice * 100)}%)\n`;
    response += `- –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π, —á—Ç–æ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –ø—Ä–∏–±—ã–ª—å\n`;
  } else if (recommendedPrice < currentPrice) {
    response += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –¥–æ ${recommendedPrice} ‚ÇΩ (–Ω–∞ ${Math.round((currentPrice - recommendedPrice) / currentPrice * 100)}%)\n`;
    response += `- –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π, —á—Ç–æ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å\n`;
  } else {
    response += `- –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π\n`;
  }

  response += `\n### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${recommendedPrice} ‚ÇΩ\n\n`;
  response += `### –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞: ${Math.round(minPrice)} ‚ÇΩ\n\n`;

  response += `–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –∏ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥—ã.`;

  return response;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
async function analyzeProductWithAI(product, competitors) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Ozon:

–¢–æ–≤–∞—Ä: ${product.name}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}
–ë—Ä–µ–Ω–¥: ${product.brand}
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${product.currentPrice} ‚ÇΩ
–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${product.costPrice || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'} ‚ÇΩ

–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (${competitors.length}):
${competitors.map(c => `- ${c.competitorName}: ${c.productName}, –¶–µ–Ω–∞: ${c.currentPrice} ‚ÇΩ, –†–µ–π—Ç–∏–Ω–≥: ${c.rating || '–ù/–î'}`).join('\n')}

–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞. –£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
1. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
2. –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20%)
3. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—ã–Ω–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã
4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
5. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞
`;

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (openai) {
      console.log('Using OpenAI API for analysis');

      const response = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "–¢—ã - –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω –Ω–∞ Ozon. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      });

      return {
        success: true,
        analysis: response.choices[0].message.content
      };
    } else {
      // –ï—Å–ª–∏ OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      console.log('Using simulated AI response');
      return {
        success: true,
        analysis: simulateAIResponse(product, competitors)
      };
    }
  } catch (error) {
    console.error('Error analyzing product with AI:', error);
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò: ' + error.message
    };
  }
}

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
app.post('/api/analyze-product', async (req, res) => {
  try {
    const { product, competitors } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!product || !competitors) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö'
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Analyzing product:', product.name);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò
    const result = await analyzeProductWithAI(product, competitors);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json(result);
  } catch (error) {
    console.error('Error in analyze-product endpoint:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞'
    });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
app.post('/api/batch-analyze', async (req, res) => {
  try {
    const { productIds, userId } = req.body;

    if (!productIds || !Array.isArray(productIds) || productIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`Starting batch analysis for ${productIds.length} products`);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json({
      success: true,
      message: `–ó–∞–ø—É—â–µ–Ω –∞–Ω–∞–ª–∏–∑ ${productIds.length} —Ç–æ–≤–∞—Ä–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç—á–µ—Ç—ã".`
    });
  } catch (error) {
    console.error('Error in batch-analyze endpoint:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
    });
  }
});

// üìß API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–Ω–∞—Ö
app.post('/api/send-email-alert', async (req, res) => {
  try {
    const { subject, message, alert } = req.body;

    if (!subject || !message) {
      return res.status(400).json({
        success: false,
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER || 'your.email@gmail.com',
        pass: process.env.EMAIL_PASS || 'your_app_password'
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –≤–µ—Ä—Å–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è
    const htmlMessage = message
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\n/g, '<br>');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const mailOptions = {
      from: `"WB –ü–∞—Ä—Å–∏–Ω–≥ –ê–ª–µ—Ä—Ç—ã" <${process.env.EMAIL_USER || 'your.email@gmail.com'}>`,
      to: process.env.EMAIL_TO || 'alerts@yourcompany.com',
      subject: subject,
      text: message,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: #f8f9fa; padding: 20px; border-radius: 8px;">
            <h2 style="color: #dc3545; margin: 0 0 20px 0;">${subject}</h2>
            <div style="background: white; padding: 15px; border-radius: 4px; border-left: 4px solid #dc3545;">
              ${htmlMessage}
            </div>
            <div style="margin-top: 20px; font-size: 12px; color: #6c757d;">
              <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ WB –ü–∞—Ä—Å–∏–Ω–≥</p>
              <p>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}</p>
            </div>
          </div>
        </div>
      `
    };

    await transporter.sendMail(mailOptions);

    console.log('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', subject);

    res.json({
      success: true,
      message: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    });
  }
});

// üåê –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì WILDBERRIES –° –ó–ê–©–ò–¢–û–ô –û–¢ –ë–ê–ù–ê

// üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
app.get('/api/wb/product/:id', async (req, res) => {
  try {
    const productId = req.params.id;
    console.log('üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞ WB –ø–æ ID:', productId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `product_${productId}`;
    const cachedData = antibanService.getCachedData(cacheKey);
    if (cachedData) {
      return res.json(cachedData);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!antibanService.checkRateLimit()) {
      return res.status(429).json({ error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–∞
    await antibanService.addDelay();

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ ID –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
    const searchUrl = `https://search.wb.ru/exactmatch/ru/common/v4/search?appType=1&curr=rub&dest=-1257786&query=${productId}&resultset=catalog&sort=popular&spp=0&suppressSpellcheck=false`;

    const searchResponse = await fetch(searchUrl, {
      headers: antibanService.getSafeHeaders()
    });

    if (searchResponse.ok) {
      const searchText = await searchResponse.text();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω
      if (antibanService.checkForBan(searchResponse, searchText)) {
        console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞!');
        return res.status(503).json({ error: '–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
      }

      const searchData = JSON.parse(searchText);
      const products = searchData.data?.products || [];

      // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ID
      const exactProduct = products.find(p => p.id.toString() === productId.toString());

      if (exactProduct) {
        const formattedProduct = {
          id: exactProduct.id,
          name: exactProduct.name,
          brand: exactProduct.brand,
          price: exactProduct.salePriceU / 100,
          originalPrice: exactProduct.priceU ? exactProduct.priceU / 100 : null,
          discount: exactProduct.sale || 0,
          rating: exactProduct.rating || 0,
          supplierRating: exactProduct.supplierRating || 0,
          feedbacks: exactProduct.feedbacks || 0,
          volume: exactProduct.volume || 0,
          colors: exactProduct.colors || [],
          sizes: exactProduct.sizes || [],
          pics: exactProduct.pics || 0,
          video: exactProduct.video || null,
          supplier: exactProduct.supplier || null,
          supplierId: exactProduct.supplierId || null,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          category: exactProduct.subj || null,
          categoryId: exactProduct.subjId || null,
          root: exactProduct.root || null,
          kindId: exactProduct.kindId || null,
          promoTextCard: exactProduct.promoTextCard || null,
          promoTextCat: exactProduct.promoTextCat || null,
          // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          source: 'REAL_WB_SERVER_SEARCH',
          lastUpdated: new Date().toISOString(),
          parseMethod: 'search_api'
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        antibanService.setCachedData(cacheKey, formattedProduct);

        console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫:', formattedProduct.name);
        return res.json(formattedProduct);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π API
    const directUrl = `https://card.wb.ru/cards/detail?nm=${productId}`;
    const directResponse = await fetch(directUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'ru-RU,ru;q=0.9',
        'Referer': 'https://www.wildberries.ru/',
        'Origin': 'https://www.wildberries.ru'
      }
    });

    if (directResponse.ok) {
      const directData = await directResponse.json();
      const product = directData.data?.products?.[0];

      if (product) {
        const formattedProduct = {
          id: product.id,
          name: product.name,
          brand: product.brand,
          price: product.salePriceU / 100,
          originalPrice: product.priceU ? product.priceU / 100 : null,
          discount: product.sale || 0,
          rating: product.rating || 0,
          supplierRating: product.supplierRating || 0,
          feedbacks: product.feedbacks || 0,
          volume: product.volume || 0,
          colors: product.colors || [],
          sizes: product.sizes || [],
          pics: product.pics || 0,
          video: product.video || null,
          supplier: product.supplier || null,
          supplierId: product.supplierId || null,
          source: 'REAL_WB_SERVER_API'
        };

        console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã –ø—Ä—è–º—ã–º API:', formattedProduct.name);
        return res.json(formattedProduct);
      }
    }

    // –ï—Å–ª–∏ Card API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
    console.log('üåê –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞...');

    try {
      const webPageUrl = `https://www.wildberries.ru/catalog/${productId}/detail.aspx`;

      const webResponse = await fetch(webPageUrl, {
        headers: {
          ...antibanService.getSafeHeaders(),
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
          'Accept-Encoding': 'gzip, deflate, br',
          'DNT': '1',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1',
        }
      });

      if (webResponse.ok) {
        const webText = await webResponse.text();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω
        if (antibanService.checkForBan(webResponse, webText)) {
          console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
        } else {
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const nameMatch = webText.match(/<h1[^>]*class="[^"]*product-page__title[^"]*"[^>]*>([^<]+)</i);
          const priceMatch = webText.match(/class="[^"]*price-block__final-price[^"]*"[^>]*>([^<]+)</i);
          const brandMatch = webText.match(/class="[^"]*product-page__brand[^"]*"[^>]*>([^<]+)</i);

          if (nameMatch || priceMatch) {
            const webProduct = {
              id: parseInt(productId),
              name: nameMatch ? nameMatch[1].trim() : `–¢–æ–≤–∞—Ä ${productId}`,
              brand: brandMatch ? brandMatch[1].trim() : '',
              price: priceMatch ? parseInt(priceMatch[1].replace(/[^\d]/g, '')) : 0,
              originalPrice: priceMatch ? parseInt(priceMatch[1].replace(/[^\d]/g, '')) : 0,
              discount: 0,
              rating: 0,
              supplierRating: 0,
              feedbacks: 0,
              volume: 0,
              pics: 0,
              video: null,
              supplier: '',
              supplierId: null,
              category: null,
              categoryId: null,
              root: null,
              kindId: null,
              colors: [],
              sizes: [],
              promoTextCard: '',
              promoTextCat: '',
              source: 'REAL_WB_WEB_PARSING',
              lastUpdated: new Date().toISOString(),
              parseMethod: 'web_parsing',
              note: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã'
            };

            // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            antibanService.setCachedData(cacheKey, webProduct);

            console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ô —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞—Ä—Å–∏–Ω–≥:', webProduct.name);
            return res.json(webProduct);
          }
        }
      }
    } catch (webError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–µ–±-–ø–∞—Ä—Å–∏–Ω–≥–∞:', webError.message);
    }

    // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    console.log('üîÑ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ...');

    const fallbackProduct = {
      id: parseInt(productId),
      name: `–¢–æ–≤–∞—Ä ${productId}`,
      brand: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
      price: 0,
      originalPrice: 0,
      discount: 0,
      rating: 0,
      supplierRating: 0,
      feedbacks: 0,
      volume: 0,
      pics: 0,
      video: null,
      supplier: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
      supplierId: null,
      category: null,
      categoryId: null,
      root: null,
      kindId: null,
      colors: [],
      sizes: [],
      promoTextCard: '',
      promoTextCat: '',
      source: 'FALLBACK_DATA',
      lastUpdated: new Date().toISOString(),
      parseMethod: 'fallback',
      note: '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      isBlocked: true
    };

    // –ö–µ—à–∏—Ä—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    antibanService.setCachedData(cacheKey, fallbackProduct, 60000); // 1 –º–∏–Ω—É—Ç–∞

    console.log('‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);
    return res.json(fallbackProduct);
  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞' });
  }
});

// üè™ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
app.get('/api/wb/seller/:id', async (req, res) => {
  try {
    const sellerId = req.params.id;
    console.log('üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞ WB –ø–æ ID:', sellerId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `seller_${sellerId}`;
    const cachedData = antibanService.getCachedData(cacheKey);
    if (cachedData) {
      return res.json(cachedData);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!antibanService.checkRateLimit()) {
      return res.status(429).json({ error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    await antibanService.addDelay();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
    const searchUrl = `https://search.wb.ru/exactmatch/ru/common/v4/search?appType=1&curr=rub&dest=-1257786&query=&resultset=catalog&sort=popular&spp=0&suppressSpellcheck=false&supplier=${sellerId}`;

    const response = await fetch(searchUrl, {
      headers: antibanService.getSafeHeaders()
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const responseText = await response.text();

    if (antibanService.checkForBan(response, responseText)) {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–¥–∞–≤—Ü–∞!');
      return res.status(503).json({ error: '–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    const data = JSON.parse(responseText);
    const products = data.data?.products || [];

    const sellerInfo = {
      id: sellerId,
      name: products[0]?.supplier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü',
      productsCount: products.length,
      products: products.slice(0, 20).map(product => ({
        id: product.id,
        name: product.name,
        price: product.salePriceU / 100,
        rating: product.rating || 0,
        feedbacks: product.feedbacks || 0
      })),
      source: 'REAL_WB_SERVER_API',
      lastUpdated: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    antibanService.setCachedData(cacheKey, sellerInfo);

    console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–ª—É—á–µ–Ω—ã:', sellerInfo.name);
    res.json(sellerInfo);
  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞' });
  }
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞
app.get('/api/wb/competitors/:id', async (req, res) => {
  try {
    const productId = req.params.id;
    const limit = parseInt(req.query.limit) || 10;
    console.log('üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `competitors_${productId}_${limit}`;
    const cachedData = antibanService.getCachedData(cacheKey);
    if (cachedData) {
      return res.json(cachedData);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!antibanService.checkRateLimit()) {
      return res.status(429).json({ error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    await antibanService.addDelay();

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    const productResponse = await fetch(`http://localhost:3001/api/wb/product/${productId}`);
    if (!productResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ');
    }

    const productData = await productResponse.json();
    const category = productData.category || productData.name.split(' ')[0];

    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const searchUrl = `https://search.wb.ru/exactmatch/ru/common/v4/search?appType=1&curr=rub&dest=-1257786&query=${encodeURIComponent(category)}&resultset=catalog&sort=popular&spp=0&suppressSpellcheck=false`;

    const response = await fetch(searchUrl, {
      headers: antibanService.getSafeHeaders()
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const responseText = await response.text();

    if (antibanService.checkForBan(response, responseText)) {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!');
      return res.status(503).json({ error: '–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    const data = JSON.parse(responseText);
    const allProducts = data.data?.products || [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä)
    const competitors = allProducts
      .filter(p => p.id.toString() !== productId.toString())
      .slice(0, limit)
      .map(product => ({
        id: product.id,
        name: product.name,
        brand: product.brand,
        price: product.salePriceU / 100,
        originalPrice: product.priceU ? product.priceU / 100 : null,
        discount: product.sale || 0,
        rating: product.rating || 0,
        feedbacks: product.feedbacks || 0,
        supplier: product.supplier || null,
        supplierId: product.supplierId || null,
        // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        priceCompetitiveness: productData.price ?
          ((productData.price - (product.salePriceU / 100)) / productData.price * 100).toFixed(1) : null,
        ratingAdvantage: productData.rating ?
          ((product.rating || 0) - productData.rating).toFixed(1) : null
      }));

    const result = {
      productId: productId,
      productName: productData.name,
      productPrice: productData.price,
      competitorsFound: competitors.length,
      competitors: competitors,
      analysis: {
        avgCompetitorPrice: competitors.length > 0 ?
          (competitors.reduce((sum, c) => sum + c.price, 0) / competitors.length).toFixed(2) : null,
        minCompetitorPrice: competitors.length > 0 ?
          Math.min(...competitors.map(c => c.price)) : null,
        maxCompetitorPrice: competitors.length > 0 ?
          Math.max(...competitors.map(c => c.price)) : null,
        avgCompetitorRating: competitors.length > 0 ?
          (competitors.reduce((sum, c) => sum + (c.rating || 0), 0) / competitors.length).toFixed(1) : null
      },
      source: 'REAL_WB_SERVER_API',
      lastUpdated: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    antibanService.setCachedData(cacheKey, result);

    console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', competitors.length);
    res.json(result);
  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
  }
});

// üîç –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö WILDBERRIES –° –ó–ê–©–ò–¢–û–ô –û–¢ –ë–ê–ù–ê
app.get('/api/wb/search', async (req, res) => {
  try {
    const query = req.query.q;
    const page = req.query.page || 1;
    const limit = parseInt(req.query.limit) || 100;
    const sort = req.query.sort || 'popular';
    console.log('üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ WB:', query, `(—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `search_${query}_${page}_${limit}_${sort}`;
    const cachedData = antibanService.getCachedData(cacheKey);
    if (cachedData) {
      return res.json(cachedData);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!antibanService.checkRateLimit()) {
      return res.status(429).json({ error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–∞
    await antibanService.addDelay();

    const url = `https://search.wb.ru/exactmatch/ru/common/v4/search?appType=1&curr=rub&dest=-1257786&query=${encodeURIComponent(query)}&resultset=catalog&sort=popular&spp=0&suppressSpellcheck=false&page=${page}`;

    const response = await fetch(url, {
      headers: antibanService.getSafeHeaders()
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const responseText = await response.text();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–Ω
    if (antibanService.checkForBan(response, responseText)) {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ!');
      return res.status(503).json({ error: '–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    const data = JSON.parse(responseText);
    const products = data.data?.products || [];

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const formattedProducts = products.slice(0, limit).map((product, index) => ({
      id: product.id,
      name: product.name,
      brand: product.brand,
      price: product.salePriceU / 100,
      originalPrice: product.priceU ? product.priceU / 100 : null,
      discount: product.sale || 0,
      rating: product.rating || 0,
      supplierRating: product.supplierRating || 0,
      feedbacks: product.feedbacks || 0,
      volume: product.volume || 0,
      pics: product.pics || 0,
      video: product.video || null,
      supplier: product.supplier || null,
      supplierId: product.supplierId || null,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      category: product.subj || null,
      categoryId: product.subjId || null,
      root: product.root || null,
      kindId: product.kindId || null,
      colors: product.colors || [],
      sizes: product.sizes || [],
      promoTextCard: product.promoTextCard || null,
      promoTextCat: product.promoTextCat || null,
      // –ü–æ–∑–∏—Ü–∏—è –≤ –ø–æ–∏—Å–∫–µ
      searchPosition: (page - 1) * 100 + index + 1,
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      source: 'REAL_WB_SERVER_SEARCH',
      lastUpdated: new Date().toISOString(),
      parseMethod: 'search_api'
    }));

    const result = {
      query: query,
      page: parseInt(page),
      limit: limit,
      sort: sort,
      totalFound: formattedProducts.length,
      products: formattedProducts,
      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
      analytics: {
        avgPrice: formattedProducts.length > 0 ?
          (formattedProducts.reduce((sum, p) => sum + p.price, 0) / formattedProducts.length).toFixed(2) : null,
        minPrice: formattedProducts.length > 0 ?
          Math.min(...formattedProducts.map(p => p.price)) : null,
        maxPrice: formattedProducts.length > 0 ?
          Math.max(...formattedProducts.map(p => p.price)) : null,
        avgRating: formattedProducts.length > 0 ?
          (formattedProducts.reduce((sum, p) => sum + (p.rating || 0), 0) / formattedProducts.length).toFixed(1) : null,
        brandsCount: new Set(formattedProducts.map(p => p.brand).filter(Boolean)).size,
        suppliersCount: new Set(formattedProducts.map(p => p.supplier).filter(Boolean)).size
      },
      source: 'REAL_WB_SERVER_API',
      lastUpdated: new Date().toISOString()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    antibanService.setCachedData(cacheKey, result);

    console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞: –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', formattedProducts.length);
    res.json(result);
  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// üì¶ –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ ID
app.post('/api/wb/products/batch', async (req, res) => {
  try {
    const { productIds } = req.body;

    if (!productIds || !Array.isArray(productIds) || productIds.length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ ID —Ç–æ–≤–∞—Ä–æ–≤' });
    }

    if (productIds.length > 50) {
      return res.status(400).json({ error: '–ú–∞–∫—Å–∏–º—É–º 50 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å' });
    }

    console.log('üõ°Ô∏è –ú–ê–°–°–û–í–´–ô –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ WB:', productIds.length);

    const results = [];
    const errors = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    for (let i = 0; i < productIds.length; i++) {
      const productId = productIds[i];

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (!antibanService.checkRateLimit()) {
          console.log('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
          break;
        }

        await antibanService.addDelay();

        const response = await fetch(`http://localhost:3001/api/wb/product/${productId}`);

        if (response.ok) {
          const productData = await response.json();
          results.push(productData);
          console.log(`‚úÖ –¢–æ–≤–∞—Ä ${i + 1}/${productIds.length} –ø–æ–ª—É—á–µ–Ω:`, productData.name);
        } else {
          errors.push({ productId, error: `HTTP ${response.status}` });
        }
      } catch (error) {
        errors.push({ productId, error: error.message });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error.message);
      }
    }

    res.json({
      success: true,
      totalRequested: productIds.length,
      totalReceived: results.length,
      totalErrors: errors.length,
      products: results,
      errors: errors,
      source: 'REAL_WB_BATCH_API',
      lastUpdated: new Date().toISOString()
    });

  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// üí∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
app.post('/api/wb/price-monitoring', async (req, res) => {
  try {
    const { productId, competitorIds } = req.body;

    if (!productId || !competitorIds || !Array.isArray(competitorIds)) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ç–æ–≤–∞—Ä–∞ –∏ –º–∞—Å—Å–∏–≤ ID –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
    }

    console.log('üõ°Ô∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –¶–ï–ù –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId, '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', competitorIds.length);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const mainProductResponse = await fetch(`http://localhost:3001/api/wb/product/${productId}`);
    if (!mainProductResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
    }
    const mainProduct = await mainProductResponse.json();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitorData = [];
    for (const competitorId of competitorIds) {
      try {
        if (!antibanService.checkRateLimit()) {
          console.log('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ü–µ–Ω');
          break;
        }

        await antibanService.addDelay();

        const response = await fetch(`http://localhost:3001/api/wb/product/${competitorId}`);
        if (response.ok) {
          const competitor = await response.json();
          competitorData.push({
            id: competitor.id,
            name: competitor.name,
            price: competitor.price,
            originalPrice: competitor.originalPrice,
            discount: competitor.discount,
            rating: competitor.rating,
            feedbacks: competitor.feedbacks,
            supplier: competitor.supplier,
            // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º
            priceDifference: (competitor.price - mainProduct.price).toFixed(2),
            pricePercentDifference: ((competitor.price - mainProduct.price) / mainProduct.price * 100).toFixed(1),
            ratingDifference: ((competitor.rating || 0) - (mainProduct.rating || 0)).toFixed(1)
          });
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ ${competitorId}:`, error.message);
      }
    }

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥—ã
    const analysis = {
      mainProduct: {
        id: mainProduct.id,
        name: mainProduct.name,
        price: mainProduct.price,
        rating: mainProduct.rating
      },
      competitors: competitorData,
      competitiveAnalysis: {
        totalCompetitors: competitorData.length,
        cheaperCompetitors: competitorData.filter(c => c.price < mainProduct.price).length,
        expensiveCompetitors: competitorData.filter(c => c.price > mainProduct.price).length,
        avgCompetitorPrice: competitorData.length > 0 ?
          (competitorData.reduce((sum, c) => sum + c.price, 0) / competitorData.length).toFixed(2) : null,
        minCompetitorPrice: competitorData.length > 0 ?
          Math.min(...competitorData.map(c => c.price)) : null,
        maxCompetitorPrice: competitorData.length > 0 ?
          Math.max(...competitorData.map(c => c.price)) : null,
        pricePosition: competitorData.length > 0 ?
          competitorData.filter(c => c.price < mainProduct.price).length + 1 : 1,
        recommendations: []
      },
      source: 'REAL_WB_MONITORING_API',
      lastUpdated: new Date().toISOString()
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (analysis.competitiveAnalysis.avgCompetitorPrice) {
      const avgPrice = parseFloat(analysis.competitiveAnalysis.avgCompetitorPrice);
      const currentPrice = mainProduct.price;

      if (currentPrice > avgPrice * 1.1) {
        analysis.competitiveAnalysis.recommendations.push({
          type: 'price_reduction',
          message: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É. –í–∞—à–∞ —Ü–µ–Ω–∞ –Ω–∞ ${((currentPrice - avgPrice) / avgPrice * 100).toFixed(1)}% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π`,
          suggestedPrice: (avgPrice * 1.05).toFixed(2)
        });
      } else if (currentPrice < avgPrice * 0.9) {
        analysis.competitiveAnalysis.recommendations.push({
          type: 'price_increase',
          message: `–ú–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É. –í–∞—à–∞ —Ü–µ–Ω–∞ –Ω–∞ ${((avgPrice - currentPrice) / avgPrice * 100).toFixed(1)}% –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π`,
          suggestedPrice: (avgPrice * 0.95).toFixed(2)
        });
      } else {
        analysis.competitiveAnalysis.recommendations.push({
          type: 'price_optimal',
          message: '–í–∞—à–∞ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ',
          suggestedPrice: currentPrice
        });
      }
    }

    res.json(analysis);

  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' });
  }
});

// ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù
app.post('/api/wb/auto-price-update', async (req, res) => {
  try {
    const { productId, strategy, parameters } = req.body;

    if (!productId || !strategy) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —Ç–æ–≤–∞—Ä–∞ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é' });
    }

    console.log('ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞:', productId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (!antibanService.checkRateLimit()) {
      return res.status(429).json({ error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }

    await antibanService.addDelay();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    const productResponse = await fetch(`http://localhost:3001/api/wb/product/${productId}`);
    if (!productResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞');
    }
    const productData = await productResponse.json();

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitorsResponse = await fetch(`http://localhost:3001/api/wb/competitors/${productId}?limit=10`);
    if (!competitorsResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
    }
    const competitorsData = await competitorsResponse.json();

    let newPrice = productData.price;
    let recommendation = '';

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    switch (strategy) {
      case 'follow_min':
        if (competitorsData.analysis?.minCompetitorPrice) {
          newPrice = Math.max(
            competitorsData.analysis.minCompetitorPrice,
            parameters.minPrice || 0
          );
          newPrice = Math.min(newPrice, parameters.maxPrice || Infinity);
          recommendation = `–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π: ${competitorsData.analysis.minCompetitorPrice} ‚ÇΩ`;
        }
        break;

      case 'undercut':
        if (competitorsData.analysis?.minCompetitorPrice) {
          const undercutAmount = parameters.undercutAmount || 50;
          newPrice = Math.max(
            competitorsData.analysis.minCompetitorPrice - undercutAmount,
            parameters.minPrice || 0
          );
          newPrice = Math.min(newPrice, parameters.maxPrice || Infinity);
          recommendation = `–ü–æ–¥—Ä–µ–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ ${undercutAmount} ‚ÇΩ`;
        }
        break;

      case 'fixed_margin':
        if (parameters.margin && productData.costPrice) {
          newPrice = productData.costPrice * (1 + parameters.margin / 100);
          newPrice = Math.max(newPrice, parameters.minPrice || 0);
          newPrice = Math.min(newPrice, parameters.maxPrice || Infinity);
          recommendation = `–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞ ${parameters.margin}%`;
        }
        break;

      case 'dynamic':
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        if (competitorsData.analysis?.avgCompetitorPrice) {
          const avgPrice = parseFloat(competitorsData.analysis.avgCompetitorPrice);
          const competitorsCount = competitorsData.competitorsFound;

          // –ï—Å–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –º–∞–ª–æ, —Ü–µ–Ω—É –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å
          if (competitorsCount < 5) {
            newPrice = avgPrice * 1.05; // +5%
            recommendation = '–ú–∞–ª–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 5%';
          } else if (competitorsCount > 15) {
            newPrice = avgPrice * 0.95; // -5%
            recommendation = '–ú–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 5%';
          } else {
            newPrice = avgPrice;
            recommendation = '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä—ã–Ω–∫—É';
          }

          newPrice = Math.max(newPrice, parameters.minPrice || 0);
          newPrice = Math.min(newPrice, parameters.maxPrice || Infinity);
        }
        break;
    }

    // –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É
    newPrice = Math.round(newPrice);

    const result = {
      productId: productId,
      productName: productData.name,
      currentPrice: productData.price,
      newPrice: newPrice,
      priceChange: newPrice - productData.price,
      priceChangePercent: ((newPrice - productData.price) / productData.price * 100).toFixed(2),
      strategy: strategy,
      recommendation: recommendation,
      competitorsAnalyzed: competitorsData.competitorsFound,
      competitorsData: {
        minPrice: competitorsData.analysis?.minCompetitorPrice,
        maxPrice: competitorsData.analysis?.maxCompetitorPrice,
        avgPrice: competitorsData.analysis?.avgCompetitorPrice
      },
      shouldUpdate: Math.abs(newPrice - productData.price) >= 10, // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 10 —Ä—É–±–ª–µ–π
      timestamp: new Date().toISOString(),
      source: 'REAL_WB_AUTO_PRICING'
    };

    console.log('‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', result);
    res.json(result);

  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã' });
  }
});

// üìà –ú–∞—Å—Å–æ–≤–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
app.post('/api/wb/bulk-auto-pricing', async (req, res) => {
  try {
    const { rules } = req.body;

    if (!rules || !Array.isArray(rules) || rules.length === 0) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª' });
    }

    if (rules.length > 20) {
      return res.status(400).json({ error: '–ú–∞–∫—Å–∏–º—É–º 20 –ø—Ä–∞–≤–∏–ª –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å' });
    }

    console.log('ü§ñ –ú–ê–°–°–û–í–û–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω:', rules.length, '–ø—Ä–∞–≤–∏–ª');

    const results = [];
    const errors = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    for (let i = 0; i < rules.length; i++) {
      const rule = rules[i];

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (!antibanService.checkRateLimit()) {
          console.log('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          break;
        }

        await antibanService.addDelay();

        const response = await fetch('http://localhost:3001/api/wb/auto-price-update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            productId: rule.productId,
            strategy: rule.strategy,
            parameters: rule.parameters
          })
        });

        if (response.ok) {
          const result = await response.json();
          results.push({
            ruleId: rule.id,
            ruleName: rule.name,
            ...result
          });
          console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª–æ ${i + 1}/${rules.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:`, rule.name);
        } else {
          errors.push({
            ruleId: rule.id,
            ruleName: rule.name,
            error: `HTTP ${response.status}`
          });
        }
      } catch (error) {
        errors.push({
          ruleId: rule.id,
          ruleName: rule.name,
          error: error.message
        });
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ ${rule.name}:`, error.message);
      }
    }

    const summary = {
      totalRules: rules.length,
      processedRules: results.length,
      errorRules: errors.length,
      priceUpdatesRecommended: results.filter(r => r.shouldUpdate).length,
      totalPriceChanges: results.reduce((sum, r) => sum + Math.abs(r.priceChange || 0), 0),
      results: results,
      errors: errors,
      timestamp: new Date().toISOString(),
      source: 'REAL_WB_BULK_AUTO_PRICING'
    };

    res.json(summary);

  } catch (error) {
    console.error('üö´ –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω' });
  }
});

// üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–©–ò–¢–´ –û–¢ –ë–ê–ù–ê
app.get('/api/wb/antiban-status', (req, res) => {
  const now = Date.now();
  const oneMinute = 60 * 1000;
  const recentRequests = antibanService.requestHistory.filter(time => now - time < oneMinute);
  const maxRequests = antibanService.emergencyMode ? 20 : 50;

  res.json({
    status: antibanService.emergencyMode ? 'emergency' : 'active',
    mode: antibanService.emergencyMode ? '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º' : '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º',
    requestsLastMinute: recentRequests.length,
    maxRequestsPerMinute: maxRequests,
    remainingRequests: Math.max(0, maxRequests - recentRequests.length),
    lastRequestTime: antibanService.lastRequestTime,
    timeSinceLastRequest: now - antibanService.lastRequestTime,
    bannedIPs: antibanService.bannedIPs.size,
    banDetectionCount: antibanService.banDetectionCount,
    currentUserAgent: antibanService.getRandomUserAgent(),
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: antibanService.getStats(),
    protection: {
      rateLimit: `${maxRequests} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É`,
      delays: antibanService.emergencyMode ? '15-20 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏' : '5-15 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏',
      userAgentRotation: '–í–∫–ª—é—á–µ–Ω–∞ (' + antibanService.userAgents.length + ' –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)',
      banDetection: '–ê–∫—Ç–∏–≤–Ω–∞',
      headerSpoofing: '–í–∫–ª—é—á–µ–Ω–∞',
      caching: '–í–∫–ª—é—á–µ–Ω–æ (' + antibanService.cache.size + ' –∑–∞–ø–∏—Å–µ–π)',
      proxyRotation: antibanService.proxyList.length > 0 ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞',
      emergencyProtocol: antibanService.emergencyMode ? '–ê–ö–¢–ò–í–ï–ù' : '–ì–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
    },
    recommendations: []
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const response = res.json;
  if (antibanService.banDetectionCount > 5) {
    response.recommendations.push({
      type: 'warning',
      message: '–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∞–Ω–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã.'
    });
  }

  if (recentRequests.length > maxRequests * 0.8) {
    response.recommendations.push({
      type: 'info',
      message: '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–¥–ª–∏—Ç –∑–∞–ø—Ä–æ—Å—ã.'
    });
  }

  if (antibanService.cache.size > 800) {
    response.recommendations.push({
      type: 'info',
      message: '–ö–µ—à –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.'
    });
  }
});

// üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏
app.post('/api/wb/proxy/add', (req, res) => {
  try {
    const { host, port, username, password, type } = req.body;

    if (!host || !port) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å host –∏ port' });
    }

    const proxy = {
      host,
      port: parseInt(port),
      username,
      password,
      type: type || 'http'
    };

    antibanService.addProxy(proxy);

    res.json({
      success: true,
      message: '–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω',
      proxy: { host, port, type },
      totalProxies: antibanService.proxyList.length
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏' });
  }
});

app.get('/api/wb/proxy/list', (req, res) => {
  const proxies = antibanService.proxyList.map(p => ({
    host: p.host,
    port: p.port,
    type: p.type,
    isActive: p.isActive,
    failCount: p.failCount,
    successRate: (p.successRate * 100).toFixed(1) + '%',
    lastUsed: p.lastUsed ? new Date(p.lastUsed).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'
  }));

  res.json({
    totalProxies: proxies.length,
    activeProxies: proxies.filter(p => p.isActive).length,
    proxies
  });
});

// üß™ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–©–ò–¢–´ –û–¢ –ë–ê–ù–ê
app.get('/api/wb/test-protection', async (req, res) => {
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–∞...');

    const testResults = {
      timestamp: new Date().toISOString(),
      tests: [],
      overall: 'UNKNOWN'
    };

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    const rateLimitTest = {
      name: 'Rate Limit Check',
      status: antibanService.checkRateLimit() ? 'PASSED' : 'LIMITED',
      details: {
        currentRequests: antibanService.requestHistory.filter(time =>
          Date.now() - time < 60000
        ).length,
        maxRequests: antibanService.emergencyMode ? 20 : 50
      }
    };
    testResults.tests.push(rateLimitTest);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫
    const startTime = Date.now();
    await antibanService.addDelay();
    const delayTime = Date.now() - startTime;

    const delayTest = {
      name: 'Delay System',
      status: delayTime >= 5000 ? 'PASSED' : 'WARNING',
      details: {
        delayTime: `${delayTime}ms`,
        expectedMin: '5000ms',
        emergencyMode: antibanService.emergencyMode
      }
    };
    testResults.tests.push(delayTest);

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headers = antibanService.getSafeHeaders();
    const headerTest = {
      name: 'Headers Generation',
      status: Object.keys(headers).length >= 10 ? 'PASSED' : 'WARNING',
      details: {
        headersCount: Object.keys(headers).length,
        userAgent: headers['User-Agent'],
        hasReferer: !!headers['Referer'],
        hasOrigin: !!headers['Origin']
      }
    };
    testResults.tests.push(headerTest);

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
    const cacheTest = {
      name: 'Cache System',
      status: antibanService.cache instanceof Map ? 'PASSED' : 'FAILED',
      details: {
        cacheSize: antibanService.cache.size,
        maxSize: 1000,
        isWorking: antibanService.cache instanceof Map
      }
    };
    testResults.tests.push(cacheTest);

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    const proxyTest = {
      name: 'Proxy System',
      status: antibanService.proxyList.length > 0 ? 'PASSED' : 'WARNING',
      details: {
        totalProxies: antibanService.proxyList.length,
        activeProxies: antibanService.proxyList.filter(p => p.isActive).length,
        recommendation: antibanService.proxyList.length === 0 ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã' : null
      }
    };
    testResults.tests.push(proxyTest);

    // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–∞–Ω–æ–≤
    const banDetectionTest = {
      name: 'Ban Detection',
      status: 'PASSED',
      details: {
        banCount: antibanService.banDetectionCount,
        emergencyMode: antibanService.emergencyMode,
        bannedIPs: antibanService.bannedIPs.size
      }
    };
    testResults.tests.push(banDetectionTest);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const failedTests = testResults.tests.filter(t => t.status === 'FAILED').length;
    const warningTests = testResults.tests.filter(t => t.status === 'WARNING').length;

    if (failedTests > 0) {
      testResults.overall = 'FAILED';
    } else if (warningTests > 0) {
      testResults.overall = 'WARNING';
    } else {
      testResults.overall = 'PASSED';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    testResults.recommendations = [];
    if (antibanService.proxyList.length === 0) {
      testResults.recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –∑–∞—â–∏—Ç—ã');
    }
    if (antibanService.banDetectionCount > 3) {
      testResults.recommendations.push('–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    }
    if (antibanService.cache.size > 800) {
      testResults.recommendations.push('–ö–µ—à –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω - –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω');
    }

    res.json(testResults);

  } catch (error) {
    res.status(500).json({
      test: 'protection_systems',
      result: 'FAILED',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
app.use('/api/logistics', logisticsRouter);
app.use('/api/competitors', competitorsRouter);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log('\nüöÄ ===== WB PRICE OPTIMIZER PRO SERVER =====');
  console.log(`üåê Server running at http://localhost:${port}`);
  console.log(`ü§ñ OpenAI API ${openai ? '‚úÖ configured' : '‚ùå not configured'}`);
  console.log(`üì¶ Logistics module ‚úÖ initialized`);
  console.log('\nüõ°Ô∏è ===== –†–ï–ê–õ–¨–ù–´–ô –ü–ê–†–°–ò–ù–ì WILDBERRIES =====');
  console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ API endpoints:');
  console.log('  ‚Ä¢ GET  /api/wb/product/:id        - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID');
  console.log('  ‚Ä¢ GET  /api/wb/search             - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤');
  console.log('  ‚Ä¢ GET  /api/wb/competitors/:id    - –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
  console.log('  ‚Ä¢ GET  /api/wb/seller/:id         - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ');
  console.log('  ‚Ä¢ POST /api/wb/products/batch     - –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤');
  console.log('  ‚Ä¢ POST /api/wb/price-monitoring   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
  console.log('\nü§ñ ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï =====');
  console.log('  ‚Ä¢ POST /api/wb/auto-price-update  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã');
  console.log('  ‚Ä¢ POST /api/wb/bulk-auto-pricing  - –ú–∞—Å—Å–æ–≤–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ');
  console.log('\nüõ°Ô∏è ===== –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–¢–´ –û–¢ –ë–õ–û–ö–ò–†–û–í–û–ö =====');
  console.log('  ‚Ä¢ GET  /api/wb/antiban-status     - –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã');
  console.log('  ‚Ä¢ GET  /api/wb/test-protection    - –¢–µ—Å—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∑–∞—â–∏—Ç—ã');
  console.log('  ‚Ä¢ POST /api/wb/proxy/add          - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏');
  console.log('  ‚Ä¢ GET  /api/wb/proxy/list         - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏');
  console.log('\n‚ú® ===== –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ =====');
  console.log('  üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è User-Agent');
  console.log('  ‚è±Ô∏è  –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏');
  console.log('  üíæ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
  console.log('  üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
  console.log('  üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö');
  console.log('  üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤');
  console.log('  üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö');
  console.log('\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ Wildberries!');
  console.log('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:' + port + '/api/wb/antiban-status');
  console.log('üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã: http://localhost:' + port + '/api/wb/test-protection');
  console.log('===============================================\n');
});
