import {
  Box,
  Container,
  Heading,
  VStack,
  HStack,
  Button,
  Input,
  FormControl,
  FormLabel,
  Text,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Card,
  CardHeader,
  CardBody,
  useColorModeValue,
  useToast,
  Spinner,
  Badge,
  SimpleGrid,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Code,
  Divider
} from '@chakra-ui/react';
import { useState } from 'react';
import { wildberriesApi } from '../services/wildberriesApi';
import { useAuth } from '../context/AuthContext';

export default function WildberriesApiTestPage() {
  const [apiKey, setApiKey] = useState('');
  const [productId, setProductId] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  const toast = useToast();
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('blue.500', 'blue.300');
  const { user, updateUser } = useAuth();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
  const fixUserRole = async () => {
    if (user && user.username === 'demo' && user.role !== 'seller') {
      try {
        await updateUser({ role: 'seller' });
        toast({
          title: '–†–æ–ª—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!',
          description: '–†–æ–ª—å demo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "–ü—Ä–æ–¥–∞–≤–µ—Ü"',
          status: 'success',
          duration: 3000,
        });
        window.location.reload();
      } catch (error) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å',
          status: 'error',
          duration: 3000,
        });
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
  const makeAdmin = async () => {
    if (user) {
      try {
        await updateUser({ role: 'admin' });
        toast({
          title: '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!',
          description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä`,
          status: 'success',
          duration: 3000,
        });
        window.location.reload();
      } catch (error) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å',
          status: 'error',
          duration: 3000,
        });
      }
    }
  };

  const handleSetApiKey = () => {
    if (!apiKey.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    wildberriesApi.setApiKey(apiKey);
    toast({
      title: 'API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      description: '–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã API',
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  };

  const testApiMethod = async (methodName: string, method: () => Promise<any>) => {
    setIsLoading(true);
    setError(null);
    setResults(null);

    try {
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥: ${methodName}`);
      const result = await method();
      setResults({ method: methodName, data: result });

      toast({
        title: '–£—Å–ø–µ—Ö!',
        description: `–ú–µ—Ç–æ–¥ ${methodName} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);

      toast({
        title: '–û—à–∏–±–∫–∞ API',
        description: errorMessage,
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const apiMethods = [
    // –ú–µ—Ç–æ–¥—ã —Å API –∫–ª—é—á–æ–º
    {
      name: 'getCategories',
      label: 'üìÇ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (TNVED)',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤',
      method: () => wildberriesApi.getCategories(),
      requiresApiKey: true
    },
    {
      name: 'getSubjects',
      label: 'üìã –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (subjects)',
      method: () => wildberriesApi.getSubjects(),
      requiresApiKey: true
    },
    {
      name: 'getProducts',
      label: 'üõí –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤',
      method: () => wildberriesApi.getProducts(10, 0),
      requiresApiKey: true
    },
    {
      name: 'getPrices',
      label: 'üí∞ –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö',
      method: () => wildberriesApi.getPrices(),
      requiresApiKey: true
    },
    {
      name: 'getStocks',
      label: 'üì¶ –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤',
      method: () => wildberriesApi.getStocks(),
      requiresApiKey: true
    },
    {
      name: 'getWarehouses',
      label: 'üè™ –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥—ã',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö',
      method: () => wildberriesApi.getWarehouses(),
      requiresApiKey: true
    }
  ];

  const publicApiMethods = [
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–±–µ–∑ API –∫–ª—é—á–∞)
    {
      name: 'getPublicProductById',
      label: 'üåê –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID',
      description: '–ü—É–±–ª–∏—á–Ω–æ–µ API: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –±–µ–∑ –∫–ª—é—á–∞',
      method: () => {
        if (!productId) {
          throw new Error('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞');
        }
        return wildberriesApi.getPublicProductById(parseInt(productId));
      },
      requiresApiKey: false
    },
    {
      name: 'publicSearchProducts',
      label: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤',
      description: '–ü—É–±–ª–∏—á–Ω–æ–µ API: –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∫–ª—é—á–∞',
      method: () => {
        if (!searchQuery) {
          throw new Error('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        }
        return wildberriesApi.publicSearchProducts(searchQuery, 1);
      },
      requiresApiKey: false
    },
    {
      name: 'getPublicPriceHistory',
      label: 'üí∞ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω',
      description: '–ü—É–±–ª–∏—á–Ω–æ–µ API: –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞',
      method: () => {
        if (!productId) {
          throw new Error('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞');
        }
        return wildberriesApi.getPublicPriceHistory(parseInt(productId));
      },
      requiresApiKey: false
    },
    {
      name: 'getPublicSellerInfo',
      label: 'üè™ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ',
      description: '–ü—É–±–ª–∏—á–Ω–æ–µ API: –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ',
      method: () => {
        if (!productId) {
          throw new Error('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞');
        }
        return wildberriesApi.getPublicSellerInfo(parseInt(productId));
      },
      requiresApiKey: false
    }
  ];

  return (
    <Container maxW="7xl" py={8}>
      <VStack spacing={8} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box textAlign="center">
          <Heading size="xl" color="blue.600" mb={2}>
            üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Wildberries API
          </Heading>
          <Text color="gray.600">
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–æ–≤ API Wildberries
          </Text>
        </Box>

        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ–ª–∏ */}
        {user && user.username === 'demo' && user.role !== 'seller' && (
          <Alert status="warning">
            <AlertIcon />
            <Box flex="1">
              <AlertTitle>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</AlertTitle>
              <AlertDescription>
                –£ demo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å "{user.role}", –∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å "seller" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.
              </AlertDescription>
            </Box>
            <Button colorScheme="orange" size="sm" onClick={fixUserRole}>
              –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å
            </Button>
          </Alert>
        )}

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ */}
        {user && (
          <Card bg={bgColor} borderWidth="2px" borderColor="purple.300">
            <CardHeader>
              <Heading size="md">üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4}>
                <Alert status="info">
                  <AlertIcon />
                  <Box flex="1">
                    <AlertTitle>–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</AlertTitle>
                    <AlertDescription>
                      <strong>{user.username}</strong> —Å —Ä–æ–ª—å—é <strong>"{user.role}"</strong>
                    </AlertDescription>
                  </Box>
                </Alert>

                <HStack spacing={4}>
                  <Button
                    colorScheme="red"
                    size="sm"
                    onClick={makeAdmin}
                    isDisabled={user.role === 'admin'}
                  >
                    üëë –°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                  </Button>

                  <Button
                    colorScheme="blue"
                    size="sm"
                    onClick={() => updateUser({ role: 'seller' })}
                    isDisabled={user.role === 'seller'}
                  >
                    üõí –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                  </Button>

                  <Button
                    colorScheme="green"
                    size="sm"
                    onClick={() => updateUser({ role: 'manager' })}
                    isDisabled={user.role === 'manager'}
                  >
                    üìä –°—Ç–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                  </Button>
                </HStack>

                <Text fontSize="sm" color="gray.500">
                  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                </Text>
              </VStack>
            </CardBody>
          </Card>
        )}

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–∞ */}
        <Card bg={bgColor} borderWidth="2px" borderColor={borderColor}>
          <CardHeader>
            <Heading size="md">üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</Heading>
          </CardHeader>
          <CardBody>
            <VStack spacing={4}>
              <FormControl>
                <FormLabel>API –∫–ª—é—á Wildberries (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)</FormLabel>
                <Input
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á"
                  type="password"
                />
              </FormControl>
              <Button colorScheme="blue" onClick={handleSetApiKey}>
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á
              </Button>

              <Divider />

              <FormControl>
                <FormLabel>ID —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤)</FormLabel>
                <Input
                  value={productId}
                  onChange={(e) => setProductId(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789"
                  type="number"
                />
              </FormControl>

              <FormControl>
                <FormLabel>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</FormLabel>
                <Input
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 15"
                />
              </FormControl>

              {wildberriesApi.hasApiKey() && (
                <Alert status="success">
                  <AlertIcon />
                  <AlertTitle>API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</AlertTitle>
                  <AlertDescription>
                    –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
                  </AlertDescription>
                </Alert>
              )}

              <Alert status="info">
                <AlertIcon />
                <AlertDescription>
                  –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ API –∫–ª—é—á–∞!
                </AlertDescription>
              </Alert>
            </VStack>
          </CardBody>
        </Card>

        {/* –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã API */}
        <Card bg={bgColor} borderWidth="2px" borderColor="green.300">
          <CardHeader>
            <Heading size="md">üåê –ü—É–±–ª–∏—á–Ω–æ–µ API (–±–µ–∑ –∫–ª—é—á–∞)</Heading>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={4}>
              {publicApiMethods.map((apiMethod) => (
                <Card key={apiMethod.name} variant="outline" borderColor="green.200">
                  <CardBody>
                    <VStack spacing={3} align="stretch">
                      <Text fontWeight="bold" color="green.600">{apiMethod.label}</Text>
                      <Text fontSize="sm" color="gray.600">
                        {apiMethod.description}
                      </Text>
                      <Button
                        size="sm"
                        colorScheme="green"
                        isLoading={isLoading}
                        onClick={() => testApiMethod(apiMethod.name, apiMethod.method)}
                      >
                        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </VStack>
                  </CardBody>
                </Card>
              ))}
            </SimpleGrid>
          </CardBody>
        </Card>

        {/* –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã API */}
        <Card bg={bgColor} borderWidth="2px" borderColor={borderColor}>
          <CardHeader>
            <Heading size="md">üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ API (—Å –∫–ª—é—á–æ–º)</Heading>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={4}>
              {apiMethods.map((apiMethod) => (
                <Card key={apiMethod.name} variant="outline">
                  <CardBody>
                    <VStack spacing={3} align="stretch">
                      <Text fontWeight="bold">{apiMethod.label}</Text>
                      <Text fontSize="sm" color="gray.600">
                        {apiMethod.description}
                      </Text>
                      <Button
                        size="sm"
                        colorScheme="blue"
                        isLoading={isLoading}
                        isDisabled={!wildberriesApi.hasApiKey()}
                        onClick={() => testApiMethod(apiMethod.name, apiMethod.method)}
                      >
                        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    </VStack>
                  </CardBody>
                </Card>
              ))}
            </SimpleGrid>
          </CardBody>
        </Card>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        {(results || error) && (
          <Card bg={bgColor} borderWidth="2px" borderColor={borderColor}>
            <CardHeader>
              <HStack justify="space-between">
                <Heading size="md">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</Heading>
                {isLoading && <Spinner size="sm" />}
              </HStack>
            </CardHeader>
            <CardBody>
              {error && (
                <Alert status="error" mb={4}>
                  <AlertIcon />
                  <AlertTitle>–û—à–∏–±–∫–∞!</AlertTitle>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              {results && (
                <VStack spacing={4} align="stretch">
                  <HStack>
                    <Badge colorScheme="green">–ú–µ—Ç–æ–¥:</Badge>
                    <Code>{results.method}</Code>
                  </HStack>

                  <Divider />

                  <Box>
                    <Text fontWeight="bold" mb={2}>–î–∞–Ω–Ω—ã–µ:</Text>
                    <Box
                      bg="gray.50"
                      p={4}
                      borderRadius="md"
                      maxH="400px"
                      overflowY="auto"
                    >
                      <Code display="block" whiteSpace="pre-wrap">
                        {JSON.stringify(results.data, null, 2)}
                      </Code>
                    </Box>
                  </Box>
                </VStack>
              )}
            </CardBody>
          </Card>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <Card bg={bgColor} borderWidth="2px" borderColor="orange.300">
          <CardHeader>
            <Heading size="md">üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</Heading>
          </CardHeader>
          <CardBody>
            <VStack spacing={3} align="stretch">
              <Text fontWeight="bold" color="green.600">
                üåê –ü—É–±–ª–∏—á–Ω–æ–µ API (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É):
              </Text>
              <Text>
                <strong>1.</strong> –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–∑ URL https://www.wildberries.ru/catalog/123456789/detail.aspx)
              </Text>
              <Text>
                <strong>2.</strong> –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "iPhone 15")
              </Text>
              <Text>
                <strong>3.</strong> –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
              </Text>

              <Divider />

              <Text fontWeight="bold" color="blue.600">
                üîê –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ API (—Ç—Ä–µ–±—É–µ—Ç –∫–ª—é—á):
              </Text>
              <Text>
                <strong>1.</strong> –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Wildberries
              </Text>
              <Text>
                <strong>2.</strong> –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –≤ –ø–æ–ª–µ –≤—ã—à–µ
              </Text>
              <Text>
                <strong>3.</strong> –ù–∞–∂–º–∏—Ç–µ —Å–∏–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
              </Text>

              <Alert status="success">
                <AlertIcon />
                <AlertDescription>
                  <strong>–ü—É–±–ª–∏—á–Ω–æ–µ API</strong> –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!
                </AlertDescription>
              </Alert>

              <Alert status="info">
                <AlertIcon />
                <AlertDescription>
                  –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                </AlertDescription>
              </Alert>
            </VStack>
          </CardBody>
        </Card>
      </VStack>
    </Container>
  );
}
