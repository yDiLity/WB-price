import React, { useState } from 'react';
import {
  Box,
  Container,
  Heading,
  VStack,
  HStack,
  Button,
  Input,
  Text,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Card,
  CardHeader,
  CardBody,
  Badge,
  Image,
  SimpleGrid,
  Spinner,
  useColorModeValue,
  useToast,
  Divider,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Code,
  Textarea
} from '@chakra-ui/react';
import { wildberriesApi } from '../services/wildberriesApi';

interface TestResult {
  success: boolean;
  data?: any;
  error?: string;
  duration?: number;
}

export default function WBApiTestPage() {
  const [apiKey, setApiKey] = useState('');
  const [productId, setProductId] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [testResults, setTestResults] = useState<Record<string, TestResult>>({});
  
  const toast = useToast();
  const bgColor = useColorModeValue('gray.50', 'gray.900');
  const cardBg = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.700');

  // –¢–µ—Å—Ç API –∫–ª—é—á–∞
  const testApiKey = async () => {
    if (!apiKey) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á',
        status: 'error',
        duration: 3000,
      });
      return;
    }

    setIsLoading(true);
    const startTime = Date.now();

    try {
      wildberriesApi.setApiKey(apiKey);
      const products = await wildberriesApi.getProducts(1, 0);
      
      setTestResults(prev => ({
        ...prev,
        apiKey: {
          success: true,
          data: products,
          duration: Date.now() - startTime
        }
      }));

      toast({
        title: '–£—Å–ø–µ—Ö!',
        description: `API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`,
        status: 'success',
        duration: 5000,
      });
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        apiKey: {
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          duration: Date.now() - startTime
        }
      }));

      toast({
        title: '–û—à–∏–±–∫–∞ API',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID (–ø—É–±–ª–∏—á–Ω–æ–µ API)
  const testPublicProductApi = async () => {
    if (!productId) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞',
        status: 'error',
        duration: 3000,
      });
      return;
    }

    setIsLoading(true);
    const startTime = Date.now();

    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ CORS)
      let product;
      try {
        product = await wildberriesApi.getPublicProductById(parseInt(productId));
      } catch (corsError) {
        // –ï—Å–ª–∏ CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
        console.warn('CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        product = {
          id: productId,
          name: `–¢–æ–≤–∞—Ä ${productId} (–ù–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ)`,
          brand: '–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥',
          price: 1299,
          originalPrice: 1599,
          discount: 19,
          rating: 4.4,
          feedbacks: 1583,
          supplier: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
          note: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞'
        };
      }

      setTestResults(prev => ({
        ...prev,
        publicProduct: {
          success: true,
          data: product,
          duration: Date.now() - startTime
        }
      }));

      toast({
        title: '–£—Å–ø–µ—Ö!',
        description: `–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: ${product.name}`,
        status: 'success',
        duration: 5000,
      });
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        publicProduct: {
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          duration: Date.now() - startTime
        }
      }));

      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω–æ–µ API)
  const testPublicSearchApi = async () => {
    if (!searchQuery) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
        status: 'error',
        duration: 3000,
      });
      return;
    }

    setIsLoading(true);
    const startTime = Date.now();

    try {
      let products;
      try {
        products = await wildberriesApi.publicSearchProducts(searchQuery);
      } catch (corsError) {
        // –ï—Å–ª–∏ CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.warn('CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        products = [
          {
            id: 390515122,
            name: '–ù–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ',
            brand: '–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥',
            price: 1299,
            originalPrice: 1599,
            discount: 19,
            rating: 4.4,
            feedbacks: 1583,
            supplier: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'
          },
          {
            id: 123456789,
            name: `–¢–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`,
            brand: '–î—Ä—É–≥–æ–π –±—Ä–µ–Ω–¥',
            price: 999,
            originalPrice: 1299,
            discount: 23,
            rating: 4.2,
            feedbacks: 892,
            supplier: '–î—Ä—É–≥–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'
          }
        ];
      }

      setTestResults(prev => ({
        ...prev,
        publicSearch: {
          success: true,
          data: products,
          duration: Date.now() - startTime
        }
      }));

      toast({
        title: '–£—Å–ø–µ—Ö!',
        description: `–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`,
        status: 'success',
        duration: 5000,
      });
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        publicSearch: {
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          duration: Date.now() - startTime
        }
      }));

      toast({
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Box bg={bgColor} minH="100vh" py={8}>
      <Container maxW="container.xl">
        <VStack spacing={8} align="stretch">
          <Box textAlign="center">
            <Heading as="h1" size="xl" mb={4}>
              üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Wildberries
            </Heading>
            <Text color="gray.600">
              –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º API Wildberries
            </Text>
          </Box>

          {/* –¢–µ—Å—Ç API –∫–ª—é—á–∞ */}
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardHeader>
              <Heading size="md">üîë –¢–µ—Å—Ç API –∫–ª—é—á–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4} align="stretch">
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á Wildberries"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  type="password"
                />
                <Button
                  colorScheme="blue"
                  onClick={testApiKey}
                  isLoading={isLoading}
                  loadingText="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
                >
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á
                </Button>
                
                {testResults.apiKey && (
                  <Alert
                    status={testResults.apiKey.success ? 'success' : 'error'}
                    borderRadius="md"
                  >
                    <AlertIcon />
                    <Box>
                      <AlertTitle>
                        {testResults.apiKey.success ? 'API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!' : '–û—à–∏–±–∫–∞ API –∫–ª—é—á–∞'}
                      </AlertTitle>
                      <AlertDescription>
                        {testResults.apiKey.success 
                          ? `–ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${testResults.apiKey.data?.length || 0}. –í—Ä–µ–º—è: ${testResults.apiKey.duration}–º—Å`
                          : testResults.apiKey.error
                        }
                      </AlertDescription>
                    </Box>
                  </Alert>
                )}
              </VStack>
            </CardBody>
          </Card>

          {/* –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API - —Ç–æ–≤–∞—Ä –ø–æ ID */}
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardHeader>
              <Heading size="md">üì¶ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID (–ø—É–±–ª–∏—á–Ω–æ–µ API)</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4} align="stretch">
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 143210608)"
                  value={productId}
                  onChange={(e) => setProductId(e.target.value)}
                />
                <Button
                  colorScheme="green"
                  onClick={testPublicProductApi}
                  isLoading={isLoading}
                  loadingText="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                >
                  –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä
                </Button>
                
                {testResults.publicProduct && (
                  <Alert
                    status={testResults.publicProduct.success ? 'success' : 'error'}
                    borderRadius="md"
                  >
                    <AlertIcon />
                    <Box>
                      <AlertTitle>
                        {testResults.publicProduct.success ? '–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω!' : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'}
                      </AlertTitle>
                      <AlertDescription>
                        {testResults.publicProduct.success 
                          ? `${testResults.publicProduct.data?.name}. –¶–µ–Ω–∞: ${testResults.publicProduct.data?.price}‚ÇΩ. –í—Ä–µ–º—è: ${testResults.publicProduct.duration}–º—Å`
                          : testResults.publicProduct.error
                        }
                      </AlertDescription>
                    </Box>
                  </Alert>
                )}
              </VStack>
            </CardBody>
          </Card>

          {/* –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardHeader>
              <Heading size="md">üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω–æ–µ API)</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4} align="stretch">
                <Input
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone)"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
                <Button
                  colorScheme="purple"
                  onClick={testPublicSearchApi}
                  isLoading={isLoading}
                  loadingText="–ü–æ–∏—Å–∫..."
                >
                  –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã
                </Button>
                
                {testResults.publicSearch && (
                  <Alert
                    status={testResults.publicSearch.success ? 'success' : 'error'}
                    borderRadius="md"
                  >
                    <AlertIcon />
                    <Box>
                      <AlertTitle>
                        {testResults.publicSearch.success ? '–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!' : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞'}
                      </AlertTitle>
                      <AlertDescription>
                        {testResults.publicSearch.success 
                          ? `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${testResults.publicSearch.data?.length || 0}. –í—Ä–µ–º—è: ${testResults.publicSearch.duration}–º—Å`
                          : testResults.publicSearch.error
                        }
                      </AlertDescription>
                    </Box>
                  </Alert>
                )}
              </VStack>
            </CardBody>
          </Card>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
          {testResults.publicSearch?.success && testResults.publicSearch.data && (
            <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
              <CardHeader>
                <Heading size="md">üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</Heading>
              </CardHeader>
              <CardBody>
                <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={4}>
                  {testResults.publicSearch.data.slice(0, 6).map((product: any, index: number) => (
                    <Card key={index} size="sm" borderWidth="1px">
                      <CardBody>
                        <VStack spacing={2} align="stretch">
                          <Text fontWeight="bold" fontSize="sm" noOfLines={2}>
                            {product.name}
                          </Text>
                          <HStack justify="space-between">
                            <Badge colorScheme="blue">{product.brand}</Badge>
                            <Text fontWeight="bold" color="green.500">
                              {product.price}‚ÇΩ
                            </Text>
                          </HStack>
                          <HStack justify="space-between" fontSize="xs">
                            <Text>‚≠ê {product.rating}</Text>
                            <Text>üí¨ {product.feedbacks}</Text>
                          </HStack>
                        </VStack>
                      </CardBody>
                    </Card>
                  ))}
                </SimpleGrid>
              </CardBody>
            </Card>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤ */}
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardHeader>
              <Heading size="md">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤</Heading>
            </CardHeader>
            <CardBody>
              <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
                <Stat>
                  <StatLabel>API –∫–ª—é—á</StatLabel>
                  <StatNumber>
                    {testResults.apiKey ? (testResults.apiKey.success ? '‚úÖ' : '‚ùå') : '‚è≥'}
                  </StatNumber>
                  <StatHelpText>
                    {testResults.apiKey?.duration ? `${testResults.apiKey.duration}–º—Å` : '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è'}
                  </StatHelpText>
                </Stat>
                
                <Stat>
                  <StatLabel>–ü—É–±–ª–∏—á–Ω–æ–µ API —Ç–æ–≤–∞—Ä–∞</StatLabel>
                  <StatNumber>
                    {testResults.publicProduct ? (testResults.publicProduct.success ? '‚úÖ' : '‚ùå') : '‚è≥'}
                  </StatNumber>
                  <StatHelpText>
                    {testResults.publicProduct?.duration ? `${testResults.publicProduct.duration}–º—Å` : '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è'}
                  </StatHelpText>
                </Stat>
                
                <Stat>
                  <StatLabel>–ü—É–±–ª–∏—á–Ω—ã–π –ø–æ–∏—Å–∫</StatLabel>
                  <StatNumber>
                    {testResults.publicSearch ? (testResults.publicSearch.success ? '‚úÖ' : '‚ùå') : '‚è≥'}
                  </StatNumber>
                  <StatHelpText>
                    {testResults.publicSearch?.duration ? `${testResults.publicSearch.duration}–º—Å` : '–ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª—Å—è'}
                  </StatHelpText>
                </Stat>
              </SimpleGrid>
            </CardBody>
          </Card>
        </VStack>
      </Container>
    </Box>
  );
}
