import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Input,
  FormControl,
  FormLabel,
  Card,
  CardBody,
  CardHeader,
  Badge,
  Progress,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  useToast,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Spinner,
  useColorModeValue,
  Divider,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer
} from '@chakra-ui/react';
import { FaSearch, FaShieldAlt, FaRobot, FaChartLine, FaEye, FaDownload } from 'react-icons/fa';

interface WBProduct {
  id: string;
  name: string;
  brand: string;
  price: number;
  originalPrice?: number;
  discount: number;
  rating: number;
  feedbacks: number;
  supplier: string;
  source: string;
  lastUpdated: string;
  parseMethod?: string;
  note?: string;
  isBlocked?: boolean;
}

interface AntibanStatus {
  status: string;
  mode: string;
  requestsLastMinute: number;
  maxRequestsPerMinute: number;
  remainingRequests: number;
  banDetectionCount: number;
  protection: any;
  stats: any;
}

const RealWBParsingPage: React.FC = () => {
  const [productId, setProductId] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [product, setProduct] = useState<WBProduct | null>(null);
  const [searchResults, setSearchResults] = useState<WBProduct[]>([]);
  const [antibanStatus, setAntibanStatus] = useState<AntibanStatus | null>(null);
  const [testResults, setTestResults] = useState<any>(null);
  
  const toast = useToast();
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    loadAntibanStatus();
    const interval = setInterval(loadAntibanStatus, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  const loadAntibanStatus = async () => {
    try {
      const response = await fetch('/api/wb/antiban-status');
      if (response.ok) {
        const data = await response.json();
        setAntibanStatus(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—â–∏—Ç—ã:', error);
    }
  };

  const handleProductSearch = async () => {
    if (!productId.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    setLoading(true);
    setProduct(null);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π API
      let response = await fetch(`/api/wb/product/${productId.trim()}`);
      let data = null;

      if (response.ok) {
        data = await response.json();
        console.log('‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API');
      } else {
        // –ï—Å–ª–∏ –ø—Ä—è–º–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—â–µ–º —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        console.log('‚ö†Ô∏è –ü—Ä—è–º–æ–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É...');

        const searchResponse = await fetch(`/api/wb/search?q=${productId.trim()}&limit=50`);

        if (searchResponse.status === 429) {
          toast({
            title: '–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
            description: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Wildberries. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            status: 'warning',
            duration: 5000,
            isClosable: true,
          });
          return;
        }

        if (searchResponse.status === 503) {
          toast({
            title: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞',
            description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Wildberries. –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –≤ –∑–∞—â–∏—Ç–Ω—ã–π —Ä–µ–∂–∏–º.',
            status: 'error',
            duration: 5000,
            isClosable: true,
          });
          return;
        }

        if (searchResponse.ok) {
          const searchData = await searchResponse.json();

          // –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ID
          const exactMatch = searchData.products?.find((product: any) =>
            product.id.toString() === productId.trim()
          );

          if (exactMatch) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            data = {
              ...exactMatch,
              source: 'SEARCH_BY_ARTICLE',
              parseMethod: 'search_fallback'
            };
            console.log('‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É');
          } else {
            console.log('‚ùå –¢–æ–≤–∞—Ä —Å —Ç–æ—á–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
        }
      }

      if (data) {
        setProduct(data);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if (data.isBlocked || data.source === 'FALLBACK_DATA') {
          toast({
            title: '–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            description: `Wildberries –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –ê—Ä—Ç–∏–∫—É–ª ${productId.trim()} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`,
            status: 'warning',
            duration: 7000,
            isClosable: true,
          });
        } else {
          const successMessage = data.source === 'SEARCH_BY_ARTICLE'
            ? `–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫: "${data.name}"`
            : `–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: "${data.name}"`;

          toast({
            title: '–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω!',
            description: successMessage,
            status: 'success',
            duration: 5000,
            isClosable: true,
          });
        }

      } else {
        toast({
          title: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
          description: `–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${productId.trim()} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Wildberries`,
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
      loadAntibanStatus(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
    }
  };

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`/api/wb/search?q=${encodeURIComponent(searchQuery)}&limit=20`);
      
      if (response.ok) {
        const data = await response.json();
        setSearchResults(data.products || []);
        toast({
          title: '–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω',
          description: `–ù–∞–π–¥–µ–Ω–æ ${data.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤`,
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
      loadAntibanStatus();
    }
  };

  const runProtectionTest = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/wb/test-protection');
      if (response.ok) {
        const data = await response.json();
        setTestResults(data);
        toast({
          title: '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
          description: `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${data.overall}`,
          status: data.overall === 'PASSED' ? 'success' : data.overall === 'WARNING' ? 'warning' : 'error',
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'PASSED': return 'green';
      case 'WARNING': return 'yellow';
      case 'FAILED': return 'red';
      case 'LIMITED': return 'orange';
      default: return 'gray';
    }
  };

  return (
    <Container maxW="7xl" py={8}>
      <VStack spacing={8} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box textAlign="center">
          <Heading size="xl" mb={4}>
            üåê –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Wildberries
          </Heading>
          <Text fontSize="lg" color="gray.600">
            –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          </Text>
        </Box>

        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã */}
        {antibanStatus && (
          <Card bg={bgColor} borderColor={borderColor}>
            <CardHeader>
              <HStack>
                <FaShieldAlt />
                <Heading size="md">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã</Heading>
                <Badge colorScheme={antibanStatus.status === 'emergency' ? 'red' : 'green'}>
                  {antibanStatus.mode}
                </Badge>
              </HStack>
            </CardHeader>
            <CardBody>
              <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
                <Stat>
                  <StatLabel>–ó–∞–ø—Ä–æ—Å—ã/–º–∏–Ω—É—Ç—É</StatLabel>
                  <StatNumber>{antibanStatus.requestsLastMinute}/{antibanStatus.maxRequestsPerMinute}</StatNumber>
                  <StatHelpText>–û—Å—Ç–∞–ª–æ—Å—å: {antibanStatus.remainingRequests}</StatHelpText>
                </Stat>
                <Stat>
                  <StatLabel>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–∞–Ω–æ–≤</StatLabel>
                  <StatNumber>{antibanStatus.banDetectionCount}</StatNumber>
                  <StatHelpText>–í—Å–µ–≥–æ –∑–∞ —Å–µ—Å—Å–∏—é</StatHelpText>
                </Stat>
                <Stat>
                  <StatLabel>–ö–µ—à</StatLabel>
                  <StatNumber>{antibanStatus.stats?.cacheSize || 0}</StatNumber>
                  <StatHelpText>–ó–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ</StatHelpText>
                </Stat>
                <Stat>
                  <StatLabel>–ü—Ä–æ–∫—Å–∏</StatLabel>
                  <StatNumber>{antibanStatus.stats?.activeProxies || 0}/{antibanStatus.stats?.totalProxies || 0}</StatNumber>
                  <StatHelpText>–ê–∫—Ç–∏–≤–Ω—ã—Ö/–í—Å–µ–≥–æ</StatHelpText>
                </Stat>
              </SimpleGrid>
            </CardBody>
          </Card>
        )}

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ */}
        <Tabs variant="enclosed">
          <TabList>
            <Tab><FaSearch /> –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞</Tab>
            <Tab><FaEye /> –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É</Tab>
            <Tab><FaShieldAlt /> –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã</Tab>
            <Tab><FaChartLine /> –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</Tab>
          </TabList>

          <TabPanels>
            {/* –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID */}
            <TabPanel>
              <VStack spacing={4} align="stretch">
                <FormControl>
                  <FormLabel>–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ Wildberries</FormLabel>
                  <HStack>
                    <Input
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 244826784"
                      value={productId}
                      onChange={(e) => setProductId(e.target.value)}
                    />
                    <Button
                      colorScheme="blue"
                      onClick={handleProductSearch}
                      isLoading={loading}
                      leftIcon={<FaSearch />}
                    >
                      –ù–∞–π—Ç–∏
                    </Button>
                  </HStack>
                </FormControl>

                {product && (
                  <Card borderColor={product.isBlocked ? 'orange.300' : borderColor}>
                    <CardHeader>
                      <HStack justify="space-between">
                        <Heading size="md">{product.name}</Heading>
                        {product.isBlocked && (
                          <Badge colorScheme="orange">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</Badge>
                        )}
                      </HStack>
                    </CardHeader>
                    <CardBody>
                      {product.isBlocked ? (
                        <Alert status="warning">
                          <AlertIcon />
                          <Box>
                            <AlertTitle>–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</AlertTitle>
                            <AlertDescription>
                              {product.note}
                              <br />
                              <Text mt={2} fontSize="sm">
                                <strong>–ê—Ä—Ç–∏–∫—É–ª:</strong> {product.id}
                                <br />
                                <strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {product.source}
                                <br />
                                <strong>–ú–µ—Ç–æ–¥:</strong> {product.parseMethod}
                              </Text>
                            </AlertDescription>
                          </Box>
                        </Alert>
                      ) : (
                        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                          <VStack align="start" spacing={2}>
                            <Text><strong>–ë—Ä–µ–Ω–¥:</strong> {product.brand}</Text>
                            <Text><strong>–¶–µ–Ω–∞:</strong> {product.price} ‚ÇΩ</Text>
                            {product.originalPrice && (
                              <Text><strong>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</strong> {product.originalPrice} ‚ÇΩ</Text>
                            )}
                            <Text><strong>–°–∫–∏–¥–∫–∞:</strong> {product.discount}%</Text>
                          </VStack>
                          <VStack align="start" spacing={2}>
                            <Text><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {product.rating}</Text>
                            <Text><strong>–û—Ç–∑—ã–≤—ã:</strong> {product.feedbacks}</Text>
                            <Text><strong>–ü—Ä–æ–¥–∞–≤–µ—Ü:</strong> {product.supplier}</Text>
                            <Badge colorScheme="green">{product.source}</Badge>
                          </VStack>
                        </SimpleGrid>
                      )}
                    </CardBody>
                  </Card>
                )}
              </VStack>
            </TabPanel>

            {/* –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É */}
            <TabPanel>
              <VStack spacing={4} align="stretch">
                <FormControl>
                  <FormLabel>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</FormLabel>
                  <HStack>
                    <Input
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 15"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                    <Button
                      colorScheme="blue"
                      onClick={handleSearch}
                      isLoading={loading}
                      leftIcon={<FaSearch />}
                    >
                      –ò—Å–∫–∞—Ç—å
                    </Button>
                  </HStack>
                </FormControl>

                {searchResults.length > 0 && (
                  <TableContainer>
                    <Table variant="simple">
                      <Thead>
                        <Tr>
                          <Th>–ù–∞–∑–≤–∞–Ω–∏–µ</Th>
                          <Th>–ë—Ä–µ–Ω–¥</Th>
                          <Th>–¶–µ–Ω–∞</Th>
                          <Th>–†–µ–π—Ç–∏–Ω–≥</Th>
                          <Th>–û—Ç–∑—ã–≤—ã</Th>
                        </Tr>
                      </Thead>
                      <Tbody>
                        {searchResults.slice(0, 10).map((item) => (
                          <Tr key={item.id}>
                            <Td>{item.name.substring(0, 50)}...</Td>
                            <Td>{item.brand}</Td>
                            <Td>{item.price} ‚ÇΩ</Td>
                            <Td>{item.rating}</Td>
                            <Td>{item.feedbacks}</Td>
                          </Tr>
                        ))}
                      </Tbody>
                    </Table>
                  </TableContainer>
                )}
              </VStack>
            </TabPanel>

            {/* –¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã */}
            <TabPanel>
              <VStack spacing={4} align="stretch">
                <Button
                  colorScheme="purple"
                  onClick={runProtectionTest}
                  isLoading={loading}
                  leftIcon={<FaRobot />}
                  size="lg"
                >
                  –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã
                </Button>

                {testResults && (
                  <Card>
                    <CardHeader>
                      <HStack>
                        <Heading size="md">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</Heading>
                        <Badge colorScheme={getStatusColor(testResults.overall)}>
                          {testResults.overall}
                        </Badge>
                      </HStack>
                    </CardHeader>
                    <CardBody>
                      <VStack spacing={4} align="stretch">
                        {testResults.tests?.map((test: any, index: number) => (
                          <Box key={index} p={4} border="1px" borderColor={borderColor} borderRadius="md">
                            <HStack justify="space-between" mb={2}>
                              <Text fontWeight="bold">{test.name}</Text>
                              <Badge colorScheme={getStatusColor(test.status)}>
                                {test.status}
                              </Badge>
                            </HStack>
                            <Text fontSize="sm" color="gray.600">
                              {JSON.stringify(test.details, null, 2)}
                            </Text>
                          </Box>
                        ))}
                        
                        {testResults.recommendations?.length > 0 && (
                          <Alert status="info">
                            <AlertIcon />
                            <Box>
                              <AlertTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</AlertTitle>
                              <AlertDescription>
                                <VStack align="start" spacing={1}>
                                  {testResults.recommendations.map((rec: string, index: number) => (
                                    <Text key={index}>‚Ä¢ {rec}</Text>
                                  ))}
                                </VStack>
                              </AlertDescription>
                            </Box>
                          </Alert>
                        )}
                      </VStack>
                    </CardBody>
                  </Card>
                )}
              </VStack>
            </TabPanel>

            {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
            <TabPanel>
              <Alert status="info">
                <AlertIcon />
                <Box>
                  <AlertTitle>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</AlertTitle>
                  <AlertDescription>
                    –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤,
                    –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
                  </AlertDescription>
                </Box>
              </Alert>
            </TabPanel>
          </TabPanels>
        </Tabs>
      </VStack>
    </Container>
  );
};

export default RealWBParsingPage;
