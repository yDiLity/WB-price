/**
 * üéØ –°–¢–†–ê–ù–ò–¶–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω
 */

import React, { useState, useEffect } from 'react';
import {
  Container,
  VStack,
  HStack,
  Heading,
  Text,
  Box,
  Card,
  CardHeader,
  CardBody,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  Badge,
  Button,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Progress,
  useColorModeValue,
  useToast,
  Icon,
  Tooltip,
  Flex,
  Divider
} from '@chakra-ui/react';
import {
  CheckCircleIcon,
  WarningIcon,
  TimeIcon,
  RepeatIcon,
  SettingsIcon,
  TriangleUpIcon,
  TriangleDownIcon,
  InfoIcon
} from '@chakra-ui/icons';
import { priceAutomationService } from '../services/priceAutomationService';
import { automationService } from '../services/automationService';

export default function AutoPriceRegulationPage() {
  const [monitoringStats, setMonitoringStats] = useState<any>(null);
  const [automationStatus, setAutomationStatus] = useState<any>(null);
  const [priceChangeHistory, setPriceChangeHistory] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const toast = useToast();

  // –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º—ã
  const cardBg = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const successColor = useColorModeValue('green.500', 'green.300');
  const warningColor = useColorModeValue('orange.500', 'orange.300');
  const errorColor = useColorModeValue('red.500', 'red.300');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    loadData();

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadData, 30000);
    return () => clearInterval(interval);
  }, []);

  const loadData = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      const stats = priceAutomationService.getMonitoringStats();
      setMonitoringStats(stats);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      const status = automationService.getMonitoringStatus();
      setAutomationStatus(status);

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
      const history = automationService.getPriceChangeHistory();
      setPriceChangeHistory(history.slice(-10)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ–Ω–µ–Ω–∏–π

      setIsLoading(false);
    } catch (error) {
      console.error('Error loading automation data:', error);
      setIsLoading(false);
    }
  };

  // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const runManualCheck = async () => {
    if (!monitoringStats || monitoringStats.totalProducts === 0) {
      toast({
        title: '–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ',
        description: '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    toast({
      title: '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω...',
      description: `–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è ${monitoringStats.totalProducts} —Ç–æ–≤–∞—Ä–æ–≤`,
      status: 'info',
      duration: 3000,
      isClosable: true,
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    for (const product of monitoringStats.products) {
      await priceAutomationService.checkProductPrice(product.productId);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadData();

    toast({
      title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      description: '–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      status: 'success',
      duration: 5000,
      isClosable: true,
    });
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'success': return successColor;
      case 'failed': return errorColor;
      case 'blocked': return warningColor;
      case 'pending': return 'blue.500';
      default: return 'gray.500';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return CheckCircleIcon;
      case 'failed': return WarningIcon;
      case 'blocked': return WarningIcon;
      case 'pending': return TimeIcon;
      default: return InfoIcon;
    }
  };

  if (isLoading) {
    return (
      <Container maxW="1400px" py={8}>
        <VStack spacing={8}>
          <Heading>–ó–∞–≥—Ä—É–∑–∫–∞...</Heading>
          <Progress size="lg" isIndeterminate w="100%" />
        </VStack>
      </Container>
    );
  }

  return (
    <Container maxW="1400px" py={8}>
      <VStack spacing={8} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box>
          <HStack justify="space-between" align="center" mb={4}>
            <HStack>
              <Icon as={RepeatIcon} color={successColor} boxSize={8} />
              <Heading size="lg">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω</Heading>
            </HStack>
            <Button
              leftIcon={<RepeatIcon />}
              onClick={runManualCheck}
              colorScheme="blue"
              isDisabled={!monitoringStats || monitoringStats.totalProducts === 0}
            >
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Ü–µ–Ω—ã
            </Button>
          </HStack>
          <Text color="gray.500">
            –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
          </Text>
        </Box>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardBody>
              <Stat>
                <StatLabel>–¢–æ–≤–∞—Ä–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ</StatLabel>
                <StatNumber>{monitoringStats?.totalProducts || 0}</StatNumber>
                <StatHelpText>
                  <Icon as={TriangleUpIcon} color={successColor} mr={1} />
                  –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardBody>
              <Stat>
                <StatLabel>–ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è</StatLabel>
                <StatNumber>{automationStatus?.checksToday || 0}</StatNumber>
                <StatHelpText>
                  <Icon as={RepeatIcon} color="blue.500" mr={1} />
                  –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardBody>
              <Stat>
                <StatLabel>–£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π</StatLabel>
                <StatNumber>{automationStatus?.successfulChangesToday || 0}</StatNumber>
                <StatHelpText>
                  <StatArrow type="increase" />
                  –ó–∞ —Å–µ–≥–æ–¥–Ω—è
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardBody>
              <Stat>
                <StatLabel>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</StatLabel>
                <StatNumber>{automationStatus?.uptime || 99.5}%</StatNumber>
                <StatHelpText>
                  <Icon as={CheckCircleIcon} color={successColor} mr={1} />
                  –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>
        </SimpleGrid>

        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
          <CardHeader>
            <Heading size="md">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</Heading>
          </CardHeader>
          <CardBody>
            <VStack spacing={4} align="stretch">
              <Alert status="success" borderRadius="md">
                <AlertIcon />
                <Box>
                  <AlertTitle>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</AlertTitle>
                  <AlertDescription>
                    24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {automationStatus?.nextCheck ? formatTime(automationStatus.nextCheck) : '—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç'}
                  </AlertDescription>
                </Box>
              </Alert>

              {monitoringStats?.totalProducts === 0 && (
                <Alert status="info" borderRadius="md">
                  <AlertIcon />
                  <Box>
                    <AlertTitle>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ</AlertTitle>
                    <AlertDescription>
                      –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
                    </AlertDescription>
                  </Box>
                </Alert>
              )}
            </VStack>
          </CardBody>
        </Card>

        {/* –¢–æ–≤–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ */}
        {monitoringStats?.products && monitoringStats.products.length > 0 && (
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardHeader>
              <Heading size="md">–¢–æ–≤–∞—Ä—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ</Heading>
            </CardHeader>
            <CardBody>
              <Table variant="simple">
                <Thead>
                  <Tr>
                    <Th>–ê—Ä—Ç–∏–∫—É–ª</Th>
                    <Th>–ù–∞–∑–≤–∞–Ω–∏–µ</Th>
                    <Th>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</Th>
                    <Th>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã</Th>
                    <Th>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</Th>
                    <Th>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {monitoringStats.products.map((product: any) => (
                    <Tr key={product.productId}>
                      <Td fontFamily="mono" fontWeight="bold">{product.sku}</Td>
                      <Td maxW="200px" isTruncated>{product.title}</Td>
                      <Td fontWeight="bold">{product.currentPrice.toLocaleString()} ‚ÇΩ</Td>
                      <Td>
                        <Badge colorScheme="blue">{product.competitorsCount}</Badge>
                      </Td>
                      <Td>
                        <Badge colorScheme="green">{product.strategyType}</Badge>
                      </Td>
                      <Td fontSize="sm">{formatTime(product.lastCheck)}</Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </CardBody>
          </Card>
        )}

        {/* –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω */}
        {priceChangeHistory.length > 0 && (
          <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
            <CardHeader>
              <Heading size="md">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω</Heading>
            </CardHeader>
            <CardBody>
              <Table variant="simple">
                <Thead>
                  <Tr>
                    <Th>–í—Ä–µ–º—è</Th>
                    <Th>–¢–æ–≤–∞—Ä</Th>
                    <Th>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞</Th>
                    <Th>–ù–æ–≤–∞—è —Ü–µ–Ω–∞</Th>
                    <Th>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</Th>
                    <Th>–°—Ç–∞—Ç—É—Å</Th>
                    <Th>–ü—Ä–∏—á–∏–Ω–∞</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {priceChangeHistory.map((change: any) => (
                    <Tr key={change.id}>
                      <Td fontSize="sm">{formatTime(change.attemptedAt)}</Td>
                      <Td fontFamily="mono">{change.productId}</Td>
                      <Td>{change.oldPrice.toLocaleString()} ‚ÇΩ</Td>
                      <Td fontWeight="bold">{change.newPrice.toLocaleString()} ‚ÇΩ</Td>
                      <Td>
                        <HStack>
                          <Icon
                            as={change.changePercent >= 0 ? TriangleUpIcon : TriangleDownIcon}
                            color={change.changePercent >= 0 ? errorColor : successColor}
                          />
                          <Text color={change.changePercent >= 0 ? errorColor : successColor}>
                            {change.changePercent.toFixed(1)}%
                          </Text>
                        </HStack>
                      </Td>
                      <Td>
                        <HStack>
                          <Icon as={getStatusIcon(change.status)} color={getStatusColor(change.status)} />
                          <Badge colorScheme={change.status === 'success' ? 'green' : change.status === 'failed' ? 'red' : 'orange'}>
                            {change.status}
                          </Badge>
                        </HStack>
                      </Td>
                      <Td maxW="200px" isTruncated>
                        <Tooltip label={change.reason}>
                          <Text>{change.reason}</Text>
                        </Tooltip>
                      </Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </CardBody>
          </Card>
        )}
      </VStack>
    </Container>
  );
}
