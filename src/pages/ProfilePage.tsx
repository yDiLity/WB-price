import {
  Box,
  Button,
  Container,
  Divider,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Stack,
  Switch,
  Text,
  useColorModeValue,
  useToast,
  VStack,
  HStack,
  Tabs,
  TabList,
  Tab,
  TabPanels,
  TabPanel,
  Select,
  Checkbox,
  CheckboxGroup,
  Card,
  CardBody,
  CardHeader,
  Avatar,
  Badge,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  Icon,
  Flex,
  Image,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { User, NotificationPreferences } from '../types/auth';
import {
  FaStore,
  FaBox,
  FaChartLine,
  FaRubleSign,
  FaCalendarAlt,
  FaEdit,
  FaSave,
  FaUser,
  FaCog,
  FaShoppingCart,
  FaTruck,
  FaPercentage,
  FaCheckCircle,
  FaExclamationTriangle,
  FaInfoCircle,
} from 'react-icons/fa';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
interface ShopProfile {
  id: string;
  name: string;
  email: string;
  marketplace: string;
  supplierId: string;
  workMethod: string;
  registrationDate: string;
  lastUpdate: string;
  totalProducts: number;
  activeProducts: number;
  productsOnSale: number;
  productsWithDiscount: number;
  brandsWithDiscount: number;
  productsOutOfStock: number;
  brandsOutOfStock: number;
  totalRevenue: number;
  monthlyRevenue: number;
  averageMargin: number;
  automationEnabled: boolean;
  apiConnected: boolean;
}

export default function ProfilePage() {
  const { user, updateUser } = useAuth();
  const toast = useToast();

  // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const warehouses = [
    { id: '1', name: '–•–æ—Ä—É–≥–≤–∏–Ω–æ', address: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –°–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω', region: '–ú–æ—Å–∫–≤–∞' },
    { id: '2', name: '–°–æ—Ñ—å–∏–Ω–æ', address: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–∞–º–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', region: '–ú–æ—Å–∫–≤–∞' },
    { id: '3', name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', address: '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ü—É—à–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
    { id: '4', name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', address: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', region: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
    { id: '5', name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', address: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', region: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
  ];

  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [apiKey, setApiKey] = useState('');
  const [notificationPreferences, setNotificationPreferences] = useState<NotificationPreferences>({
    email: true,
    push: true,
    telegram: false,
    telegramChatId: '',
    priorityWarehouses: [],
    priorityTimeSlots: []
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isEditing, setIsEditing] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞
  const [shopProfile, setShopProfile] = useState<ShopProfile>(() => {
    const hasApiKey = !!apiKey;
    return {
      id: 'shop_12345',
      name: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'yDiLity –û–û–û' : 'yDiLity –û–û–û',
      email: user?.email || 'shop@ydility.com',
      marketplace: 'Wildberries',
      supplierId: hasApiKey ? '123456789' : '000000000',
      workMethod: 'FBS',
      registrationDate: '15.03.2024',
      lastUpdate: hasApiKey ? '29.05.2025 12:51' : '–ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
      totalProducts: hasApiKey ? 4 : 0, // –í–∞—à–∏ 4 —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ 0
      activeProducts: hasApiKey ? 4 : 0,
      productsOnSale: hasApiKey ? 4 : 0,
      productsWithDiscount: hasApiKey ? 0 : 0,
      brandsWithDiscount: hasApiKey ? 0 : 0,
      productsOutOfStock: hasApiKey ? 0 : 0,
      brandsOutOfStock: hasApiKey ? 0 : 0,
      totalRevenue: hasApiKey ? 59680 : 0, // –°—É–º–º–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: 53400+5100+540+640
      monthlyRevenue: hasApiKey ? 185000 : 0,
      averageMargin: hasApiKey ? 23.5 : 0,
      automationEnabled: hasApiKey,
      apiConnected: hasApiKey,
    };
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞
  useEffect(() => {
    const hasApiKey = !!apiKey;
    setShopProfile(prev => ({
      ...prev,
      supplierId: hasApiKey ? '123456789' : '000000000',
      lastUpdate: hasApiKey ? '29.05.2025 12:51' : '–ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
      totalProducts: hasApiKey ? 4 : 0,
      activeProducts: hasApiKey ? 4 : 0,
      productsOnSale: hasApiKey ? 4 : 0,
      productsWithDiscount: hasApiKey ? 0 : 0,
      brandsWithDiscount: hasApiKey ? 0 : 0,
      productsOutOfStock: hasApiKey ? 0 : 0,
      brandsOutOfStock: hasApiKey ? 0 : 0,
      totalRevenue: hasApiKey ? 59680 : 0,
      monthlyRevenue: hasApiKey ? 185000 : 0,
      averageMargin: hasApiKey ? 23.5 : 0,
      automationEnabled: hasApiKey,
      apiConnected: hasApiKey,
    }));
  }, [apiKey]);

  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('blue.500', 'blue.300');
  const textColor = useColorModeValue('gray.600', 'gray.300');
  const cardBg = useColorModeValue('gray.50', 'gray.700');

  useEffect(() => {
    if (user) {
      setFirstName(user.firstName || '');
      setLastName(user.lastName || '');
      setApiKey(user.ozonApiCredentials?.apiKey || '');
      if (user.notificationPreferences) {
        setNotificationPreferences({
          email: user.notificationPreferences.email ?? true,
          push: user.notificationPreferences.push ?? true,
          telegram: user.notificationPreferences.telegram ?? false,
          telegramChatId: user.notificationPreferences.telegramChatId || '',
          priorityWarehouses: user.notificationPreferences.priorityWarehouses || [],
          priorityTimeSlots: user.notificationPreferences.priorityTimeSlots || []
        });
      }
    }
  }, [user]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      const updatedUser: Partial<User> = {
        firstName,
        lastName,
        ozonApiCredentials: {
          ...user?.ozonApiCredentials,
          apiKey,
          clientId: user?.ozonApiCredentials?.clientId || '',
          isValid: user?.ozonApiCredentials?.isValid || false
        },
        notificationPreferences
      };

      updateUser(updatedUser);

      toast({
        title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
        description: '–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleNotificationChange = (field: keyof NotificationPreferences, value: any) => {
    setNotificationPreferences(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleWarehouseChange = (selectedWarehouses: string[]) => {
    setNotificationPreferences(prev => ({
      ...prev,
      priorityWarehouses: selectedWarehouses
    }));
  };

  return (
    <Container maxW="7xl" py={8}>
      <VStack spacing={8} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Flex justify="space-between" align="center">
          <Heading size="xl" color={useColorModeValue('gray.800', 'white')}>
            üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </Heading>
          <HStack>
            {isEditing ? (
              <>
                <Button
                  colorScheme="green"
                  leftIcon={<Icon as={FaSave} />}
                  onClick={() => {
                    handleSubmit(new Event('submit') as any);
                    setIsEditing(false);
                  }}
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </Button>
                <Button variant="outline" onClick={() => setIsEditing(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </>
            ) : (
              <Button
                colorScheme="blue"
                leftIcon={<Icon as={FaEdit} />}
                onClick={() => setIsEditing(true)}
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
            )}
          </HStack>
        </Flex>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ */}
        <Card
          bg={bgColor}
          borderWidth="2px"
          borderColor={useColorModeValue('blue.500', 'blue.300')}
          className="profile-card"
        >
          <CardHeader>
            <HStack spacing={4}>
              <Box
                boxSize="80px"
                borderRadius="xl"
                bg="purple.500"
                display="flex"
                alignItems="center"
                justifyContent="center"
                color="white"
                fontSize="xl"
                fontWeight="bold"
              >
                WB
              </Box>
              <VStack align="start" spacing={1} flex="1">
                <Heading size="lg">
                  {shopProfile.name} ({shopProfile.workMethod})
                </Heading>
                <HStack spacing={4}>
                  <Text color={textColor}>
                    <strong>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</strong> {shopProfile.marketplace}
                  </Text>
                  <Text color={textColor}>
                    <strong>–ò–î –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞:</strong> {shopProfile.supplierId}
                  </Text>
                  <Text color={textColor}>
                    <strong>–ú–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã:</strong> {shopProfile.workMethod}
                  </Text>
                </HStack>
                <HStack spacing={2}>
                  <Badge colorScheme={shopProfile.apiConnected ? 'green' : 'red'}>
                    {shopProfile.apiConnected ? 'API –ø–æ–¥–∫–ª—é—á–µ–Ω' : 'API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                  </Badge>
                  <Badge colorScheme={shopProfile.automationEnabled ? 'blue' : 'gray'}>
                    {shopProfile.automationEnabled ? '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞' : '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞'}
                  </Badge>
                </HStack>
              </VStack>
            </HStack>
          </CardHeader>
        </Card>

        {/* –ü–∞—Å–ø–æ—Ä—Ç –∫–∞–±–∏–Ω–µ—Ç–∞ */}
        <Card
          bg={bgColor}
          borderWidth="2px"
          borderColor={useColorModeValue('blue.500', 'blue.300')}
          className="profile-card"
        >
          <CardHeader>
            <Heading size="md">üìä –ü–∞—Å–ø–æ—Ä—Ç –∫–∞–±–∏–Ω–µ—Ç–∞</Heading>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 2, md: 4 }} spacing={6}>
              <Stat>
                <StatLabel>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</StatLabel>
                <StatNumber color="blue.500">{shopProfile.totalProducts.toLocaleString()}</StatNumber>
                <StatHelpText>
                  <StatArrow type="increase" />
                  +12% –∑–∞ –º–µ—Å—è—Ü
                </StatHelpText>
              </Stat>

              <Stat>
                <StatLabel>–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞—Ö</StatLabel>
                <StatNumber color="orange.500">{shopProfile.productsOutOfStock.toLocaleString()}</StatNumber>
                <StatHelpText>
                  {((shopProfile.productsOutOfStock / shopProfile.totalProducts) * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞
                </StatHelpText>
              </Stat>

              <Stat>
                <StatLabel>–¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π/–Ω–∞—Ü–µ–Ω–∫–æ–π</StatLabel>
                <StatNumber color="purple.500">{shopProfile.productsWithDiscount.toLocaleString()}</StatNumber>
                <StatHelpText>
                  {shopProfile.brandsWithDiscount} –±—Ä–µ–Ω–¥–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π
                </StatHelpText>
              </Stat>

              <Stat>
                <StatLabel>–ë—Ä–µ–Ω–¥–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π/–Ω–∞—Ü–µ–Ω–∫–æ–π</StatLabel>
                <StatNumber color="green.500">{shopProfile.brandsWithDiscount}</StatNumber>
                <StatHelpText>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏</StatHelpText>
              </Stat>
            </SimpleGrid>

            <Divider my={6} />

            <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
              <Stat>
                <StatLabel>–¢–æ–≤–∞—Ä–æ–≤ —Å–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏</StatLabel>
                <StatNumber color="red.500">
                  {(shopProfile.totalProducts - shopProfile.productsOnSale).toLocaleString()}
                </StatNumber>
                <StatHelpText>–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</StatHelpText>
              </Stat>

              <Stat>
                <StatLabel>–ë—Ä–µ–Ω–¥–æ–≤ —Å–Ω—è—Ç–æ —Å –ø—Ä–æ–¥–∞–∂–∏</StatLabel>
                <StatNumber color="red.500">{shopProfile.brandsOutOfStock}</StatNumber>
                <StatHelpText>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏</StatHelpText>
              </Stat>

              <Stat>
                <StatLabel>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</StatLabel>
                <StatNumber fontSize="lg" color="gray.500">
                  {shopProfile.lastUpdate}
                </StatNumber>
                <StatHelpText>–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</StatHelpText>
              </Stat>
            </SimpleGrid>
          </CardBody>
        </Card>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ç–∞–±–∞—Ö */}
        <Tabs colorScheme="blue" isLazy>
          <TabList>
            <Tab>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Tab>
            <Tab>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Tab>
            <Tab>API Ozon</Tab>
            <Tab>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Tab>
          </TabList>

        <TabPanels>
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <TabPanel>
            <Box
              bg={bgColor}
              p={6}
              borderRadius="md"
              boxShadow="sm"
              borderWidth="2px"
              borderColor={useColorModeValue('blue.500', 'blue.300')}
              className="settings-card"
            >
              <form onSubmit={handleSubmit}>
                <VStack spacing={4} align="stretch">
                  <FormControl>
                    <FormLabel>Email</FormLabel>
                    <Input value={user?.email || ''} isReadOnly />
                  </FormControl>

                  <FormControl>
                    <FormLabel>–ò–º—è</FormLabel>
                    <Input
                      value={firstName}
                      onChange={(e) => setFirstName(e.target.value)}
                      placeholder="–í–∞—à–µ –∏–º—è"
                    />
                  </FormControl>

                  <FormControl>
                    <FormLabel>–§–∞–º–∏–ª–∏—è</FormLabel>
                    <Input
                      value={lastName}
                      onChange={(e) => setLastName(e.target.value)}
                      placeholder="–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è"
                    />
                  </FormControl>

                  <Button
                    colorScheme="blue"
                    type="submit"
                    isLoading={isSubmitting}
                    alignSelf="flex-start"
                    mt={4}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                  </Button>
                </VStack>
              </form>
            </Box>
          </TabPanel>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <TabPanel>
            <Box
              bg={bgColor}
              p={6}
              borderRadius="md"
              boxShadow="sm"
              borderWidth="2px"
              borderColor={useColorModeValue('blue.500', 'blue.300')}
              className="settings-card"
            >
              <form onSubmit={handleSubmit}>
                <VStack spacing={6} align="stretch">
                  <Heading size="md">–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Heading>

                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="email-notifications" mb="0">
                      Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </FormLabel>
                    <Switch
                      id="email-notifications"
                      isChecked={notificationPreferences.email}
                      onChange={(e) => handleNotificationChange('email', e.target.checked)}
                      colorScheme="blue"
                    />
                  </FormControl>

                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="push-notifications" mb="0">
                      Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </FormLabel>
                    <Switch
                      id="push-notifications"
                      isChecked={notificationPreferences.push}
                      onChange={(e) => handleNotificationChange('push', e.target.checked)}
                      colorScheme="blue"
                    />
                  </FormControl>

                  <FormControl display="flex" alignItems="center">
                    <FormLabel htmlFor="telegram-notifications" mb="0">
                      Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </FormLabel>
                    <Switch
                      id="telegram-notifications"
                      isChecked={notificationPreferences.telegram}
                      onChange={(e) => handleNotificationChange('telegram', e.target.checked)}
                      colorScheme="blue"
                    />
                  </FormControl>

                  {notificationPreferences.telegram && (
                    <FormControl>
                      <FormLabel>Telegram Chat ID</FormLabel>
                      <Input
                        value={notificationPreferences.telegramChatId}
                        onChange={(e) => handleNotificationChange('telegramChatId', e.target.value)}
                        placeholder="–í–∞—à Chat ID –≤ Telegram"
                      />
                      <Text fontSize="sm" color="gray.500" mt={1}>
                        –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å Chat ID, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot –≤ Telegram
                      </Text>
                    </FormControl>
                  )}

                  <Divider />

                  <Heading size="md">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–∫–ª–∞–¥—ã</Heading>
                  <Text fontSize="sm" color="gray.500">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
                  </Text>

                  <CheckboxGroup
                    colorScheme="blue"
                    value={notificationPreferences.priorityWarehouses}
                    onChange={handleWarehouseChange}
                  >
                    <Stack spacing={2}>
                      {warehouses.map(warehouse => (
                        <Checkbox key={warehouse.id} value={warehouse.id}>
                          {warehouse.name}
                        </Checkbox>
                      ))}
                    </Stack>
                  </CheckboxGroup>

                  <Button
                    colorScheme="blue"
                    type="submit"
                    isLoading={isSubmitting}
                    alignSelf="flex-start"
                    mt={4}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                  </Button>
                </VStack>
              </form>
            </Box>
          </TabPanel>

          {/* API Ozon */}
          <TabPanel>
            <Box
              bg={bgColor}
              p={6}
              borderRadius="md"
              boxShadow="sm"
              borderWidth="2px"
              borderColor={useColorModeValue('blue.500', 'blue.300')}
              className="settings-card"
            >
              <form onSubmit={handleSubmit}>
                <VStack spacing={4} align="stretch">
                  <Text>
                    –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API-–∫–ª—é—á Ozon.
                  </Text>

                  <FormControl>
                    <FormLabel>API-–∫–ª—é—á Ozon</FormLabel>
                    <Input
                      value={apiKey}
                      onChange={(e) => setApiKey(e.target.value)}
                      placeholder="–í–∞—à API-–∫–ª—é—á Ozon"
                      type="password"
                    />
                    <Text fontSize="sm" color="gray.500" mt={1}>
                      API-–∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Ozon –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API"
                    </Text>
                  </FormControl>

                  <Button
                    colorScheme="blue"
                    type="submit"
                    isLoading={isSubmitting}
                    alignSelf="flex-start"
                    mt={4}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å API-–∫–ª—é—á
                  </Button>
                </VStack>
              </form>
            </Box>
          </TabPanel>

          {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <TabPanel>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              <Card
                bg={bgColor}
                borderWidth="2px"
                borderColor={useColorModeValue('blue.500', 'blue.300')}
                className="profile-card"
              >
                <CardHeader>
                  <Heading size="md">üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <Stat>
                      <StatLabel>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</StatLabel>
                      <StatNumber color="green.500">
                        {shopProfile.totalRevenue.toLocaleString()} ‚ÇΩ
                      </StatNumber>
                      <StatHelpText>–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è</StatHelpText>
                    </Stat>

                    <Stat>
                      <StatLabel>–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü</StatLabel>
                      <StatNumber color="blue.500">
                        {shopProfile.monthlyRevenue.toLocaleString()} ‚ÇΩ
                      </StatNumber>
                      <StatHelpText>
                        <StatArrow type="increase" />
                        +8.2% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É
                      </StatHelpText>
                    </Stat>

                    <Stat>
                      <StatLabel>–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å</StatLabel>
                      <StatNumber color="purple.500">{shopProfile.averageMargin}%</StatNumber>
                      <StatHelpText>–ü–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º</StatHelpText>
                    </Stat>
                  </VStack>
                </CardBody>
              </Card>

              <Card
                bg={bgColor}
                borderWidth="2px"
                borderColor={useColorModeValue('blue.500', 'blue.300')}
                className="profile-card"
              >
                <CardHeader>
                  <Heading size="md">üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <Alert status={shopProfile.apiConnected ? 'success' : 'error'}>
                      <AlertIcon />
                      <Box>
                        <AlertTitle>API Ozon</AlertTitle>
                        <AlertDescription>
                          {shopProfile.apiConnected
                            ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ. –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
                            : '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.'
                          }
                        </AlertDescription>
                      </Box>
                    </Alert>

                    <Alert status="info">
                      <AlertIcon />
                      <Box>
                        <AlertTitle>–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</AlertTitle>
                        <AlertDescription>
                          24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
                        </AlertDescription>
                      </Box>
                    </Alert>

                    <Alert status="warning">
                      <AlertIcon />
                      <Box>
                        <AlertTitle>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</AlertTitle>
                        <AlertDescription>
                          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {shopProfile.productsWithDiscount} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏.
                        </AlertDescription>
                      </Box>
                    </Alert>
                  </VStack>
                </CardBody>
              </Card>
            </SimpleGrid>
          </TabPanel>
        </TabPanels>
      </Tabs>
      </VStack>
    </Container>
  );
}
