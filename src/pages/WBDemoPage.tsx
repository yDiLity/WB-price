import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Card,
  CardBody,
  CardHeader,
  Badge,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  useToast,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  useColorModeValue,
  Progress,
  Spinner,
  Code,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon
} from '@chakra-ui/react';
import { FaRocket, FaShieldAlt, FaRobot, FaChartLine, FaPlay, FaCheckCircle } from 'react-icons/fa';

interface DemoStep {
  id: string;
  title: string;
  description: string;
  endpoint: string;
  method: 'GET' | 'POST';
  payload?: any;
  completed: boolean;
  result?: any;
  loading: boolean;
}

const WBDemoPage: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [demoSteps, setDemoSteps] = useState<DemoStep[]>([
    {
      id: 'search',
      title: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries',
      endpoint: '/api/wb/search?q=iPhone&limit=5',
      method: 'GET',
      completed: false,
      loading: false
    },
    {
      id: 'product',
      title: 'üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ',
      endpoint: '/api/wb/product/432018439',
      method: 'GET',
      completed: false,
      loading: false
    },
    {
      id: 'competitors',
      title: 'üéØ –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      description: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
      endpoint: '/api/wb/competitors/432018439?limit=5',
      method: 'GET',
      completed: false,
      loading: false
    },
    {
      id: 'auto-pricing',
      title: 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã',
      endpoint: '/api/wb/auto-price-update',
      method: 'POST',
      payload: {
        productId: '432018439',
        strategy: 'follow_min',
        parameters: {
          minPrice: 80000,
          maxPrice: 120000
        }
      },
      completed: false,
      loading: false
    },
    {
      id: 'protection-test',
      title: 'üõ°Ô∏è –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫',
      endpoint: '/api/wb/test-protection',
      method: 'GET',
      completed: false,
      loading: false
    }
  ]);

  const [isRunningDemo, setIsRunningDemo] = useState(false);
  const [demoProgress, setDemoProgress] = useState(0);

  const toast = useToast();
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  const runSingleStep = async (stepIndex: number) => {
    const step = demoSteps[stepIndex];
    
    setDemoSteps(prev => prev.map((s, i) => 
      i === stepIndex ? { ...s, loading: true } : s
    ));

    try {
      let response;
      
      if (step.method === 'GET') {
        response = await fetch(step.endpoint);
      } else {
        response = await fetch(step.endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(step.payload)
        });
      }

      if (response.ok) {
        const result = await response.json();
        
        setDemoSteps(prev => prev.map((s, i) => 
          i === stepIndex ? { 
            ...s, 
            loading: false, 
            completed: true, 
            result: result 
          } : s
        ));

        toast({
          title: `${step.title} - –£—Å–ø–µ—à–Ω–æ`,
          description: '–®–∞–≥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });

      } else {
        throw new Error(`HTTP ${response.status}`);
      }
    } catch (error) {
      setDemoSteps(prev => prev.map((s, i) => 
        i === stepIndex ? { 
          ...s, 
          loading: false, 
          result: { error: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞' }
        } : s
      ));

      toast({
        title: `${step.title} - –û—à–∏–±–∫–∞`,
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const runFullDemo = async () => {
    setIsRunningDemo(true);
    setDemoProgress(0);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏
    setDemoSteps(prev => prev.map(step => ({
      ...step,
      completed: false,
      loading: false,
      result: undefined
    })));

    for (let i = 0; i < demoSteps.length; i++) {
      setCurrentStep(i);
      setDemoProgress((i / demoSteps.length) * 100);
      
      await runSingleStep(i);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      if (i < demoSteps.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    setDemoProgress(100);
    setIsRunningDemo(false);
    setCurrentStep(-1);

    toast({
      title: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
      description: '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã',
      status: 'success',
      duration: 5000,
      isClosable: true,
    });
  };

  const formatResult = (result: any) => {
    if (!result) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    if (result.error) return `–û—à–∏–±–∫–∞: ${result.error}`;
    
    return JSON.stringify(result, null, 2);
  };

  const getStepIcon = (step: DemoStep, index: number) => {
    if (step.loading) return <Spinner size="sm" />;
    if (step.completed) return <FaCheckCircle color="green" />;
    if (currentStep === index) return <FaPlay color="blue" />;
    return <Box w="16px" h="16px" bg="gray.300" borderRadius="50%" />;
  };

  return (
    <Container maxW="7xl" py={8}>
      <VStack spacing={8} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box textAlign="center">
          <Heading size="xl" mb={4}>
            üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries
          </Heading>
          <Text fontSize="lg" color="gray.600">
            –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          </Text>
        </Box>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <Card bg={bgColor} borderColor={borderColor}>
          <CardBody>
            <HStack justify="center" spacing={4}>
              <Button
                colorScheme="green"
                size="lg"
                leftIcon={<FaRocket />}
                onClick={runFullDemo}
                isLoading={isRunningDemo}
                loadingText="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è..."
              >
                üé¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
              </Button>
              
              <Button
                colorScheme="blue"
                variant="outline"
                onClick={() => window.open('/real-wb-parsing', '_blank')}
              >
                üåê –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
              </Button>
              
              <Button
                colorScheme="purple"
                variant="outline"
                onClick={() => window.open('/automation', '_blank')}
              >
                ü§ñ –û—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
              </Button>
            </HStack>

            {isRunningDemo && (
              <Box mt={4}>
                <Text mb={2} textAlign="center">
                  –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {Math.round(demoProgress)}%
                </Text>
                <Progress value={demoProgress} colorScheme="green" />
              </Box>
            )}
          </CardBody>
        </Card>

        {/* –®–∞–≥–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={6}>
          {demoSteps.map((step, index) => (
            <Card key={step.id} bg={bgColor} borderColor={borderColor}>
              <CardHeader>
                <HStack justify="space-between">
                  <HStack>
                    {getStepIcon(step, index)}
                    <Heading size="md">{step.title}</Heading>
                  </HStack>
                  <Button
                    size="sm"
                    colorScheme="blue"
                    variant="outline"
                    onClick={() => runSingleStep(index)}
                    isLoading={step.loading}
                    isDisabled={isRunningDemo}
                  >
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å
                  </Button>
                </HStack>
              </CardHeader>
              <CardBody>
                <VStack align="stretch" spacing={3}>
                  <Text fontSize="sm" color="gray.600">
                    {step.description}
                  </Text>
                  
                  <Box>
                    <Text fontSize="xs" fontWeight="bold" mb={1}>
                      Endpoint:
                    </Text>
                    <Code fontSize="xs" p={2} borderRadius="md" w="100%">
                      {step.method} {step.endpoint}
                    </Code>
                  </Box>

                  {step.payload && (
                    <Box>
                      <Text fontSize="xs" fontWeight="bold" mb={1}>
                        Payload:
                      </Text>
                      <Code fontSize="xs" p={2} borderRadius="md" w="100%">
                        {JSON.stringify(step.payload, null, 2)}
                      </Code>
                    </Box>
                  )}

                  {step.result && (
                    <Accordion allowToggle>
                      <AccordionItem>
                        <AccordionButton>
                          <Box flex="1" textAlign="left">
                            <Text fontSize="xs" fontWeight="bold">
                              –†–µ–∑—É–ª—å—Ç–∞—Ç {step.completed ? '‚úÖ' : '‚ùå'}
                            </Text>
                          </Box>
                          <AccordionIcon />
                        </AccordionButton>
                        <AccordionPanel pb={4}>
                          <Code 
                            fontSize="xs" 
                            p={2} 
                            borderRadius="md" 
                            w="100%" 
                            maxH="200px" 
                            overflowY="auto"
                            whiteSpace="pre-wrap"
                          >
                            {formatResult(step.result).substring(0, 1000)}
                            {formatResult(step.result).length > 1000 && '...'}
                          </Code>
                        </AccordionPanel>
                      </AccordionItem>
                    </Accordion>
                  )}
                </VStack>
              </CardBody>
            </Card>
          ))}
        </SimpleGrid>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <Card bg={bgColor} borderColor={borderColor}>
          <CardHeader>
            <Heading size="md">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏</Heading>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
              <Stat>
                <StatLabel>–í—Å–µ–≥–æ —à–∞–≥–æ–≤</StatLabel>
                <StatNumber>{demoSteps.length}</StatNumber>
              </Stat>
              <Stat>
                <StatLabel>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</StatLabel>
                <StatNumber color="green.500">
                  {demoSteps.filter(s => s.completed).length}
                </StatNumber>
              </Stat>
              <Stat>
                <StatLabel>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</StatLabel>
                <StatNumber color="blue.500">
                  {demoSteps.filter(s => s.loading).length}
                </StatNumber>
              </Stat>
              <Stat>
                <StatLabel>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</StatLabel>
                <StatNumber color="green.500">
                  {demoSteps.length > 0 
                    ? Math.round((demoSteps.filter(s => s.completed).length / demoSteps.length) * 100)
                    : 0}%
                </StatNumber>
              </Stat>
            </SimpleGrid>
          </CardBody>
        </Card>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö */}
        <Alert status="info">
          <AlertIcon />
          <Box>
            <AlertTitle>üéØ –ß—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞:</AlertTitle>
            <AlertDescription>
              <VStack align="start" spacing={1} mt={2}>
                <Text>‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries –±–µ–∑ mock –¥–∞–Ω–Ω—ã—Ö</Text>
                <Text>‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏</Text>
                <Text>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</Text>
                <Text>‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</Text>
                <Text>‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞</Text>
              </VStack>
            </AlertDescription>
          </Box>
        </Alert>
      </VStack>
    </Container>
  );
};

export default WBDemoPage;
