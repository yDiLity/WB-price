import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  VStack,
  HStack,
  FormControl,
  FormLabel,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Switch,
  Input,
  Button,
  Text,
  Alert,
  AlertIcon,
  Badge,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  SimpleGrid,
  useColorModeValue,
  useToast,
  Textarea,
  Divider
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { securityService } from '../../services/securityService';

export default function SecuritySettings() {
  const [config, setConfig] = useState({
    maxRequestsPerMinute: 100,
    minDelayBetweenRequests: 5000,
    maxDelayBetweenRequests: 15000,
    enableProxyRotation: true,
    enableUserAgentRotation: true,
    enableCaching: true,
    cacheExpirationTime: 3600000,
    telegramBotToken: '',
    telegramChatId: ''
  });

  const [proxyList, setProxyList] = useState('');
  const [stats, setStats] = useState(securityService.getSecurityStats());
  const toast = useToast();

  const cardBg = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      setStats(securityService.getSecurityStats());
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const handleConfigUpdate = () => {
    securityService.updateConfig(config);
    toast({
      title: '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      status: 'success',
      duration: 3000,
      isClosable: true
    });
  };

  const handleProxyAdd = () => {
    const proxies = proxyList.split('\n').filter(line => line.trim());
    let addedCount = 0;

    proxies.forEach(proxyLine => {
      try {
        // –§–æ—Ä–º–∞—Ç: host:port:username:password –∏–ª–∏ host:port
        const parts = proxyLine.trim().split(':');
        if (parts.length >= 2) {
          securityService.addProxy({
            host: parts[0],
            port: parseInt(parts[1]),
            username: parts[2] || undefined,
            password: parts[3] || undefined,
            type: 'http'
          });
          addedCount++;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:', error);
      }
    });

    if (addedCount > 0) {
      toast({
        title: `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –ø—Ä–æ–∫—Å–∏`,
        status: 'success',
        duration: 3000,
        isClosable: true
      });
      setProxyList('');
      setStats(securityService.getSecurityStats());
    }
  };

  const handleClearCache = () => {
    securityService.clearCache();
    setStats(securityService.getSecurityStats());
    toast({
      title: 'üßπ –ö–µ—à –æ—á–∏—â–µ–Ω',
      status: 'info',
      duration: 3000,
      isClosable: true
    });
  };

  const testTelegramBot = async () => {
    if (!config.telegramBotToken || !config.telegramChatId) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Chat ID',
        status: 'error',
        duration: 3000,
        isClosable: true
      });
      return;
    }

    try {
      const url = `https://api.telegram.org/bot${config.telegramBotToken}/sendMessage`;
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: config.telegramChatId,
          text: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WB Price Optimizer Pro'
        })
      });

      if (response.ok) {
        toast({
          title: '‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç',
          description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          status: 'success',
          duration: 3000,
          isClosable: true
        });
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      }
    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞',
        description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ Chat ID',
        status: 'error',
        duration: 3000,
        isClosable: true
      });
    }
  };

  return (
    <VStack spacing={6} align="stretch">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</Heading>
        </CardHeader>
        <CardBody>
          <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
            <Stat className="purple-stat-border" p={3} borderRadius="md">
              <StatLabel>–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É</StatLabel>
              <StatNumber color="blue.500">{stats.requestCount}</StatNumber>
              <StatHelpText>–∏–∑ {stats.config.maxRequestsPerMinute}</StatHelpText>
            </Stat>

            <Stat className="purple-stat-border" p={3} borderRadius="md">
              <StatLabel>–†–∞–∑–º–µ—Ä –∫–µ—à–∞</StatLabel>
              <StatNumber color="green.500">{stats.cacheSize}</StatNumber>
              <StatHelpText>–∑–∞–ø–∏—Å–µ–π</StatHelpText>
            </Stat>

            <Stat className="purple-stat-border" p={3} borderRadius="md">
              <StatLabel>–ü—Ä–æ–∫—Å–∏</StatLabel>
              <StatNumber color="purple.500">{stats.proxiesCount}</StatNumber>
              <StatHelpText>–∞–∫—Ç–∏–≤–Ω—ã—Ö</StatHelpText>
            </Stat>

            <Stat className="purple-stat-border" p={3} borderRadius="md">
              <StatLabel>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏</StatLabel>
              <StatNumber color="orange.500">#{stats.currentProxy + 1}</StatNumber>
              <StatHelpText>–≤ —Ä–æ—Ç–∞—Ü–∏–∏</StatHelpText>
            </Stat>
          </SimpleGrid>
        </CardBody>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
              <FormControl>
                <FormLabel>–ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É</FormLabel>
                <NumberInput
                  value={config.maxRequestsPerMinute}
                  onChange={(_, value) => setConfig({...config, maxRequestsPerMinute: value})}
                  min={1}
                  max={1000}
                  className="purple-form-border"
                >
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>

              <FormControl>
                <FormLabel>–í—Ä–µ–º—è –∫–µ—à–∞ (–º—Å)</FormLabel>
                <NumberInput
                  value={config.cacheExpirationTime}
                  onChange={(_, value) => setConfig({...config, cacheExpirationTime: value})}
                  min={60000}
                  max={86400000}
                  className="purple-form-border"
                >
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>

              <FormControl>
                <FormLabel>–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)</FormLabel>
                <NumberInput
                  value={config.minDelayBetweenRequests}
                  onChange={(_, value) => setConfig({...config, minDelayBetweenRequests: value})}
                  min={1000}
                  max={30000}
                  className="purple-form-border"
                >
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>

              <FormControl>
                <FormLabel>–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ (–º—Å)</FormLabel>
                <NumberInput
                  value={config.maxDelayBetweenRequests}
                  onChange={(_, value) => setConfig({...config, maxDelayBetweenRequests: value})}
                  min={5000}
                  max={60000}
                  className="purple-form-border"
                >
                  <NumberInputField />
                  <NumberInputStepper>
                    <NumberIncrementStepper />
                    <NumberDecrementStepper />
                  </NumberInputStepper>
                </NumberInput>
              </FormControl>
            </SimpleGrid>

            <Divider />

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ */}
            <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
              <FormControl display="flex" alignItems="center">
                <FormLabel mb="0">–†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏</FormLabel>
                <Switch
                  isChecked={config.enableProxyRotation}
                  onChange={(e) => setConfig({...config, enableProxyRotation: e.target.checked})}
                  colorScheme="purple"
                />
              </FormControl>

              <FormControl display="flex" alignItems="center">
                <FormLabel mb="0">–†–æ—Ç–∞—Ü–∏—è User-Agent</FormLabel>
                <Switch
                  isChecked={config.enableUserAgentRotation}
                  onChange={(e) => setConfig({...config, enableUserAgentRotation: e.target.checked})}
                  colorScheme="purple"
                />
              </FormControl>

              <FormControl display="flex" alignItems="center">
                <FormLabel mb="0">–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ</FormLabel>
                <Switch
                  isChecked={config.enableCaching}
                  onChange={(e) => setConfig({...config, enableCaching: e.target.checked})}
                  colorScheme="purple"
                />
              </FormControl>
            </SimpleGrid>

            <HStack spacing={4}>
              <Button
                colorScheme="purple"
                onClick={handleConfigUpdate}
                className="purple-button-border"
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
              <Button
                variant="outline"
                onClick={handleClearCache}
                className="purple-button-border"
              >
                üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
              </Button>
            </HStack>
          </VStack>
        </CardBody>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Telegram</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            <FormControl>
              <FormLabel>–¢–æ–∫–µ–Ω –±–æ—Ç–∞</FormLabel>
              <Input
                type="password"
                placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
                value={config.telegramBotToken}
                onChange={(e) => setConfig({...config, telegramBotToken: e.target.value})}
                className="purple-form-border"
              />
            </FormControl>

            <FormControl>
              <FormLabel>Chat ID</FormLabel>
              <Input
                placeholder="-1001234567890"
                value={config.telegramChatId}
                onChange={(e) => setConfig({...config, telegramChatId: e.target.value})}
                className="purple-form-border"
              />
            </FormControl>

            <HStack spacing={4}>
              <Button
                colorScheme="blue"
                onClick={testTelegramBot}
                className="purple-button-border"
              >
                üß™ –¢–µ—Å—Ç –±–æ—Ç–∞
              </Button>
              <Text fontSize="sm" color="gray.600">
                –û—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
              </Text>
            </HStack>
          </VStack>
        </CardBody>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            <FormControl>
              <FormLabel>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)</FormLabel>
              <Textarea
                placeholder={`host1:port1:username1:password1
host2:port2:username2:password2
host3:port3`}
                value={proxyList}
                onChange={(e) => setProxyList(e.target.value)}
                rows={5}
                className="purple-form-border"
              />
            </FormControl>

            <Alert status="info" className="purple-alert-border">
              <AlertIcon />
              <Box>
                <Text fontSize="sm">
                  –§–æ—Ä–º–∞—Ç: host:port:username:password –∏–ª–∏ host:port (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                </Text>
              </Box>
            </Alert>

            <Button
              colorScheme="green"
              onClick={handleProxyAdd}
              isDisabled={!proxyList.trim()}
              className="purple-button-border"
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏
            </Button>
          </VStack>
        </CardBody>
      </Card>
    </VStack>
  );
}
