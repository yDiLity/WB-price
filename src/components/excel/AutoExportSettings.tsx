import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Switch,
  Select,
  VStack,
  HStack,
  Text,
  Alert,
  AlertIcon,
  Badge,
  useToast,
  Card,
  CardHeader,
  CardBody,
  Heading,
  Divider
} from '@chakra-ui/react';
import { FiDownload, FiClock, FiSettings } from 'react-icons/fi';

interface AutoExportSettingsProps {
  onExportNow?: () => void;
}

export const AutoExportSettings: React.FC<AutoExportSettingsProps> = ({ onExportNow }) => {
  const [isAutoExportEnabled, setIsAutoExportEnabled] = useState(false);
  const [exportInterval, setExportInterval] = useState(30); // –º–∏–Ω—É—Ç—ã
  const [lastExportTime, setLastExportTime] = useState<Date | null>(null);
  const [nextExportTime, setNextExportTime] = useState<Date | null>(null);
  const [stopAutoExport, setStopAutoExport] = useState<(() => void) | null>(null);
  const toast = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('autoExportSettings');
    if (savedSettings) {
      try {
        const settings = JSON.parse(savedSettings);
        setIsAutoExportEnabled(settings.enabled || false);
        setExportInterval(settings.interval || 30);
        if (settings.lastExportTime) {
          setLastExportTime(new Date(settings.lastExportTime));
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
  const saveSettings = (enabled: boolean, interval: number) => {
    const settings = {
      enabled,
      interval,
      lastExportTime: lastExportTime?.toISOString()
    };
    localStorage.setItem('autoExportSettings', JSON.stringify(settings));
  };

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const startAutoExport = async () => {
    try {
      const { excelService } = await import('../../services/excelService');
      
      const dataProvider = () => {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
        return {
          products: [],
          competitors: [],
          priceChanges: []
        };
      };

      const stopFunction = excelService.scheduleAutoExport(dataProvider, exportInterval);
      setStopAutoExport(() => stopFunction);

      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
      const nextTime = new Date();
      nextTime.setMinutes(nextTime.getMinutes() + exportInterval);
      setNextExportTime(nextTime);

      toast({
        title: 'ü§ñ –ê–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω',
        description: `Excel —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ ${exportInterval} –º–∏–Ω—É—Ç`,
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const stopAutoExportFunction = () => {
    if (stopAutoExport) {
      stopAutoExport();
      setStopAutoExport(null);
      setNextExportTime(null);
      
      toast({
        title: '‚èπÔ∏è –ê–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
        status: 'info',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç–∞
  const handleAutoExportToggle = (enabled: boolean) => {
    setIsAutoExportEnabled(enabled);
    saveSettings(enabled, exportInterval);

    if (enabled) {
      startAutoExport();
    } else {
      stopAutoExportFunction();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  const handleIntervalChange = (newInterval: number) => {
    setExportInterval(newInterval);
    saveSettings(isAutoExportEnabled, newInterval);

    // –ï—Å–ª–∏ –∞–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    if (isAutoExportEnabled) {
      stopAutoExportFunction();
      setTimeout(() => startAutoExport(), 100);
    }
  };

  // –†—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç
  const handleManualExport = () => {
    if (onExportNow) {
      onExportNow();
      setLastExportTime(new Date());
      saveSettings(isAutoExportEnabled, exportInterval);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (date: Date | null) => {
    if (!date) return '–ù–∏–∫–æ–≥–¥–∞';
    return date.toLocaleString('ru-RU');
  };

  // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
  const getTimeUntilNext = () => {
    if (!nextExportTime) return null;
    const now = new Date();
    const diff = nextExportTime.getTime() - now.getTime();
    if (diff <= 0) return '–°–∫–æ—Ä–æ';
    
    const minutes = Math.floor(diff / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
    return `${minutes}–º ${seconds}—Å`;
  };

  return (
    <Card>
      <CardHeader>
        <HStack>
          <FiSettings />
          <Heading size="md">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞</Heading>
        </HStack>
      </CardHeader>
      <CardBody>
        <VStack spacing={6} align="stretch">
          {/* –†—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç */}
          <Box>
            <FormLabel fontWeight="semibold">üìä –†—É—á–Ω–æ–π —ç–∫—Å–ø–æ—Ä—Ç</FormLabel>
            <HStack>
              <Button
                leftIcon={<FiDownload />}
                colorScheme="blue"
                onClick={handleManualExport}
                size="sm"
              >
                –°–∫–∞—á–∞—Ç—å Excel —Å–µ–π—á–∞—Å
              </Button>
              <Text fontSize="sm" color="gray.500">
                –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç: {formatTime(lastExportTime)}
              </Text>
            </HStack>
          </Box>

          <Divider />

          {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç */}
          <Box>
            <FormControl display="flex" alignItems="center" mb={4}>
              <FormLabel htmlFor="auto-export" mb="0" fontWeight="semibold">
                ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç
              </FormLabel>
              <Switch
                id="auto-export"
                isChecked={isAutoExportEnabled}
                onChange={(e) => handleAutoExportToggle(e.target.checked)}
                colorScheme="green"
              />
            </FormControl>

            {isAutoExportEnabled && (
              <VStack spacing={4} align="stretch">
                <FormControl>
                  <FormLabel fontSize="sm">‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∞</FormLabel>
                  <Select
                    value={exportInterval}
                    onChange={(e) => handleIntervalChange(Number(e.target.value))}
                    size="sm"
                  >
                    <option value={15}>–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</option>
                    <option value={30}>–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</option>
                    <option value={60}>–ö–∞–∂–¥—ã–π —á–∞—Å</option>
                    <option value={120}>–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞</option>
                    <option value={360}>–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤</option>
                    <option value={720}>–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤</option>
                    <option value={1440}>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å</option>
                  </Select>
                </FormControl>

                <Alert status="info" size="sm">
                  <AlertIcon />
                  <VStack align="start" spacing={1}>
                    <Text fontSize="sm">
                      <strong>–°—Ç–∞—Ç—É—Å:</strong> {isAutoExportEnabled ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                    </Text>
                    {nextExportTime && (
                      <>
                        <Text fontSize="sm">
                          <strong>–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–æ—Ä—Ç:</strong> {formatTime(nextExportTime)}
                        </Text>
                        <Text fontSize="sm">
                          <strong>–û—Å—Ç–∞–ª–æ—Å—å:</strong> <Badge colorScheme="green">{getTimeUntilNext()}</Badge>
                        </Text>
                      </>
                    )}
                  </VStack>
                </Alert>
              </VStack>
            )}
          </Box>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Alert status="warning" size="sm">
            <AlertIcon />
            <Text fontSize="sm">
              <strong>–í–∞–∂–Ω–æ:</strong> Excel —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å—Å—è –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫. 
              –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±—Ä–∞—É–∑–µ—Ä–∞ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤.
            </Text>
          </Alert>
        </VStack>
      </CardBody>
    </Card>
  );
};
