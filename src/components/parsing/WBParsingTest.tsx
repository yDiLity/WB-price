import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Input,
  FormControl,
  FormLabel,
  Select,
  Badge,
  Progress,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  useColorModeValue,
  useToast,
  SimpleGrid,
  Image,
  Tooltip,
  Flex,
  Divider,
  Spinner
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { FaSearch, FaShoppingCart, FaStar, FaEye, FaDownload, FaShieldAlt, FaRobot } from 'react-icons/fa';
import { wbParsingService, WBProduct, WBSearchParams } from '../../services/wbParsingService';
import { antiBanService } from '../../services/antiBanService';

export default function WBParsingTest() {
  const [searchQuery, setSearchQuery] = useState('iPhone 15');
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<WBProduct[]>([]);
  const [searchStats, setSearchStats] = useState<any>(null);
  const [selectedProduct, setSelectedProduct] = useState<WBProduct | null>(null);
  const [isLoadingDetails, setIsLoadingDetails] = useState(false);
  const [antiBanStats, setAntiBanStats] = useState<any>(null);
  const [isTestingAntiBan, setIsTestingAntiBan] = useState(false);

  const cardBg = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const toast = useToast();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã
  useEffect(() => {
    const loadAntiBanStats = () => {
      const stats = antiBanService.getStats();
      setAntiBanStats(stats);
    };

    loadAntiBanStats();
    const interval = setInterval(loadAntiBanStats, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval);
  }, []);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
        status: 'error',
        duration: 3000,
        isClosable: true
      });
      return;
    }

    setIsLoading(true);
    setResults([]);
    setSearchStats(null);

    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ WB...');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      toast({
        title: 'üï∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...',
        status: 'info',
        duration: 3000,
        isClosable: true
      });

      const searchParams: WBSearchParams = {
        query: searchQuery,
        limit: 20,
        sort: 'popular'
      };

      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', searchParams);

      const startTime = Date.now();
      const result = await wbParsingService.searchProducts(searchParams);
      const endTime = Date.now();

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result);

      if (result.success) {
        setResults(result.products);
        setSearchStats({
          totalFound: result.totalFound,
          searchTime: endTime - startTime,
          currentPage: result.currentPage,
          totalPages: result.totalPages
        });

        toast({
          title: '‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!',
          description: `–ù–∞–π–¥–µ–Ω–æ ${result.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${endTime - startTime}ms. –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`,
          status: 'success',
          duration: 5000,
          isClosable: true
        });
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
        description: `${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã.`,
        status: 'error',
        duration: 7000,
        isClosable: true
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetDetails = async (productId: string) => {
    setIsLoadingDetails(true);

    try {
      const product = await wbParsingService.getProductDetails(productId);

      if (product) {
        setSelectedProduct(product);
        toast({
          title: '‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã',
          description: `–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ: ${product.name}`,
          status: 'success',
          duration: 3000,
          isClosable: true
        });
      } else {
        throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞',
        status: 'error',
        duration: 3000,
        isClosable: true
      });
    } finally {
      setIsLoadingDetails(false);
    }
  };

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã
  const handleTestAntiBan = async () => {
    setIsTestingAntiBan(true);

    try {
      toast({
        title: 'üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã',
        description: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...',
        status: 'info',
        duration: 3000,
        isClosable: true
      });

      console.log('üõ°Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã...');

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      antiBanService.forceRotation();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const newStats = antiBanService.getStats();
      setAntiBanStats(newStats);

      toast({
        title: '‚úÖ –ê–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        description: 'Fingerprint –∏ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.',
        status: 'success',
        duration: 5000,
        isClosable: true
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã:', error);
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—É',
        status: 'error',
        duration: 5000,
        isClosable: true
      });
    } finally {
      setIsTestingAntiBan(false);
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(price);
  };

  const getStockBadge = (inStock: boolean) => {
    return (
      <Badge colorScheme={inStock ? 'green' : 'red'} size="sm">
        {inStock ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}
      </Badge>
    );
  };

  return (
    <VStack spacing={6} align="stretch">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="lg" color="purple.600">
            üï∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries
          </Heading>
          <Text fontSize="sm" color="gray.600" mt={2}>
            –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
          </Text>
        </CardHeader>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã */}
      {antiBanStats && (
        <Card className="purple-card-border" bg={cardBg}>
          <CardHeader>
            <HStack justify="space-between">
              <Heading size="md">üõ°Ô∏è –°—Ç–∞—Ç—É—Å –∞–Ω—Ç–∏–±–∞–Ω —Å–∏—Å—Ç–µ–º—ã</Heading>
              <Button
                size="sm"
                colorScheme="purple"
                leftIcon={<FaRobot />}
                onClick={handleTestAntiBan}
                isLoading={isTestingAntiBan}
                loadingText="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
                className="purple-button-border"
              >
                –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
              </Button>
            </HStack>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
              <VStack>
                <Text fontSize="lg" fontWeight="bold" color="green.500">
                  {antiBanStats.proxyPoolSize}
                </Text>
                <Text fontSize="sm" color="gray.600">–ü—Ä–æ–∫—Å–∏ –≤ –ø—É–ª–µ</Text>
              </VStack>
              <VStack>
                <Text fontSize="lg" fontWeight="bold" color="blue.500">
                  {antiBanStats.requestCount}
                </Text>
                <Text fontSize="sm" color="gray.600">–ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</Text>
              </VStack>
              <VStack>
                <Text fontSize="lg" fontWeight="bold" color="orange.500">
                  {antiBanStats.bannedProxies}
                </Text>
                <Text fontSize="sm" color="gray.600">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏</Text>
              </VStack>
              <VStack>
                <Badge colorScheme={antiBanStats.isRecovering ? 'yellow' : 'green'} size="lg" p={2}>
                  {antiBanStats.isRecovering ? 'üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ' : '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞'}
                </Badge>
                <Text fontSize="sm" color="gray.600">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</Text>
              </VStack>
            </SimpleGrid>
          </CardBody>
        </Card>
      )}

      {/* –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            <FormControl>
              <FormLabel>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</FormLabel>
              <HStack>
                <Input
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                />
                <Button
                  colorScheme="blue"
                  leftIcon={<FaSearch />}
                  onClick={handleSearch}
                  isLoading={isLoading}
                  loadingText="–ü–æ–∏—Å–∫..."
                  className="purple-button-border"
                >
                  –ù–∞–π—Ç–∏
                </Button>
              </HStack>
            </FormControl>

            {isLoading && (
              <Alert status="info" className="purple-alert-border">
                <AlertIcon />
                <VStack align="start" spacing={2}>
                  <AlertTitle>üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...</AlertTitle>
                  <AlertDescription>
                    –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries
                  </AlertDescription>
                  <Progress size="sm" isIndeterminate colorScheme="blue" width="100%" />
                </VStack>
              </Alert>
            )}
          </VStack>
        </CardBody>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ */}
      {searchStats && (
        <Card className="purple-card-border" bg={cardBg}>
          <CardBody>
            <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
              <VStack>
                <Text fontSize="2xl" fontWeight="bold" color="blue.500">
                  {searchStats.totalFound}
                </Text>
                <Text fontSize="sm" color="gray.600">–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤</Text>
              </VStack>
              <VStack>
                <Text fontSize="2xl" fontWeight="bold" color="green.500">
                  {searchStats.searchTime}ms
                </Text>
                <Text fontSize="sm" color="gray.600">–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞</Text>
              </VStack>
              <VStack>
                <Text fontSize="2xl" fontWeight="bold" color="purple.500">
                  {searchStats.currentPage}
                </Text>
                <Text fontSize="sm" color="gray.600">–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</Text>
              </VStack>
              <VStack>
                <Text fontSize="2xl" fontWeight="bold" color="orange.500">
                  {results.length}
                </Text>
                <Text fontSize="sm" color="gray.600">–ó–∞–≥—Ä—É–∂–µ–Ω–æ</Text>
              </VStack>
            </SimpleGrid>
          </CardBody>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
      {results.length > 0 && (
        <Card className="purple-card-border" bg={cardBg}>
          <CardHeader>
            <Heading size="md">üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</Heading>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={4}>
              {results.map((product, index) => (
                <Card
                  key={product.id}
                  className="purple-card-border"
                  _hover={{ transform: 'translateY(-2px)', boxShadow: 'lg' }}
                  transition="all 0.2s"
                  cursor="pointer"
                  onClick={() => handleGetDetails(product.id)}
                >
                  <CardBody p={4}>
                    <VStack spacing={3} align="stretch">
                      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                      {product.images[0] && (
                        <Image
                          src={product.images[0]}
                          alt={product.name}
                          height="150px"
                          objectFit="cover"
                          borderRadius="md"
                          fallback={
                            <Flex
                              height="150px"
                              align="center"
                              justify="center"
                              bg="gray.100"
                              borderRadius="md"
                            >
                              <Text color="gray.500">–ù–µ—Ç —Ñ–æ—Ç–æ</Text>
                            </Flex>
                          }
                        />
                      )}

                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                      <VStack spacing={2} align="stretch">
                        <Text
                          fontSize="sm"
                          fontWeight="bold"
                          noOfLines={2}
                          title={product.name}
                        >
                          {product.name}
                        </Text>

                        <HStack justify="space-between">
                          <VStack spacing={0} align="start">
                            <Text fontSize="lg" fontWeight="bold" color="green.500">
                              {formatPrice(product.price)}
                            </Text>
                            {product.oldPrice && (
                              <Text fontSize="sm" as="s" color="gray.500">
                                {formatPrice(product.oldPrice)}
                              </Text>
                            )}
                          </VStack>
                          <Badge colorScheme="blue" size="sm">
                            #{index + 1}
                          </Badge>
                        </HStack>

                        <HStack justify="space-between" fontSize="sm">
                          <HStack>
                            <FaStar color="orange" />
                            <Text>{product.rating.toFixed(1)}</Text>
                            <Text color="gray.500">({product.reviewCount})</Text>
                          </HStack>
                          {getStockBadge(product.inStock)}
                        </HStack>

                        <Text fontSize="xs" color="gray.600" noOfLines={1}>
                          {product.seller}
                        </Text>

                        <Button
                          size="sm"
                          colorScheme="purple"
                          leftIcon={<FaEye />}
                          isLoading={isLoadingDetails}
                          className="purple-button-border"
                        >
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </Button>
                      </VStack>
                    </VStack>
                  </CardBody>
                </Card>
              ))}
            </SimpleGrid>
          </CardBody>
        </Card>
      )}

      {/* –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ */}
      {selectedProduct && (
        <Card className="purple-card-border" bg={cardBg}>
          <CardHeader>
            <Heading size="md">üîç –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞</Heading>
          </CardHeader>
          <CardBody>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              <VStack spacing={4}>
                {selectedProduct.images[0] && (
                  <Image
                    src={selectedProduct.images[0]}
                    alt={selectedProduct.name}
                    maxHeight="300px"
                    objectFit="cover"
                    borderRadius="md"
                  />
                )}

                {selectedProduct.images.length > 1 && (
                  <HStack spacing={2} overflowX="auto" width="100%">
                    {selectedProduct.images.slice(1, 5).map((image, index) => (
                      <Image
                        key={index}
                        src={image}
                        alt={`${selectedProduct.name} ${index + 2}`}
                        height="60px"
                        width="60px"
                        objectFit="cover"
                        borderRadius="md"
                        cursor="pointer"
                      />
                    ))}
                  </HStack>
                )}
              </VStack>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <VStack spacing={4} align="stretch">
                <Heading size="md">{selectedProduct.name}</Heading>

                <HStack justify="space-between">
                  <VStack align="start" spacing={1}>
                    <Text fontSize="2xl" fontWeight="bold" color="green.500">
                      {formatPrice(selectedProduct.price)}
                    </Text>
                    {selectedProduct.oldPrice && (
                      <Text fontSize="lg" as="s" color="gray.500">
                        {formatPrice(selectedProduct.oldPrice)}
                      </Text>
                    )}
                  </VStack>
                  {getStockBadge(selectedProduct.inStock)}
                </HStack>

                <Divider />

                <VStack spacing={2} align="stretch">
                  <HStack justify="space-between">
                    <Text fontWeight="bold">–†–µ–π—Ç–∏–Ω–≥:</Text>
                    <HStack>
                      <FaStar color="orange" />
                      <Text>{selectedProduct.rating.toFixed(1)}</Text>
                      <Text color="gray.500">({selectedProduct.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)</Text>
                    </HStack>
                  </HStack>

                  <HStack justify="space-between">
                    <Text fontWeight="bold">–ü—Ä–æ–¥–∞–≤–µ—Ü:</Text>
                    <Text>{selectedProduct.seller}</Text>
                  </HStack>

                  <HStack justify="space-between">
                    <Text fontWeight="bold">–ë—Ä–µ–Ω–¥:</Text>
                    <Text>{selectedProduct.brand}</Text>
                  </HStack>

                  <HStack justify="space-between">
                    <Text fontWeight="bold">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</Text>
                    <Text>{selectedProduct.category}</Text>
                  </HStack>

                  <HStack justify="space-between">
                    <Text fontWeight="bold">ID —Ç–æ–≤–∞—Ä–∞:</Text>
                    <Text fontFamily="mono">{selectedProduct.id}</Text>
                  </HStack>
                </VStack>

                <Button
                  as="a"
                  href={selectedProduct.url}
                  target="_blank"
                  colorScheme="blue"
                  leftIcon={<FaShoppingCart />}
                  className="purple-button-border"
                >
                  –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ WB
                </Button>
              </VStack>
            </SimpleGrid>
          </CardBody>
        </Card>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—â–∏—Ç–µ */}
      <Alert status="info" className="purple-alert-border">
        <AlertIcon />
        <VStack align="start" spacing={2}>
          <AlertTitle>üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞</AlertTitle>
          <AlertDescription>
            <Text fontSize="sm">
              –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º 7-—É—Ä–æ–≤–Ω–µ–≤–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:
              —ç–º—É–ª—è—Ü–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã,
              –¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è API, –∞–Ω—Ç–∏-–æ—Ç–ª–∞–¥–∫–∞, –≥–µ–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã.
            </Text>
          </AlertDescription>
        </VStack>
      </Alert>
    </VStack>
  );
}
