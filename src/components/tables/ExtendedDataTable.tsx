// üìä Extended Data Table Component - WB Price Optimizer
import React, { useState, useMemo, useEffect } from 'react'
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Text,
  Badge,
  HStack,
  VStack,
  Button,
  Input,
  Select,
  Flex,
  useColorModeValue,
  Tooltip,
  Progress,
  Icon,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  useToast,
} from '@chakra-ui/react'
import { FaEdit, FaTrash, FaEye, FaArrowUp, FaArrowDown, FaDownload, FaSync } from 'react-icons/fa'
import * as XLSX from 'xlsx'
import { saveAs } from 'file-saver'
import { wildberriesApi } from '../../services/wildberriesApi'
import { demoWildberriesApi } from '../../services/demoWildberriesApi'

// üìã WB Data Structure - Adapted for Wildberries
interface ExtendedDataRow {
  id: string
  supplierCabinet: string // 1. –ö–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  supplierArticle: string // 2. –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  productName: string // 3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  wbArticle: string // 4. –ê—Ä—Ç–∏–∫—É–ª WB
  currentStatus: string // 5. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
  yourWbSalePrice: number // 6. –í–∞—à–∞ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ WB
  wbCrossedPrice: number // 7. –ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞ –Ω–∞ WB
  customerPrice: number // 8. –¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  wbExtraDiscountPercent: number // 9. –î–æ–ø —Å–∫–∏–¥–∫–∞ –æ—Ç WB –≤ %
  considerWbCard: boolean // 10. –£—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—É WB
  wbCardPrice: number // 11. –¶–µ–Ω–∞ –ø–æ –∫–∞—Ä—Ç–µ WB
  wbCardDiscountPercent: number // 12. –°–∫–∏–¥–∫–∞ –ø–æ WB –∫–∞—Ä—Ç–µ –≤ %
  competitorPrice: number // 13. –¶–µ–Ω–∞ —É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  calculatedCustomerPrice: number // 14. –†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  calculatedWbSalePrice: number // 15. –†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ WB
  currentRCPrice: number // 16. –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –†–¶
  rcMarkupDiscountPercent: number // 17. –î–æ–ø –Ω–∞—Ü–µ–Ω–∫–∞/—Å–∫–∏–¥–∫–∞ –∫ –†–¶ –ø–æ –ø—Ä–æ—á–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –≤ %
  currentCalculationPrice: number // 18. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
  minSalePrice: number // 19. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
  newWbUploadPrice: number // 20. –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞ WB
  newMarkupDiscountPercent: number // 21. –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (+) —Å–∫–∏–¥–∫–∞ (-) –≤ %
  previousMarkupDiscountPercent: number // 22. –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (+) —Å–∫–∏–¥–∫–∞ (-) –≤ %
  markupStatus: string // 23. –°—Ç–∞—Ç—É—Å –Ω–∞—Ü–µ–Ω–∫–∏
  lastPriceCheckDateTime: string // 24. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
}

// üé® Mock Data - Exact Structure from Photo
const generateMockData = (): ExtendedDataRow[] => {
  const suppliers = ['–û–û–û "–ü–æ—Å—Ç–∞–≤—â–∏–∫ 1"', '–ò–ü –ò–≤–∞–Ω–æ–≤', '–û–û–û "–¢–æ—Ä–≥"', '–ò–ü –ü–µ—Ç—Ä–æ–≤', '–û–û–û "–°–Ω–∞–±"']
  const statuses = ['–ê–∫—Ç–∏–≤–µ–Ω', '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '–ê—Ä—Ö–∏–≤', '–ß–µ—Ä–Ω–æ–≤–∏–∫']
  const markupStatuses = ['–ü—Ä–∏–º–µ–Ω–µ–Ω–∞', '–û–∂–∏–¥–∞–µ—Ç', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ']

  return Array.from({ length: 50 }, (_, i) => {
    const basePrice = Math.round((Math.random() * 5000 + 500) * 100) / 100
    const rcPrice = Math.round((basePrice * 0.8) * 100) / 100
    const competitorPrice = Math.round((basePrice * (0.9 + Math.random() * 0.2)) * 100) / 100

    return {
      id: `prod-${i + 1}`,
      supplierCabinet: suppliers[Math.floor(Math.random() * suppliers.length)],
      supplierArticle: `ART-${Math.random().toString(36).substr(2, 8).toUpperCase()}`,
      productName: `–¢–æ–≤–∞—Ä ${i + 1} - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏`,
      wbArticle: `WB${Math.floor(Math.random() * 900000000) + 100000000}`,
      currentStatus: statuses[Math.floor(Math.random() * statuses.length)],
      yourWbSalePrice: basePrice,
      wbCrossedPrice: Math.round((basePrice * 1.2) * 100) / 100,
      customerPrice: Math.round((basePrice * 0.95) * 100) / 100,
      wbExtraDiscountPercent: Math.round((Math.random() * 15) * 10) / 10,
      considerWbCard: Math.random() > 0.5,
      wbCardPrice: Math.round((basePrice * 0.9) * 100) / 100,
      wbCardDiscountPercent: Math.round((Math.random() * 10 + 5) * 10) / 10,
      competitorPrice: competitorPrice,
      calculatedCustomerPrice: Math.round((competitorPrice * 0.98) * 100) / 100,
      calculatedWbSalePrice: Math.round((competitorPrice * 1.05) * 100) / 100,
      currentRCPrice: rcPrice,
      rcMarkupDiscountPercent: Math.round((Math.random() * 20 - 10) * 10) / 10,
      currentCalculationPrice: Math.round((rcPrice * 1.1) * 100) / 100,
      minSalePrice: Math.round((rcPrice * 0.9) * 100) / 100,
      newWbUploadPrice: Math.round((basePrice * (0.95 + Math.random() * 0.1)) * 100) / 100,
      newMarkupDiscountPercent: Math.round((Math.random() * 10 - 5) * 10) / 10,
      previousMarkupDiscountPercent: Math.round((Math.random() * 10 - 5) * 10) / 10,
      markupStatus: markupStatuses[Math.floor(Math.random() * markupStatuses.length)],
      lastPriceCheckDateTime: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),
    }
  })
}

const ExtendedDataTable: React.FC = () => {
  const [data, setData] = useState<ExtendedDataRow[]>(generateMockData())
  const [sortField, setSortField] = useState<keyof ExtendedDataRow>('productName')
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')
  const [filterStatus, setFilterStatus] = useState<string>('')
  const [searchTerm, setSearchTerm] = useState<string>('')
  const [isUpdating, setIsUpdating] = useState<boolean>(false)
  const toast = useToast()

  // üé® Theme colors
  const headerBg = useColorModeValue('blue.500', 'blue.600')
  const tableBg = useColorModeValue('white', 'gray.800')
  const borderColor = useColorModeValue('gray.200', 'gray.600')
  const hoverBg = useColorModeValue('gray.50', 'gray.700')

  // üîÑ Auto-update prices based on competitor prices
  useEffect(() => {
    const interval = setInterval(() => {
      setData(prevData =>
        prevData.map(row => {
          // Simulate competitor price changes
          const newCompetitorPrice = row.competitorPrice * (0.95 + Math.random() * 0.1)
          const newCalculatedPrice = Math.round((newCompetitorPrice * 0.98) * 100) / 100
          const newWbPrice = Math.round((newCalculatedPrice * 1.02) * 100) / 100

          return {
            ...row,
            competitorPrice: Math.round(newCompetitorPrice * 100) / 100,
            calculatedCustomerPrice: newCalculatedPrice,
            newWbUploadPrice: newWbPrice,
            lastPriceCheckDateTime: new Date().toISOString(),
          }
        })
      )
    }, 30000) // Update every 30 seconds

    return () => clearInterval(interval)
  }, [])

  // üîÑ Manual refresh function
  const refreshData = async () => {
    setIsUpdating(true)

    try {
      const isDemoMode = localStorage.getItem('wb_demo_mode') === 'true'

      if (isDemoMode) {
        // –î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => {
          setData(generateMockData())
          setIsUpdating(false)
          toast({
            title: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–î–µ–º–æ)',
            description: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            status: 'success',
            duration: 2000,
            isClosable: true,
          })
        }, 1000)
      } else {
        // –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        try {
          const products = await wildberriesApi.getProducts(50, 0)
          const prices = await wildberriesApi.getPrices()
          const stocks = await wildberriesApi.getStocks()

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã
          const apiData: ExtendedDataRow[] = products.map((product, index) => {
            const price = prices.find(p => p.nmId === product.nmID)
            const stock = stocks.find(s => s.nmId === product.nmID)

            return {
              id: `api-${product.nmID}`,
              supplierCabinet: '–í–∞—à –∫–∞–±–∏–Ω–µ—Ç',
              supplierArticle: product.vendorCode,
              productName: product.title,
              wbArticle: product.nmID.toString(),
              currentStatus: stock?.quantity > 0 ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
              yourWbSalePrice: price?.price || product.sizes[0]?.price || 0,
              wbCrossedPrice: (price?.price || 0) * 1.2,
              customerPrice: (price?.price || 0) * 0.95,
              wbExtraDiscountPercent: price?.discount || 0,
              considerWbCard: true,
              wbCardPrice: (price?.price || 0) * 0.9,
              wbCardDiscountPercent: 10,
              competitorPrice: (price?.price || 0) * 1.1,
              calculatedCustomerPrice: (price?.price || 0) * 0.98,
              calculatedWbSalePrice: (price?.price || 0) * 1.02,
              currentRCPrice: (price?.price || 0) * 0.8,
              rcMarkupDiscountPercent: 0,
              currentCalculationPrice: (price?.price || 0) * 0.85,
              minSalePrice: (price?.price || 0) * 0.7,
              newWbUploadPrice: price?.price || 0,
              newMarkupDiscountPercent: 0,
              previousMarkupDiscountPercent: 0,
              markupStatus: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∞',
              lastPriceCheckDateTime: new Date().toISOString(),
            }
          })

          setData(apiData)
          setIsUpdating(false)
          toast({
            title: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (API)',
            description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${apiData.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Wildberries`,
            status: 'success',
            duration: 2000,
            isClosable: true,
          })
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
          setIsUpdating(false)
          toast({
            title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
            description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
            status: 'error',
            duration: 3000,
            isClosable: true,
          })
        }
      }
    } catch (error) {
      setIsUpdating(false)
      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        status: 'error',
        duration: 3000,
        isClosable: true,
      })
    }
  }

  // üîÑ Sorting and filtering
  const sortedAndFilteredData = useMemo(() => {
    let filtered = data.filter(row => {
      const matchesSearch = row.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           row.supplierArticle.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           row.supplierCabinet.toLowerCase().includes(searchTerm.toLowerCase())
      const matchesStatus = !filterStatus || row.currentStatus === filterStatus
      return matchesSearch && matchesStatus
    })

    return filtered.sort((a, b) => {
      const aVal = a[sortField]
      const bVal = b[sortField]

      if (typeof aVal === 'string' && typeof bVal === 'string') {
        return sortDirection === 'asc'
          ? aVal.localeCompare(bVal)
          : bVal.localeCompare(aVal)
      }

      if (typeof aVal === 'number' && typeof bVal === 'number') {
        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal
      }

      return 0
    })
  }, [data, sortField, sortDirection, searchTerm, filterStatus])

  // üìä Export to Excel function
  const exportToExcel = () => {
    try {
      const worksheet = XLSX.utils.json_to_sheet(sortedAndFilteredData.map(row => ({
        '–ö–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': row.supplierCabinet,
        '–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': row.supplierArticle,
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': row.productName,
        '–ê—Ä—Ç–∏–∫—É–ª WB': row.wbArticle,
        '–°—Ç–∞—Ç—É—Å': row.currentStatus,
        '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ WB': row.yourWbSalePrice,
        '–ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞': row.wbCrossedPrice,
        '–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è': row.customerPrice,
        '–°–∫–∏–¥–∫–∞ WB %': row.wbExtraDiscountPercent,
        '–ö–∞—Ä—Ç–∞ WB': row.considerWbCard ? '–î–∞' : '–ù–µ—Ç',
        '–¶–µ–Ω–∞ –ø–æ –∫–∞—Ä—Ç–µ': row.wbCardPrice,
        '–°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ %': row.wbCardDiscountPercent,
        '–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤': row.competitorPrice,
        '–†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è': row.calculatedCustomerPrice,
        '–†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ WB': row.calculatedWbSalePrice,
        '–¢–µ–∫—É—â–∞—è –†–¶': row.currentRCPrice,
        '–ù–∞—Ü–µ–Ω–∫–∞/—Å–∫–∏–¥–∫–∞ –†–¶ %': row.rcMarkupDiscountPercent,
        '–¶–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤': row.currentCalculationPrice,
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': row.minSalePrice,
        '–ù–æ–≤–∞—è —Ü–µ–Ω–∞ WB': row.newWbUploadPrice,
        '–ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ %': row.newMarkupDiscountPercent,
        '–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ %': row.previousMarkupDiscountPercent,
        '–°—Ç–∞—Ç—É—Å –Ω–∞—Ü–µ–Ω–∫–∏': row.markupStatus,
        '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞': new Date(row.lastPriceCheckDateTime).toLocaleString('ru-RU'),
      })))

      const workbook = XLSX.utils.book_new()
      XLSX.utils.book_append_sheet(workbook, worksheet, 'WB –¢–æ–≤–∞—Ä—ã')

      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })
      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })

      saveAs(blob, `wb-products-${new Date().toISOString().split('T')[0]}.xlsx`)

      toast({
        title: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
        description: '–§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        status: 'success',
        duration: 3000,
        isClosable: true,
      })
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª Excel',
        status: 'error',
        duration: 3000,
        isClosable: true,
      })
    }
  }

  // üéØ Handle sorting
  const handleSort = (field: keyof ExtendedDataRow) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('asc')
    }
  }



  // üí∞ Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount)
  }

  // üìä Format percentage
  const formatPercent = (value: number) => `${value.toFixed(1)}%`

  // üìÖ Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    })
  }

  return (
    <Box>
      {/* üîç Filters and Actions */}
      <Flex gap={4} mb={4} wrap="wrap" justify="space-between" align="center">
        <Flex gap={4} wrap="wrap">
          <Input
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –∫–∞–±–∏–Ω–µ—Ç—É..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            maxW="350px"
          />
          <Select
            placeholder="–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã"
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            maxW="200px"
          >
            <option value="–ê–∫—Ç–∏–≤–µ–Ω">–ê–∫—Ç–∏–≤–µ–Ω</option>
            <option value="–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏">–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</option>
            <option value="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</option>
            <option value="–ê—Ä—Ö–∏–≤">–ê—Ä—Ö–∏–≤</option>
            <option value="–ß–µ—Ä–Ω–æ–≤–∏–∫">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
          </Select>
        </Flex>

        <Flex gap={2}>
          <Button
            leftIcon={<Icon as={FaDownload} />}
            colorScheme="green"
            size="sm"
            onClick={exportToExcel}
          >
            –≠–∫—Å–ø–æ—Ä—Ç Excel
          </Button>
          <Button
            leftIcon={<Icon as={FaSync} />}
            colorScheme="blue"
            size="sm"
            onClick={refreshData}
            isLoading={isUpdating}
            loadingText="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </Button>
        </Flex>
      </Flex>

      {/* üìä Main Table */}
      <Box
        bg={tableBg}
        borderRadius="lg"
        borderWidth="2px"
        borderColor="blue.500"
        boxShadow="lg"
        position="relative"
        overflow="hidden"
      >
        {/* Scroll hint */}
        <Box
          position="absolute"
          top={2}
          right={2}
          bg="blue.500"
          color="white"
          px={2}
          py={1}
          borderRadius="md"
          fontSize="xs"
          zIndex={10}
          opacity={0.8}
        >
          ‚Üê –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ ‚Üí
        </Box>

        <TableContainer
          overflowX="auto"
          overflowY="auto"
          maxH="70vh"
          css={{
            '&::-webkit-scrollbar': {
              height: '12px',
              width: '12px',
            },
            '&::-webkit-scrollbar-track': {
              background: '#f1f5f9',
              borderRadius: '6px',
            },
            '&::-webkit-scrollbar-thumb': {
              background: 'linear-gradient(45deg, #3182ce, #2c5aa0)',
              borderRadius: '6px',
              border: '2px solid #f1f5f9',
            },
            '&::-webkit-scrollbar-thumb:hover': {
              background: 'linear-gradient(45deg, #2c5aa0, #2a4a7c)',
            },
            '&::-webkit-scrollbar-corner': {
              background: '#f1f5f9',
            },
          }}
        >
        <Table variant="striped" colorScheme="blue" size="sm" className="purple-table-border">
          <Thead bg={headerBg}>
            <Tr>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ö–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ê—Ä—Ç–∏–∫—É–ª WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–í–∞—à–∞ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞ –Ω–∞ WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–î–æ–ø —Å–∫–∏–¥–∫–∞ –æ—Ç WB –≤ %</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–£—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—É WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–¶–µ–Ω–∞ –ø–æ –∫–∞—Ä—Ç–µ WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–°–∫–∏–¥–∫–∞ –ø–æ WB –∫–∞—Ä—Ç–µ –≤ %</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–¶–µ–Ω–∞ —É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –†–¶</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–î–æ–ø –Ω–∞—Ü–µ–Ω–∫–∞/—Å–∫–∏–¥–∫–∞ –∫ –†–¶ –ø–æ –ø—Ä–æ—á–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –≤ %</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞ WB</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (+) —Å–∫–∏–¥–∫–∞ (-) –≤ %</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (+) —Å–∫–∏–¥–∫–∞ (-) –≤ %</Th>
              <Th color="white" fontSize="xs" p={2} borderRight="1px solid" borderRightColor="blue.400">–°—Ç–∞—Ç—É—Å –Ω–∞—Ü–µ–Ω–∫–∏</Th>
              <Th color="white" fontSize="xs" p={2}>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã</Th>
            </Tr>
          </Thead>
          <Tbody>
            {sortedAndFilteredData.map((row) => (
              <Tr key={row.id} _hover={{ bg: hoverBg }}>
                {/* 1. –ö–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ */}
                <Td fontSize="xs" p={2} maxW="120px" borderRight="1px solid" borderRightColor={borderColor}>
                  <Text isTruncated>{row.supplierCabinet}</Text>
                </Td>

                {/* 2. –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ */}
                <Td fontSize="xs" p={2} fontFamily="mono" borderRight="1px solid" borderRightColor={borderColor}>
                  {row.supplierArticle}
                </Td>

                {/* 3. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ */}
                <Td fontSize="xs" p={2} maxW="200px" borderRight="1px solid" borderRightColor={borderColor}>
                  <Tooltip label={row.productName}>
                    <Text isTruncated>{row.productName}</Text>
                  </Tooltip>
                </Td>

                {/* 4. –ê—Ä—Ç–∏–∫—É–ª WB */}
                <Td fontSize="xs" p={2} fontFamily="mono" borderRight="1px solid" borderRightColor={borderColor}>
                  {row.wbArticle}
                </Td>

                {/* 5. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ */}
                <Td fontSize="xs" p={2} borderRight="1px solid" borderRightColor={borderColor}>
                  <Badge size="sm" colorScheme={
                    row.currentStatus === '–ê–∫—Ç–∏–≤–µ–Ω' ? 'green' :
                    row.currentStatus === '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏' ? 'yellow' :
                    row.currentStatus === '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' ? 'red' : 'gray'
                  }>
                    {row.currentStatus}
                  </Badge>
                </Td>

                {/* 6. –í–∞—à–∞ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ WB */}
                <Td fontSize="xs" p={2} isNumeric fontWeight="bold" borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.yourWbSalePrice)}
                </Td>

                {/* 7. –ó–∞—á–µ—Ä–∫–Ω—É—Ç–∞—è —Ü–µ–Ω–∞ –Ω–∞ WB */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  <Text textDecoration="line-through" color="gray.500">
                    {formatCurrency(row.wbCrossedPrice)}
                  </Text>
                </Td>

                {/* 8. –¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.customerPrice)}
                </Td>

                {/* 9. –î–æ–ø —Å–∫–∏–¥–∫–∞ –æ—Ç WB –≤ % */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatPercent(row.wbExtraDiscountPercent)}
                </Td>

                {/* 10. –£—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—É WB */}
                <Td fontSize="xs" p={2} textAlign="center" borderRight="1px solid" borderRightColor={borderColor}>
                  <Badge colorScheme={row.considerWbCard ? 'green' : 'gray'} size="sm">
                    {row.considerWbCard ? '–î–∞' : '–ù–µ—Ç'}
                  </Badge>
                </Td>

                {/* 11. –¶–µ–Ω–∞ –ø–æ –∫–∞—Ä—Ç–µ WB */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.wbCardPrice)}
                </Td>

                {/* 12. –°–∫–∏–¥–∫–∞ –ø–æ WB –∫–∞—Ä—Ç–µ –≤ % */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatPercent(row.wbCardDiscountPercent)}
                </Td>

                {/* 13. –¶–µ–Ω–∞ —É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.competitorPrice)}
                </Td>

                {/* 14. –†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.calculatedCustomerPrice)}
                </Td>

                {/* 15. –†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ WB */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.calculatedWbSalePrice)}
                </Td>

                {/* 16. –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –†–¶ */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.currentRCPrice)}
                </Td>

                {/* 17. –î–æ–ø –Ω–∞—Ü–µ–Ω–∫–∞/—Å–∫–∏–¥–∫–∞ –∫ –†–¶ –ø–æ –ø—Ä–æ—á–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –≤ % */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  <Text color={row.rcMarkupDiscountPercent >= 0 ? 'green.500' : 'red.500'}>
                    {row.rcMarkupDiscountPercent >= 0 ? '+' : ''}{formatPercent(row.rcMarkupDiscountPercent)}
                  </Text>
                </Td>

                {/* 18. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.currentCalculationPrice)}
                </Td>

                {/* 19. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.minSalePrice)}
                </Td>

                {/* 20. –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞ WB */}
                <Td fontSize="xs" p={2} isNumeric fontWeight="bold" color="blue.500" borderRight="1px solid" borderRightColor={borderColor}>
                  {formatCurrency(row.newWbUploadPrice)}
                </Td>

                {/* 21. –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (+) —Å–∫–∏–¥–∫–∞ (-) –≤ % */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  <Text color={row.newMarkupDiscountPercent >= 0 ? 'green.500' : 'red.500'}>
                    {row.newMarkupDiscountPercent >= 0 ? '+' : ''}{formatPercent(row.newMarkupDiscountPercent)}
                  </Text>
                </Td>

                {/* 22. –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞ (+) —Å–∫–∏–¥–∫–∞ (-) –≤ % */}
                <Td fontSize="xs" p={2} isNumeric borderRight="1px solid" borderRightColor={borderColor}>
                  <Text color="gray.500">
                    {row.previousMarkupDiscountPercent >= 0 ? '+' : ''}{formatPercent(row.previousMarkupDiscountPercent)}
                  </Text>
                </Td>

                {/* 23. –°—Ç–∞—Ç—É—Å –Ω–∞—Ü–µ–Ω–∫–∏ */}
                <Td fontSize="xs" p={2} borderRight="1px solid" borderRightColor={borderColor}>
                  <Badge size="sm" colorScheme={
                    row.markupStatus === '–ü—Ä–∏–º–µ–Ω–µ–Ω–∞' ? 'green' :
                    row.markupStatus === '–û–∂–∏–¥–∞–µ—Ç' ? 'yellow' :
                    row.markupStatus === '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' ? 'red' : 'blue'
                  }>
                    {row.markupStatus}
                  </Badge>
                </Td>

                {/* 24. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã */}
                <Td fontSize="xs" p={2}>
                  {formatDate(row.lastPriceCheckDateTime)}
                </Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
        </TableContainer>
      </Box>

      {/* üìä Summary */}
      <Box mt={4} p={4} bg={tableBg} borderRadius="md" borderWidth="1px" borderColor={borderColor}>
        <HStack justify="space-between" align="center">
          <Text fontSize="sm" color="gray.600">
            –ü–æ–∫–∞–∑–∞–Ω–æ {sortedAndFilteredData.length} –∏–∑ {data.length} –∑–∞–ø–∏—Å–µ–π
          </Text>
          <HStack spacing={2}>
            <Badge colorScheme="green" variant="subtle">
              üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 30 —Å–µ–∫
            </Badge>
            <Badge colorScheme="blue" variant="subtle">
              üìä Excel —ç–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            </Badge>
          </HStack>
        </HStack>
      </Box>
    </Box>
  )
}

export default ExtendedDataTable
