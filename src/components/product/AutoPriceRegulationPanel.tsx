/**
 * üéØ –ü–ê–ù–ï–õ–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù
 *
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω
 */

import React, { useState, useEffect } from 'react';
import {
  Box,
  VStack,
  HStack,
  Text,
  Button,
  Badge,
  Card,
  CardHeader,
  CardBody,
  Heading,
  Divider,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Progress,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  useColorModeValue,
  useToast,
  Switch,
  FormControl,
  FormLabel,
  Tooltip,
  SimpleGrid,
  Icon
} from '@chakra-ui/react';
import {
  CheckCircleIcon,
  WarningIcon,
  TimeIcon,
  RepeatIcon,
  SettingsIcon,
  TriangleUpIcon,
  TriangleDownIcon
} from '@chakra-ui/icons';
import { Product, CompetitorProduct } from '../../types/product';
import { PricingStrategy } from './StrategySelectionModal';
import { priceAutomationService } from '../../services/priceAutomationService';
import { automationService } from '../../services/automationService';

interface AutoPriceRegulationPanelProps {
  product: Product;
  competitors: CompetitorProduct[];
  strategy: PricingStrategy;
  onConfigureStrategy: () => void;
  onManageCompetitors: () => void;
}

export default function AutoPriceRegulationPanel({
  product,
  competitors,
  strategy,
  onConfigureStrategy,
  onManageCompetitors
}: AutoPriceRegulationPanelProps) {
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [monitoringStats, setMonitoringStats] = useState<any>(null);
  const [automationSettings, setAutomationSettings] = useState<any>(null);
  const toast = useToast();

  // –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–º—ã
  const cardBg = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const successColor = useColorModeValue('green.500', 'green.300');
  const warningColor = useColorModeValue('orange.500', 'orange.300');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadMonitoringData();
  }, [product.id]);

  const loadMonitoringData = () => {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const stats = priceAutomationService.getMonitoringStats();
    setMonitoringStats(stats);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const isProductMonitored = stats.products.some(p => p.productId === product.id);
    setIsMonitoring(isProductMonitored);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    const settings = automationService.getAutomationSettings(product.id);
    setAutomationSettings(settings);
  };

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  const toggleAutoRegulation = async () => {
    if (!isMonitoring) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
      if (competitors.length === 0) {
        toast({
          title: '–ù–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
          description: '–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω',
          status: 'warning',
          duration: 5000,
          isClosable: true,
        });
        return;
      }

      if (!strategy) {
        toast({
          title: '–ù–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
          description: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
          status: 'warning',
          duration: 5000,
          isClosable: true,
        });
        return;
      }

      // –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      priceAutomationService.addProductToMonitoring(product, competitors, strategy);
      setIsMonitoring(true);

      toast({
        title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ',
        description: `–¢–æ–≤–∞—Ä ${product.sku} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –¶–µ–Ω—ã –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.`,
        status: 'success',
        duration: 5000,
        isClosable: true,
      });

    } else {
      // –í—ã–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      priceAutomationService.removeProductFromMonitoring(product.id);
      setIsMonitoring(false);

      toast({
        title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ',
        description: `–¢–æ–≤–∞—Ä ${product.sku} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`,
        status: 'info',
        duration: 5000,
        isClosable: true,
      });
    }

    loadMonitoringData();
  };

  // –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
  const manualPriceCheck = async () => {
    if (!isMonitoring) {
      toast({
        title: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω',
        description: '–í–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    toast({
      title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω...',
      description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      status: 'info',
      duration: 2000,
      isClosable: true,
    });

    await priceAutomationService.checkProductPrice(product.id);
    loadMonitoringData();

    toast({
      title: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      description: '–¶–µ–Ω—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
  const getMinCompetitorPrice = () => {
    if (competitors.length === 0) return null;
    return Math.min(...competitors.map(c => c.price));
  };

  // –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
  const getPriceDifference = () => {
    const minPrice = getMinCompetitorPrice();
    if (!minPrice) return null;
    return ((product.price.current - minPrice) / minPrice) * 100;
  };

  const minCompetitorPrice = getMinCompetitorPrice();
  const priceDifference = getPriceDifference();

  return (
    <Card bg={cardBg} borderColor={borderColor} borderWidth="1px">
      <CardHeader>
        <HStack justify="space-between">
          <HStack>
            <Icon as={RepeatIcon} color={isMonitoring ? successColor : 'gray.400'} />
            <Heading size="md">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω</Heading>
          </HStack>
          <Badge colorScheme={isMonitoring ? 'green' : 'gray'}>
            {isMonitoring ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ'}
          </Badge>
        </HStack>
      </CardHeader>

      <CardBody>
        <VStack spacing={6} align="stretch">
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <Box>
            <FormControl display="flex" alignItems="center" justifyContent="space-between">
              <FormLabel htmlFor="auto-regulation" mb="0" fontWeight="medium">
                –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
              </FormLabel>
              <Switch
                id="auto-regulation"
                isChecked={isMonitoring}
                onChange={toggleAutoRegulation}
                colorScheme="green"
                size="lg"
              />
            </FormControl>
            <Text fontSize="sm" color="gray.500" mt={2}>
              –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            </Text>
          </Box>

          <Divider />

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
            <Stat>
              <StatLabel>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</StatLabel>
              <StatNumber>{product.price.current.toLocaleString()} ‚ÇΩ</StatNumber>
              {minCompetitorPrice && (
                <StatHelpText>
                  <StatArrow type={priceDifference! >= 0 ? 'increase' : 'decrease'} />
                  {Math.abs(priceDifference!).toFixed(1)}% –æ—Ç –º–∏–Ω. –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
                </StatHelpText>
              )}
            </Stat>

            <Stat>
              <StatLabel>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã</StatLabel>
              <StatNumber>{competitors.length}</StatNumber>
              <StatHelpText>
                {minCompetitorPrice ? `–ú–∏–Ω: ${minCompetitorPrice.toLocaleString()} ‚ÇΩ` : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
              </StatHelpText>
            </Stat>

            <Stat>
              <StatLabel>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</StatLabel>
              <StatNumber fontSize="md">{strategy?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}</StatNumber>
              <StatHelpText>
                {strategy?.type || '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é'}
              </StatHelpText>
            </Stat>
          </SimpleGrid>

          <Divider />

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å */}
          {!isMonitoring && (
            <Alert status="info" borderRadius="md">
              <AlertIcon />
              <Box>
                <AlertTitle>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ</AlertTitle>
                <AlertDescription>
                  –í–∫–ª—é—á–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–∞—à–µ–π —Ü–µ–Ω—ã
                </AlertDescription>
              </Box>
            </Alert>
          )}

          {isMonitoring && competitors.length === 0 && (
            <Alert status="warning" borderRadius="md">
              <AlertIcon />
              <Box>
                <AlertTitle>–ù–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</AlertTitle>
                <AlertDescription>
                  –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
                </AlertDescription>
              </Box>
            </Alert>
          )}

          {isMonitoring && !strategy && (
            <Alert status="warning" borderRadius="md">
              <AlertIcon />
              <Box>
                <AlertTitle>–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</AlertTitle>
                <AlertDescription>
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                </AlertDescription>
              </Box>
            </Alert>
          )}

          {isMonitoring && competitors.length > 0 && strategy && (
            <Alert status="success" borderRadius="md">
              <AlertIcon />
              <Box>
                <AlertTitle>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω</AlertTitle>
                <AlertDescription>
                  –¶–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {automationSettings?.monitoring24x7 ? '5 –º–∏–Ω—É—Ç' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                </AlertDescription>
              </Box>
            </Alert>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <HStack spacing={3}>
            <Button
              leftIcon={<RepeatIcon />}
              onClick={manualPriceCheck}
              isDisabled={!isMonitoring}
              colorScheme="blue"
              variant="outline"
            >
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å
            </Button>

            <Button
              leftIcon={<SettingsIcon />}
              onClick={onConfigureStrategy}
              variant="outline"
            >
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            </Button>

            <Button
              leftIcon={<Icon as={TriangleUpIcon} />}
              onClick={onManageCompetitors}
              variant="outline"
            >
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
            </Button>
          </HStack>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
          {isMonitoring && (
            <Box>
              <Text fontSize="sm" color="gray.500" mb={2}>
                –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
              </Text>
              <Progress value={60} colorScheme="green" size="sm" borderRadius="md" />
              <Text fontSize="xs" color="gray.400" mt={1}>
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
              </Text>
            </Box>
          )}
        </VStack>
      </CardBody>
    </Card>
  );
}
