import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  VStack,
  HStack,
  Text,
  Badge,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Progress,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  useColorModeValue,
  Icon,
  Button,
  Tooltip,
  Flex,
  Divider
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { FaBrain, FaExclamationTriangle, FaChartLine, FaRobot } from 'react-icons/fa';
import { mlAnomalyDetection } from '../../services/mlAnomalyDetection';

interface AnomalyAlert {
  id: string;
  productName: string;
  competitorName: string;
  anomalyType: string;
  anomalyScore: number;
  confidence: number;
  description: string;
  recommendation: string;
  timestamp: number;
  isNew: boolean;
}

export default function AnomalyDashboard() {
  const [anomalies, setAnomalies] = useState<AnomalyAlert[]>([]);
  const [stats, setStats] = useState({
    totalProducts: 0,
    anomaliesDetected: 0,
    mostCommonAnomalyType: '',
    averageConfidence: 0
  });
  const [isLoading, setIsLoading] = useState(true);

  const cardBg = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  useEffect(() => {
    loadAnomalyData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadAnomalyData, 30000);
    return () => clearInterval(interval);
  }, []);

  const loadAnomalyData = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ML-—Å–µ—Ä–≤–∏—Å–∞
      const mlStats = mlAnomalyDetection.getAnomalyStats();
      setStats(mlStats);

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–æ–º–∞–ª–∏–π
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const mockAnomalies: AnomalyAlert[] = [
        {
          id: '1',
          productName: 'iPhone 15 Pro',
          competitorName: 'TechStore',
          anomalyType: 'price_spike',
          anomalyScore: 8.5,
          confidence: 0.92,
          description: '–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã –Ω–∞ 25.3%',
          recommendation: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –ø–æ–¥–Ω—è–ª —Ü–µ–Ω—É –Ω–∞ 25.3%. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–≤–æ–µ–π —Ü–µ–Ω—ã.',
          timestamp: Date.now() - 300000, // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          isNew: true
        },
        {
          id: '2',
          productName: 'Samsung Galaxy S24',
          competitorName: 'MobileWorld',
          anomalyType: 'rating_manipulation',
          anomalyScore: 6.2,
          confidence: 0.78,
          description: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ 1.2 –∑–≤–µ–∑–¥',
          recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏',
          timestamp: Date.now() - 1800000, // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
          isNew: false
        },
        {
          id: '3',
          productName: 'MacBook Air M3',
          competitorName: 'AppleStore',
          anomalyType: 'review_bombing',
          anomalyScore: 9.1,
          confidence: 0.95,
          description: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç–∑—ã–≤–æ–≤: +47 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞',
          recommendation: '–í–æ–∑–º–æ–∂–Ω–∞—è –Ω–∞–∫—Ä—É—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º',
          timestamp: Date.now() - 3600000, // 1 —á–∞—Å –Ω–∞–∑–∞–¥
          isNew: false
        }
      ];

      setAnomalies(mockAnomalies);
      setIsLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π:', error);
      setIsLoading(false);
    }
  };

  const getAnomalyTypeColor = (type: string) => {
    switch (type) {
      case 'price_spike': return 'red';
      case 'price_drop': return 'orange';
      case 'rating_manipulation': return 'yellow';
      case 'review_bombing': return 'purple';
      default: return 'gray';
    }
  };

  const getAnomalyTypeIcon = (type: string) => {
    switch (type) {
      case 'price_spike': return 'üìà';
      case 'price_drop': return 'üìâ';
      case 'rating_manipulation': return '‚≠ê';
      case 'review_bombing': return 'üìù';
      default: return 'üîç';
    }
  };

  const getAnomalyTypeName = (type: string) => {
    switch (type) {
      case 'price_spike': return '–†–æ—Å—Ç —Ü–µ–Ω—ã';
      case 'price_drop': return '–ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã';
      case 'rating_manipulation': return '–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–º';
      case 'review_bombing': return '–ù–∞–∫—Ä—É—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–Ω–æ–º–∞–ª–∏—è';
    }
  };

  const formatTimestamp = (timestamp: number) => {
    const diff = Date.now() - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
    return `${minutes}–º –Ω–∞–∑–∞–¥`;
  };

  return (
    <VStack spacing={6} align="stretch">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <HStack spacing={3}>
            <Icon as={FaBrain} color="purple.500" boxSize={6} />
            <Heading size="lg" color="purple.600">
              ü§ñ ML-–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π
            </Heading>
            <Badge colorScheme="green" size="sm">
              Real-time
            </Badge>
          </HStack>
          <Text fontSize="sm" color="gray.600" mt={2}>
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ü–µ–Ω–∞—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
          </Text>
        </CardHeader>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <SimpleGrid columns={{ base: 2, md: 4 }} spacing={4}>
        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={cardBg}>
          <StatLabel>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã</StatLabel>
          <StatNumber color="blue.500">{stats.totalProducts}</StatNumber>
          <StatHelpText>–∞–∫—Ç–∏–≤–Ω—ã—Ö</StatHelpText>
        </Stat>

        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={cardBg}>
          <StatLabel>–ê–Ω–æ–º–∞–ª–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</StatLabel>
          <StatNumber color="red.500">{anomalies.length}</StatNumber>
          <StatHelpText>
            <StatArrow type="increase" />
            +23% –∑–∞ –Ω–µ–¥–µ–ª—é
          </StatHelpText>
        </Stat>

        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={cardBg}>
          <StatLabel>–¢–æ—á–Ω–æ—Å—Ç—å ML</StatLabel>
          <StatNumber color="green.500">{(stats.averageConfidence * 100).toFixed(1)}%</StatNumber>
          <StatHelpText>—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</StatHelpText>
        </Stat>

        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={cardBg}>
          <StatLabel>–ß–∞—Å—Ç–∞—è –∞–Ω–æ–º–∞–ª–∏—è</StatLabel>
          <StatNumber color="orange.500">üìà –†–æ—Å—Ç —Ü–µ–Ω</StatNumber>
          <StatHelpText>45% –æ—Ç –≤—Å–µ—Ö</StatHelpText>
        </Stat>
      </SimpleGrid>

      {/* –°–ø–∏—Å–æ–∫ –∞–Ω–æ–º–∞–ª–∏–π */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <HStack justify="space-between">
            <Heading size="md">üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏</Heading>
            <Button
              size="sm"
              colorScheme="purple"
              leftIcon={<Icon as={FaRobot} />}
              className="purple-button-border"
              onClick={loadAnomalyData}
              isLoading={isLoading}
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </HStack>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            {anomalies.length === 0 ? (
              <Alert status="info" className="purple-alert-border">
                <AlertIcon />
                <AlertDescription>
                  –ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. ML-—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.
                </AlertDescription>
              </Alert>
            ) : (
              anomalies.map((anomaly) => (
                <Alert
                  key={anomaly.id}
                  status={anomaly.anomalyScore > 7 ? 'error' : 'warning'}
                  variant="left-accent"
                  className="purple-alert-border"
                  borderRadius="md"
                >
                  <AlertIcon />
                  <Box flex="1">
                    <HStack justify="space-between" mb={2}>
                      <HStack spacing={2}>
                        <AlertTitle fontSize="sm">
                          {getAnomalyTypeIcon(anomaly.anomalyType)} {anomaly.productName}
                        </AlertTitle>
                        <Badge 
                          colorScheme={getAnomalyTypeColor(anomaly.anomalyType)} 
                          size="sm"
                        >
                          {getAnomalyTypeName(anomaly.anomalyType)}
                        </Badge>
                        {anomaly.isNew && (
                          <Badge colorScheme="red" size="sm">
                            NEW
                          </Badge>
                        )}
                      </HStack>
                      <Text fontSize="xs" color="gray.500">
                        {formatTimestamp(anomaly.timestamp)}
                      </Text>
                    </HStack>
                    
                    <AlertDescription fontSize="sm" mb={3}>
                      <Text><strong>–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç:</strong> {anomaly.competitorName}</Text>
                      <Text><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {anomaly.description}</Text>
                      <Text><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {anomaly.recommendation}</Text>
                    </AlertDescription>

                    <HStack spacing={4}>
                      <Tooltip label="–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏ (0-10)">
                        <HStack spacing={2}>
                          <Text fontSize="xs" fontWeight="bold">–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å:</Text>
                          <Progress
                            value={anomaly.anomalyScore * 10}
                            size="sm"
                            colorScheme={anomaly.anomalyScore > 7 ? 'red' : 'orange'}
                            width="60px"
                          />
                          <Text fontSize="xs">{anomaly.anomalyScore.toFixed(1)}</Text>
                        </HStack>
                      </Tooltip>

                      <Tooltip label="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ML-–º–æ–¥–µ–ª–∏">
                        <HStack spacing={2}>
                          <Text fontSize="xs" fontWeight="bold">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</Text>
                          <Progress
                            value={anomaly.confidence * 100}
                            size="sm"
                            colorScheme="green"
                            width="60px"
                          />
                          <Text fontSize="xs">{(anomaly.confidence * 100).toFixed(0)}%</Text>
                        </HStack>
                      </Tooltip>
                    </HStack>
                  </Box>
                </Alert>
              ))
            )}
          </VStack>
        </CardBody>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ML */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ML-–¥–µ—Ç–µ–∫—Ü–∏–∏</Heading>
        </CardHeader>
        <CardBody>
          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
            <Box>
              <Text fontSize="sm" fontWeight="bold" mb={2}>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã</Text>
              <HStack>
                <Progress value={20} size="lg" colorScheme="blue" flex={1} />
                <Text fontSize="sm">20%</Text>
              </HStack>
            </Box>

            <Box>
              <Text fontSize="sm" fontWeight="bold" mb={2}>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞</Text>
              <HStack>
                <Progress value={50} size="lg" colorScheme="yellow" flex={1} />
                <Text fontSize="sm">0.5‚òÖ</Text>
              </HStack>
            </Box>

            <Box>
              <Text fontSize="sm" fontWeight="bold" mb={2}>–û–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞</Text>
              <HStack>
                <Progress value={100} size="lg" colorScheme="green" flex={1} />
                <Text fontSize="sm">24—á</Text>
              </HStack>
            </Box>
          </SimpleGrid>
        </CardBody>
      </Card>
    </VStack>
  );
}
