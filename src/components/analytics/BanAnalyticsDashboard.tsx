import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  VStack,
  HStack,
  Text,
  Badge,
  useColorModeValue,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  Progress,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Button,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Code,
  Tooltip
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { FaBrain, FaChartLine, FaExclamationTriangle, FaLightbulb, FaShieldAlt } from 'react-icons/fa';
import { banAnalyticsService, BanAnalytics, BanPattern } from '../../services/banAnalyticsService';

export default function BanAnalyticsDashboard() {
  const [analytics, setAnalytics] = useState<BanAnalytics | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const cardBg = useColorModeValue('white', 'gray.700');
  const statBg = useColorModeValue('gray.50', 'gray.600');

  useEffect(() => {
    loadAnalytics();
    const interval = setInterval(loadAnalytics, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval);
  }, []);

  const loadAnalytics = () => {
    try {
      const data = banAnalyticsService.getAnalytics();
      setAnalytics(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCleanup = () => {
    banAnalyticsService.cleanup();
    loadAnalytics();
  };

  if (isLoading) {
    return <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</Text>;
  }

  if (!analytics) {
    return <Text>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</Text>;
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'red';
      case 'high': return 'orange';
      case 'medium': return 'yellow';
      case 'low': return 'green';
      default: return 'gray';
    }
  };

  return (
    <VStack spacing={6} align="stretch">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <HStack spacing={3}>
            <FaBrain color="purple" />
            <Heading size="lg" color="purple.600">
              üß† –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–∞–Ω–æ–≤ - "–ú–æ–∑–≥" —Å–∏—Å—Ç–µ–º—ã
            </Heading>
            <Badge colorScheme="blue" size="sm">
              AI-Powered
            </Badge>
          </HStack>
          <Text fontSize="sm" color="gray.600" mt={2}>
            –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
          </Text>
        </CardHeader>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <SimpleGrid columns={{ base: 1, md: 4 }} spacing={4}>
        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={statBg}>
          <StatLabel>–í—Å–µ–≥–æ –±–∞–Ω–æ–≤</StatLabel>
          <StatNumber color="red.500">{analytics.totalBans}</StatNumber>
          <StatHelpText>
            <StatArrow type="increase" />
            {analytics.bansToday} —Å–µ–≥–æ–¥–Ω—è
          </StatHelpText>
        </Stat>

        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={statBg}>
          <StatLabel>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</StatLabel>
          <StatNumber color="green.500">{analytics.successRate.toFixed(1)}%</StatNumber>
          <StatHelpText>
            <Progress 
              value={analytics.successRate} 
              colorScheme="green" 
              size="sm" 
              mt={2}
            />
          </StatHelpText>
        </Stat>

        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={statBg}>
          <StatLabel>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</StatLabel>
          <StatNumber color="blue.500">{analytics.averageResponseTime.toFixed(0)}ms</StatNumber>
          <StatHelpText>
            {analytics.averageResponseTime < 1000 ? '–ë—ã—Å—Ç—Ä–æ' : '–ú–µ–¥–ª–µ–Ω–Ω–æ'}
          </StatHelpText>
        </Stat>

        <Stat className="purple-stat-border" p={4} borderRadius="md" bg={statBg}>
          <StatLabel>–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ</StatLabel>
          <StatNumber color="purple.500">{analytics.patterns.length}</StatNumber>
          <StatHelpText>
            {analytics.patterns.filter(p => p.severity === 'critical').length} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö
          </StatHelpText>
        </Stat>
      </SimpleGrid>

      {/* –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã */}
      {analytics.patterns.filter(p => p.severity === 'critical' || p.severity === 'high').length > 0 && (
        <Alert status="error" className="purple-alert-border">
          <AlertIcon />
          <VStack align="start" spacing={2}>
            <AlertTitle>üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã!</AlertTitle>
            <AlertDescription>
              <VStack align="start" spacing={1} fontSize="sm">
                {analytics.patterns
                  .filter(p => p.severity === 'critical' || p.severity === 'high')
                  .slice(0, 3)
                  .map((pattern, index) => (
                    <HStack key={index}>
                      <Badge colorScheme={getSeverityColor(pattern.severity)} size="sm">
                        {pattern.severity.toUpperCase()}
                      </Badge>
                      <Text>{pattern.description}</Text>
                    </HStack>
                  ))}
              </VStack>
            </AlertDescription>
          </VStack>
        </Alert>
      )}

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <Tabs variant="enclosed" colorScheme="purple">
        <TabList className="purple-tab-border">
          <Tab>
            <HStack spacing={2}>
              <FaChartLine />
              <Text>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Text>
            </HStack>
          </Tab>
          <Tab>
            <HStack spacing={2}>
              <FaExclamationTriangle />
              <Text>–ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–∞–Ω–æ–≤</Text>
            </HStack>
          </Tab>
          <Tab>
            <HStack spacing={2}>
              <FaLightbulb />
              <Text>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Text>
            </HStack>
          </Tab>
          <Tab>
            <HStack spacing={2}>
              <FaShieldAlt />
              <Text>–¢–æ–ø URL</Text>
            </HStack>
          </Tab>
        </TabList>

        <TabPanels>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ–≥–∏–æ–Ω–∞–º */}
          <TabPanel p={0} pt={6}>
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              <Card className="purple-card-border" bg={cardBg}>
                <CardHeader>
                  <Heading size="md">üìä –ë–∞–Ω—ã –ø–æ —á–∞—Å–∞–º</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={2} align="stretch">
                    {analytics.bansByHour.map((count, hour) => (
                      <HStack key={hour} justify="space-between">
                        <Text fontSize="sm">{hour}:00</Text>
                        <HStack>
                          <Progress 
                            value={(count / Math.max(...analytics.bansByHour)) * 100} 
                            colorScheme="red" 
                            size="sm" 
                            width="100px"
                          />
                          <Text fontSize="sm" minW="30px">{count}</Text>
                        </HStack>
                      </HStack>
                    ))}
                  </VStack>
                </CardBody>
              </Card>

              <Card className="purple-card-border" bg={cardBg}>
                <CardHeader>
                  <Heading size="md">üåç –ë–∞–Ω—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={2} align="stretch">
                    {Object.entries(analytics.bansByRegion)
                      .sort(([,a], [,b]) => b - a)
                      .slice(0, 10)
                      .map(([region, count]) => (
                        <HStack key={region} justify="space-between">
                          <Text fontSize="sm">{region}</Text>
                          <Badge colorScheme="red">{count}</Badge>
                        </HStack>
                      ))}
                  </VStack>
                </CardBody>
              </Card>
            </SimpleGrid>
          </TabPanel>

          {/* –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±–∞–Ω–æ–≤ */}
          <TabPanel p={0} pt={6}>
            <VStack spacing={4} align="stretch">
              {analytics.patterns.length === 0 ? (
                <Alert status="success" className="purple-alert-border">
                  <AlertIcon />
                  <AlertDescription>
                    –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.
                  </AlertDescription>
                </Alert>
              ) : (
                analytics.patterns.map((pattern, index) => (
                  <Card key={index} className="purple-card-border" bg={cardBg}>
                    <CardBody>
                      <VStack spacing={3} align="stretch">
                        <HStack justify="space-between">
                          <HStack>
                            <Badge colorScheme={getSeverityColor(pattern.severity)} size="lg">
                              {pattern.severity.toUpperCase()}
                            </Badge>
                            <Heading size="sm">{pattern.pattern}</Heading>
                          </HStack>
                          <HStack>
                            <Text fontSize="sm" color="gray.500">
                              –ß–∞—Å—Ç–æ—Ç–∞: {pattern.frequency}
                            </Text>
                            <Text fontSize="sm" color="gray.500">
                              {pattern.lastSeen.toLocaleString('ru-RU')}
                            </Text>
                          </HStack>
                        </HStack>

                        <Text fontSize="sm">{pattern.description}</Text>

                        {pattern.triggers.length > 0 && (
                          <HStack spacing={2}>
                            <Text fontSize="xs" fontWeight="bold">–¢—Ä–∏–≥–≥–µ—Ä—ã:</Text>
                            {pattern.triggers.map((trigger, i) => (
                              <Badge key={i} size="sm" variant="outline">
                                {trigger}
                              </Badge>
                            ))}
                          </HStack>
                        )}

                        {pattern.recommendations.length > 0 && (
                          <VStack align="start" spacing={1}>
                            <Text fontSize="xs" fontWeight="bold" color="green.600">
                              üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                            </Text>
                            {pattern.recommendations.map((rec, i) => (
                              <Text key={i} fontSize="xs" color="green.600">
                                ‚Ä¢ {rec}
                              </Text>
                            ))}
                          </VStack>
                        )}
                      </VStack>
                    </CardBody>
                  </Card>
                ))
              )}
            </VStack>
          </TabPanel>

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          <TabPanel p={0} pt={6}>
            <VStack spacing={4} align="stretch">
              <Alert status="info" className="purple-alert-border">
                <AlertIcon />
                <VStack align="start" spacing={2}>
                  <AlertTitle>üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</AlertTitle>
                  <AlertDescription>
                    <VStack align="start" spacing={1} fontSize="sm">
                      <Text>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–µ User-Agent –¥–ª—è –ª—É—á—à–µ–π –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏</Text>
                      <Text>‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏</Text>
                      <Text>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤ (10:00-18:00 –ú–°–ö)</Text>
                      <Text>‚Ä¢ –†–æ—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∫—Å–∏ –∫–∞–∂–¥—ã–µ 50-100 –∑–∞–ø—Ä–æ—Å–æ–≤</Text>
                      <Text>‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 5-15 —Å–µ–∫—É–Ω–¥</Text>
                      <Text>‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º</Text>
                    </VStack>
                  </AlertDescription>
                </VStack>
              </Alert>

              {/* –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
              {analytics.successRate < 80 && (
                <Alert status="warning" className="purple-alert-border">
                  <AlertIcon />
                  <VStack align="start" spacing={2}>
                    <AlertTitle>‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤</AlertTitle>
                    <AlertDescription>
                      <VStack align="start" spacing={1} fontSize="sm">
                        <Text>–í–∞—à–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å {analytics.successRate.toFixed(1)}% –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö 80%</Text>
                        <Text>‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏</Text>
                        <Text>‚Ä¢ –°–º–µ–Ω–∏—Ç–µ –ø—É–ª –ø—Ä–æ–∫—Å–∏</Text>
                        <Text>‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ User-Agent –±–∞–∑—É</Text>
                      </VStack>
                    </AlertDescription>
                  </VStack>
                </Alert>
              )}

              {analytics.averageResponseTime > 2000 && (
                <Alert status="warning" className="purple-alert-border">
                  <AlertIcon />
                  <VStack align="start" spacing={2}>
                    <AlertTitle>üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</AlertTitle>
                    <AlertDescription>
                      <VStack align="start" spacing={1} fontSize="sm">
                        <Text>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ {analytics.averageResponseTime.toFixed(0)}ms</Text>
                        <Text>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏</Text>
                        <Text>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä—ã</Text>
                        <Text>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤</Text>
                      </VStack>
                    </AlertDescription>
                  </VStack>
                </Alert>
              )}
            </VStack>
          </TabPanel>

          {/* –¢–æ–ø –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö URL */}
          <TabPanel p={0} pt={6}>
            <Card className="purple-card-border" bg={cardBg}>
              <CardHeader>
                <Heading size="md">üéØ –¢–æ–ø –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö URL</Heading>
              </CardHeader>
              <CardBody>
                <TableContainer>
                  <Table size="sm">
                    <Thead>
                      <Tr>
                        <Th>URL</Th>
                        <Th isNumeric>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–æ–≤</Th>
                        <Th>–°—Ç–∞—Ç—É—Å</Th>
                      </Tr>
                    </Thead>
                    <Tbody>
                      {analytics.topBannedUrls.map((item, index) => (
                        <Tr key={index}>
                          <Td>
                            <Tooltip label={item.url}>
                              <Code fontSize="xs">
                                {item.url.length > 50 
                                  ? item.url.substring(0, 47) + '...' 
                                  : item.url
                                }
                              </Code>
                            </Tooltip>
                          </Td>
                          <Td isNumeric>
                            <Badge colorScheme="red">{item.count}</Badge>
                          </Td>
                          <Td>
                            <Badge colorScheme={item.count > 5 ? 'red' : 'yellow'} size="sm">
                              {item.count > 5 ? '–ò–∑–±–µ–≥–∞—Ç—å' : '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ'}
                            </Badge>
                          </Td>
                        </Tr>
                      ))}
                    </Tbody>
                  </Table>
                </TableContainer>
              </CardBody>
            </Card>
          </TabPanel>
        </TabPanels>
      </Tabs>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <HStack spacing={4}>
        <Button
          variant="outline"
          onClick={loadAnalytics}
          className="purple-button-border"
        >
          –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        </Button>

        <Button
          colorScheme="red"
          variant="outline"
          onClick={handleCleanup}
          className="purple-button-border"
        >
          –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        </Button>
      </HStack>
    </VStack>
  );
}
