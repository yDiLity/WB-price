// üìä –î–∞—à–±–æ—Ä–¥ –º–µ—Ç—Ä–∏–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
import React, { useState, useEffect } from 'react'
import {
  Box,
  Grid,
  Card,
  CardBody,
  CardHeader,
  Heading,
  Text,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Progress,
  Badge,
  VStack,
  HStack,
  Icon,
  useColorModeValue,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Spinner,
  Tooltip,
  Button,
  Flex,
  Divider,
  SimpleGrid,
} from '@chakra-ui/react'
import {
  FaUsers,
  FaRocket,
  FaDollarSign,
  FaChartLine,
  FaShieldAlt,
  FaClock,
  FaExclamationTriangle,
  FaCheckCircle,
  FaSync,
  FaDownload,
  FaEye,
  FaServer,
  FaDatabase,
  FaWifi,
  FaBolt,
  FaHeart,
} from 'react-icons/fa'
import { useAnalytics } from '../services/analytics'
import { useAuditLogger } from '../services/auditLogger'
import { rateLimiter } from '../services/rateLimiter'

interface MetricCard {
  title: string
  value: string | number
  change?: number
  icon: any
  color: string
  description?: string
}

const MetricsDashboard: React.FC = () => {
  const [metrics, setMetrics] = useState<any>({})
  const [loading, setLoading] = useState(true)
  const analytics = useAnalytics()
  const auditLogger = useAuditLogger()

  const cardBg = useColorModeValue('white', 'gray.800')
  const borderColor = useColorModeValue('gray.200', 'gray.700')

  useEffect(() => {
    loadMetrics()
    const interval = setInterval(loadMetrics, 30000) // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    return () => clearInterval(interval)
  }, [])

  const loadMetrics = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const userMetrics = analytics.getUserMetrics()
      const businessMetrics = analytics.getBusinessMetrics()
      const auditStats = auditLogger.getAuditStats()
      const rateLimitStats = rateLimiter.getStats()

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –±—ã —Å —Å–µ—Ä–≤–µ—Ä–∞)
      const systemMetrics = await fetchSystemMetrics()

      setMetrics({
        user: userMetrics,
        business: businessMetrics,
        audit: auditStats,
        rateLimit: rateLimitStats,
        system: systemMetrics,
      })

      setLoading(false)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫:', error)
      setLoading(false)
    }
  }

  const fetchSystemMetrics = async (): Promise<any> => {
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    const baseMetrics = {
      uptime: 99.97 + (Math.random() - 0.5) * 0.1,
      responseTime: 245 + Math.floor((Math.random() - 0.5) * 50),
      errorRate: 0.03 + (Math.random() - 0.5) * 0.02,
      activeUsers: 1247 + Math.floor((Math.random() - 0.5) * 100),
      revenue: 127500 + Math.floor((Math.random() - 0.5) * 10000),
      conversions: 89 + Math.floor((Math.random() - 0.5) * 10),
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    return {
      uptime: Math.max(99.5, Math.min(100, baseMetrics.uptime)),
      responseTime: Math.max(100, Math.min(500, baseMetrics.responseTime)),
      errorRate: Math.max(0, Math.min(1, baseMetrics.errorRate)),
      activeUsers: Math.max(1000, baseMetrics.activeUsers),
      revenue: Math.max(100000, baseMetrics.revenue),
      conversions: Math.max(70, Math.min(100, baseMetrics.conversions)),
    }
  }

  // üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const mainMetrics: MetricCard[] = [
    {
      title: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      value: metrics.system?.activeUsers || 0,
      change: 12.5,
      icon: FaUsers,
      color: 'blue',
      description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å',
    },
    {
      title: '–ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞',
      value: `‚ÇΩ${(metrics.system?.revenue || 0).toLocaleString()}`,
      change: 23.1,
      icon: FaDollarSign,
      color: 'green',
      description: 'MRR –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
    },
    {
      title: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
      value: `${metrics.system?.conversions || 0}%`,
      change: 5.7,
      icon: FaRocket,
      color: 'purple',
      description: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–æ–¥–ø–∏—Å–∫—É',
    },
    {
      title: '–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞',
      value: `${metrics.system?.responseTime || 0}ms`,
      change: -8.2,
      icon: FaClock,
      color: 'orange',
      description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API',
    },
  ]

  // üîí –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  const securityMetrics = [
    {
      title: '–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
      value: '–í—ã—Å–æ–∫–∏–π',
      status: 'success',
      description: '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—â–µ–Ω—ã',
    },
    {
      title: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
      value: metrics.rateLimit?.blockedEntries || 0,
      status: 'info',
      description: '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å',
    },
    {
      title: '–°–æ–±—ã—Ç–∏—è –∞—É–¥–∏—Ç–∞',
      value: metrics.audit?.totalEvents || 0,
      status: 'info',
      description: '–ó–∞ —Å–µ–≥–æ–¥–Ω—è',
    },
    {
      title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è',
      value: metrics.audit?.riskDistribution?.CRITICAL || 0,
      status: metrics.audit?.riskDistribution?.CRITICAL > 0 ? 'warning' : 'success',
      description: '–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
    },
  ]

  if (loading) {
    return (
      <Box p={8} textAlign="center">
        <VStack spacing={6}>
          <Box>
            <Spinner size="xl" color="primary.500" thickness="4px" />
          </Box>
          <VStack spacing={2}>
            <Heading size="md" color="primary.600" _dark={{ color: 'primary.300' }}>
              üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫
            </Heading>
            <Text color="gray.500" fontSize="sm">
              –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...
            </Text>
          </VStack>
          <Progress
            size="lg"
            isIndeterminate
            colorScheme="blue"
            w="300px"
            borderRadius="full"
            bg="gray.100"
            _dark={{ bg: 'gray.700' }}
          />
          <HStack spacing={4} fontSize="xs" color="gray.400">
            <HStack>
              <Icon as={FaDatabase} />
              <Text>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</Text>
            </HStack>
            <HStack>
              <Icon as={FaServer} />
              <Text>–°–µ—Ä–≤–µ—Ä</Text>
            </HStack>
            <HStack>
              <Icon as={FaWifi} />
              <Text>API</Text>
            </HStack>
          </HStack>
        </VStack>
      </Box>
    )
  }

  return (
    <Box p={6} maxW="1400px" mx="auto">
      <VStack spacing={6} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Flex justify="space-between" align="center" wrap="wrap" gap={4}>
          <Box>
            <Heading size="lg" mb={2} color="primary.600" _dark={{ color: 'primary.300' }}>
              üìä –î–∞—à–±–æ—Ä–¥ –º–µ—Ç—Ä–∏–∫
            </Heading>
            <Text color="gray.500" fontSize="sm">
              –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            </Text>
          </Box>
          <HStack spacing={3}>
            <Badge colorScheme="green" variant="subtle" px={3} py={1} borderRadius="full">
              <HStack spacing={1}>
                <Icon as={FaHeart} boxSize={3} />
                <Text fontSize="xs">–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</Text>
              </HStack>
            </Badge>
            <Tooltip label="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" hasArrow>
              <Button
                size="sm"
                variant="outline"
                colorScheme="blue"
                leftIcon={<Icon as={FaSync} />}
                onClick={loadMetrics}
                isLoading={loading}
                loadingText="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
              >
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </Tooltip>
          </HStack>
        </Flex>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
        <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>
          {mainMetrics.map((metric, index) => (
            <Card
              key={index}
              bg={cardBg}
              borderColor={borderColor}
              borderWidth="1px"
              transition="all 0.3s ease"
              _hover={{
                transform: 'translateY(-4px)',
                boxShadow: 'xl',
                borderColor: `${metric.color}.300`,
              }}
              cursor="pointer"
            >
              <CardBody>
                <VStack spacing={4} align="stretch">
                  <HStack justify="space-between">
                    <Box
                      p={3}
                      borderRadius="lg"
                      bg={`${metric.color}.50`}
                      _dark={{ bg: `${metric.color}.900` }}
                    >
                      <Icon
                        as={metric.icon}
                        boxSize={6}
                        color={`${metric.color}.500`}
                        _dark={{ color: `${metric.color}.300` }}
                      />
                    </Box>
                    {metric.change && (
                      <Tooltip
                        label={`–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥: ${metric.change > 0 ? '+' : ''}${metric.change}%`}
                        hasArrow
                      >
                        <Badge
                          colorScheme={metric.change > 0 ? 'green' : 'red'}
                          variant="subtle"
                          borderRadius="full"
                          px={2}
                          py={1}
                        >
                          {metric.change > 0 ? '‚Üó' : '‚Üò'} {Math.abs(metric.change)}%
                        </Badge>
                      </Tooltip>
                    )}
                  </HStack>

                  <Box>
                    <Text fontSize="sm" color="gray.500" mb={1}>
                      {metric.title}
                    </Text>
                    <Text fontSize="3xl" fontWeight="bold" color={`${metric.color}.600`} _dark={{ color: `${metric.color}.300` }}>
                      {metric.value}
                    </Text>
                    {metric.description && (
                      <Text fontSize="xs" color="gray.400" mt={1}>
                        {metric.description}
                      </Text>
                    )}
                  </Box>
                </VStack>
              </CardBody>
            </Card>
          ))}
        </SimpleGrid>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
        <Tabs variant="enclosed" colorScheme="blue">
          <TabList>
            <Tab>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</Tab>
            <Tab>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</Tab>
            <Tab>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</Tab>
            <Tab>üß™ A/B –¢–µ—Å—Ç—ã</Tab>
          </TabList>

          <TabPanels>
            {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
            <TabPanel>
              <Grid templateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }} gap={6}>
                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={4} align="stretch">
                      {Object.entries(metrics.business?.features?.usage || {}).map(([feature, count]) => (
                        <Box key={feature}>
                          <HStack justify="space-between" mb={1}>
                            <Text fontSize="sm">{feature}</Text>
                            <Text fontSize="sm" fontWeight="bold">{count as number}</Text>
                          </HStack>
                          <Progress
                            value={(count as number) / 100}
                            colorScheme="blue"
                            size="sm"
                          />
                        </Box>
                      ))}
                    </VStack>
                  </CardBody>
                </Card>

                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={4} align="stretch">
                      <Stat>
                        <StatLabel>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏</StatLabel>
                        <StatNumber>{Math.round((metrics.user?.sessionDuration || 0) / 60000)} –º–∏–Ω</StatNumber>
                      </Stat>
                      <Stat>
                        <StatLabel>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü</StatLabel>
                        <StatNumber>{metrics.user?.pageViews || 0}</StatNumber>
                      </Stat>
                      <Stat>
                        <StatLabel>–°–æ–±—ã—Ç–∏—è</StatLabel>
                        <StatNumber>{metrics.user?.events || 0}</StatNumber>
                      </Stat>
                      <Stat>
                        <StatLabel>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</StatLabel>
                        <StatNumber>{metrics.user?.features?.length || 0}</StatNumber>
                      </Stat>
                    </VStack>
                  </CardBody>
                </Card>
              </Grid>
            </TabPanel>

            {/* –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å */}
            <TabPanel>
              <Grid templateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }} gap={6}>
                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">üõ°Ô∏è –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={4} align="stretch">
                      {securityMetrics.map((metric, index) => (
                        <Alert key={index} status={metric.status as any} borderRadius="md">
                          <AlertIcon />
                          <Box>
                            <AlertTitle fontSize="sm">{metric.title}</AlertTitle>
                            <AlertDescription fontSize="xs">
                              {metric.value} - {metric.description}
                            </AlertDescription>
                          </Box>
                        </Alert>
                      ))}
                    </VStack>
                  </CardBody>
                </Card>

                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∞—É–¥–∏—Ç–∞</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={3} align="stretch" maxH="300px" overflowY="auto">
                      {metrics.audit?.recentEvents?.slice(0, 5).map((event: any, index: number) => (
                        <Box key={index} p={3} borderRadius="md" bg={useColorModeValue('gray.50', 'gray.700')}>
                          <HStack justify="space-between" mb={1}>
                            <Badge colorScheme={
                              event.security.riskLevel === 'CRITICAL' ? 'red' :
                              event.security.riskLevel === 'HIGH' ? 'orange' :
                              event.security.riskLevel === 'MEDIUM' ? 'yellow' : 'green'
                            }>
                              {event.security.riskLevel}
                            </Badge>
                            <Text fontSize="xs" color="gray.500">
                              {new Date(event.timestamp).toLocaleTimeString()}
                            </Text>
                          </HStack>
                          <Text fontSize="sm" fontWeight="semibold">{event.action}</Text>
                          <Text fontSize="xs" color="gray.500">{event.eventType}</Text>
                        </Box>
                      ))}
                    </VStack>
                  </CardBody>
                </Card>
              </Grid>
            </TabPanel>

            {/* –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å */}
            <TabPanel>
              <Grid templateColumns={{ base: '1fr', lg: 'repeat(3, 1fr)' }} gap={6}>
                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={4}>
                      <Box w="100%">
                        <HStack justify="space-between" mb={2}>
                          <Text fontSize="sm">Uptime</Text>
                          <Text fontSize="sm" fontWeight="bold">{metrics.system?.uptime}%</Text>
                        </HStack>
                        <Progress value={metrics.system?.uptime} colorScheme="green" />
                      </Box>

                      <Box w="100%">
                        <HStack justify="space-between" mb={2}>
                          <Text fontSize="sm">–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞</Text>
                          <Text fontSize="sm" fontWeight="bold">{metrics.system?.responseTime}ms</Text>
                        </HStack>
                        <Progress
                          value={Math.max(0, 100 - (metrics.system?.responseTime / 10))}
                          colorScheme="blue"
                        />
                      </Box>

                      <Box w="100%">
                        <HStack justify="space-between" mb={2}>
                          <Text fontSize="sm">–£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫</Text>
                          <Text fontSize="sm" fontWeight="bold">{metrics.system?.errorRate}%</Text>
                        </HStack>
                        <Progress
                          value={metrics.system?.errorRate * 10}
                          colorScheme="red"
                        />
                      </Box>
                    </VStack>
                  </CardBody>
                </Card>

                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">üö¶ Rate Limiting</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={3} align="stretch">
                      <Stat>
                        <StatLabel>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</StatLabel>
                        <StatNumber>{metrics.rateLimit?.totalEntries || 0}</StatNumber>
                      </Stat>
                      <Stat>
                        <StatLabel>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</StatLabel>
                        <StatNumber color="red.500">{metrics.rateLimit?.blockedEntries || 0}</StatNumber>
                      </Stat>
                      <Box>
                        <Text fontSize="sm" mb={2}>–¢–æ–ø –Ω–∞—Ä—É—à–∏—Ç–µ–ª–∏:</Text>
                        <VStack spacing={1} align="stretch">
                          {metrics.rateLimit?.topViolators?.slice(0, 3).map((violator: any, index: number) => (
                            <HStack key={index} justify="space-between" fontSize="xs">
                              <Text isTruncated maxW="150px">{violator.key}</Text>
                              <Badge size="sm">{violator.count}</Badge>
                            </HStack>
                          ))}
                        </VStack>
                      </Box>
                    </VStack>
                  </CardBody>
                </Card>

                <Card bg={cardBg}>
                  <CardHeader>
                    <Heading size="md">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={3} align="stretch">
                      {Object.entries(metrics.audit?.eventsByType || {}).map(([type, count]) => (
                        <HStack key={type} justify="space-between">
                          <Text fontSize="sm">{type}</Text>
                          <Badge>{count as number}</Badge>
                        </HStack>
                      ))}
                    </VStack>
                  </CardBody>
                </Card>
              </Grid>
            </TabPanel>

            {/* A/B –¢–µ—Å—Ç—ã */}
            <TabPanel>
              <Card bg={cardBg}>
                <CardHeader>
                  <Heading size="md">üß™ –ê–∫—Ç–∏–≤–Ω—ã–µ A/B —Ç–µ—Å—Ç—ã</Heading>
                </CardHeader>
                <CardBody>
                  <Text color="gray.500" textAlign="center" py={8}>
                    A/B —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                  </Text>
                </CardBody>
              </Card>
            </TabPanel>
          </TabPanels>
        </Tabs>
      </VStack>
    </Box>
  )
}

export default MetricsDashboard
