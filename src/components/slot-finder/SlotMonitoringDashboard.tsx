import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  Grid,
  Card,
  CardHeader,
  CardBody,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatArrow,
  Badge,
  Button,
  HStack,
  VStack,
  Text,
  useColorModeValue,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Spinner,
  useToast,
} from '@chakra-ui/react';
import { FiActivity, FiTruck, FiClock, FiTrendingUp, FiAlertTriangle, FiSettings } from 'react-icons/fi';
import { slotService } from '../../services/slotService';
import { SlotStatistics, SlotAlert } from '../../types/slot';

export const SlotMonitoringDashboard: React.FC = () => {
  const [statistics, setStatistics] = useState<SlotStatistics | null>(null);
  const [alerts, setAlerts] = useState<SlotAlert[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isMonitoring, setIsMonitoring] = useState(false);
  const toast = useToast();

  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');

  useEffect(() => {
    loadData();
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(loadData, 30000);
    return () => clearInterval(interval);
  }, []);

  const loadData = async () => {
    try {
      const [statsData, alertsData] = await Promise.all([
        slotService.getStatistics(),
        slotService.getAlerts(),
      ]);
      setStatistics(statsData);
      setAlerts(alertsData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const toggleMonitoring = () => {
    setIsMonitoring(!isMonitoring);
    toast({
      title: isMonitoring ? '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω',
      description: isMonitoring 
        ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–ª–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω' 
        : '–°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤',
      status: isMonitoring ? 'warning' : 'success',
      duration: 3000,
      isClosable: true,
    });
  };

  const handleAlertAction = async (alert: SlotAlert) => {
    await slotService.markAlertAsRead(alert.id);
    setAlerts(alerts.filter(a => a.id !== alert.id));
    
    if (alert.actionUrl) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–ª–æ—Ç—É
      toast({
        title: '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–æ—Ç—É',
        description: '–û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–ª–æ—Ç–∞...',
        status: 'info',
        duration: 2000,
        isClosable: true,
      });
    }
  };

  if (isLoading) {
    return (
      <Container maxW="7xl" py={8}>
        <VStack spacing={4}>
          <Spinner size="xl" />
          <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</Text>
        </VStack>
      </Container>
    );
  }

  return (
    <Container maxW="7xl" py={8}>
      <VStack spacing={8} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <HStack justify="space-between" align="center">
          <VStack align="start" spacing={1}>
            <Heading size="lg">üöö –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫</Heading>
            <Text color="gray.500">
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
            </Text>
          </VStack>
          <HStack>
            <Button
              leftIcon={<FiSettings />}
              variant="outline"
              size="sm"
            >
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
            <Button
              leftIcon={<FiActivity />}
              colorScheme={isMonitoring ? 'red' : 'green'}
              onClick={toggleMonitoring}
              size="sm"
            >
              {isMonitoring ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'} –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            </Button>
          </HStack>
        </HStack>

        {/* –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
        {isMonitoring && (
          <Alert status="success" borderRadius="md">
            <AlertIcon />
            <Box>
              <AlertTitle>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!</AlertTitle>
              <AlertDescription>
                –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç. 
                –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleTimeString('ru-RU')}
              </AlertDescription>
            </Box>
          </Alert>
        )}

        {/* –ê–ª–µ—Ä—Ç—ã */}
        {alerts.length > 0 && (
          <VStack spacing={3} align="stretch">
            <Heading size="md">üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Heading>
            {alerts.map((alert) => (
              <Alert
                key={alert.id}
                status={alert.priority === 'critical' ? 'error' : alert.priority === 'high' ? 'warning' : 'info'}
                borderRadius="md"
              >
                <AlertIcon />
                <Box flex="1">
                  <AlertTitle>{alert.title}</AlertTitle>
                  <AlertDescription>{alert.message}</AlertDescription>
                </Box>
                {alert.actionRequired && (
                  <Button
                    size="sm"
                    colorScheme={alert.priority === 'critical' ? 'red' : 'blue'}
                    onClick={() => handleAlertAction(alert)}
                  >
                    –î–µ–π—Å—Ç–≤–∏–µ
                  </Button>
                )}
              </Alert>
            ))}
          </VStack>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Grid templateColumns={{ base: '1fr', md: 'repeat(2, 1fr)', lg: 'repeat(4, 1fr)' }} gap={6}>
          <Card bg={bgColor} borderColor={borderColor}>
            <CardBody>
              <Stat>
                <StatLabel>–í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤</StatLabel>
                <StatNumber>{statistics?.totalSlots || 0}</StatNumber>
                <StatHelpText>
                  <StatArrow type="increase" />
                  +12% –∑–∞ –Ω–µ–¥–µ–ª—é
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card bg={bgColor} borderColor={borderColor}>
            <CardBody>
              <Stat>
                <StatLabel>–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å</StatLabel>
                <StatNumber color="green.500">{statistics?.availableSlots || 0}</StatNumber>
                <StatHelpText>
                  <FiTruck style={{ display: 'inline', marginRight: '4px' }} />
                  –ì–æ—Ç–æ–≤—ã –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card bg={bgColor} borderColor={borderColor}>
            <CardBody>
              <Stat>
                <StatLabel>AI-—Ä–µ–π—Ç–∏–Ω–≥</StatLabel>
                <StatNumber>{statistics?.averageAiRating || 0}%</StatNumber>
                <StatHelpText>
                  <FiTrendingUp style={{ display: 'inline', marginRight: '4px' }} />
                  –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>

          <Card bg={bgColor} borderColor={borderColor}>
            <CardBody>
              <Stat>
                <StatLabel>–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</StatLabel>
                <StatNumber>{statistics?.averageCost || 0} ‚ÇΩ</StatNumber>
                <StatHelpText>
                  <StatArrow type="decrease" />
                  -5% –∑–∞ –¥–µ–Ω—å
                </StatHelpText>
              </Stat>
            </CardBody>
          </Card>
        </Grid>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Tabs variant="enclosed">
          <TabList>
            <Tab>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</Tab>
            <Tab>üè≠ –°–∫–ª–∞–¥—ã</Tab>
            <Tab>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Tab>
          </TabList>

          <TabPanels>
            {/* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
            <TabPanel>
              <Grid templateColumns={{ base: '1fr', lg: 'repeat(2, 1fr)' }} gap={6}>
                <Card>
                  <CardHeader>
                    <Heading size="md">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={4} align="stretch">
                      <HStack justify="space-between">
                        <Text>FBS (Fulfillment by Seller)</Text>
                        <Badge colorScheme="blue">{statistics?.slotsByType.FBS || 0}</Badge>
                      </HStack>
                      <HStack justify="space-between">
                        <Text>FBO (Fulfillment by Ozon)</Text>
                        <Badge colorScheme="purple">{statistics?.slotsByType.FBO || 0}</Badge>
                      </HStack>
                    </VStack>
                  </CardBody>
                </Card>

                <Card>
                  <CardHeader>
                    <Heading size="md">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–ª–æ—Ç–æ–≤</Heading>
                  </CardHeader>
                  <CardBody>
                    <VStack spacing={4} align="stretch">
                      <HStack justify="space-between">
                        <Text>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ</Text>
                        <Badge colorScheme="red">{statistics?.slotsByPriority.critical || 0}</Badge>
                      </HStack>
                      <HStack justify="space-between">
                        <Text>–í—ã—Å–æ–∫–∏–µ</Text>
                        <Badge colorScheme="orange">{statistics?.slotsByPriority.high || 0}</Badge>
                      </HStack>
                      <HStack justify="space-between">
                        <Text>–°—Ä–µ–¥–Ω–∏–µ</Text>
                        <Badge colorScheme="yellow">{statistics?.slotsByPriority.medium || 0}</Badge>
                      </HStack>
                      <HStack justify="space-between">
                        <Text>–ù–∏–∑–∫–∏–µ</Text>
                        <Badge colorScheme="green">{statistics?.slotsByPriority.low || 0}</Badge>
                      </HStack>
                    </VStack>
                  </CardBody>
                </Card>
              </Grid>
            </TabPanel>

            {/* –°–∫–ª–∞–¥—ã */}
            <TabPanel>
              <Card>
                <CardHeader>
                  <Heading size="md">–¢–æ–ø —Å–∫–ª–∞–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ—Ç–æ–≤</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    {statistics?.topWarehouses.map((warehouse, index) => (
                      <HStack key={warehouse.id} justify="space-between" p={3} bg={bgColor} borderRadius="md">
                        <HStack>
                          <Badge colorScheme="blue">{index + 1}</Badge>
                          <Text fontWeight="medium">{warehouse.name}</Text>
                        </HStack>
                        <HStack>
                          <Text fontSize="sm" color="gray.500">{warehouse.slotsCount} —Å–ª–æ—Ç–æ–≤</Text>
                          <Badge colorScheme="green">{warehouse.averageRating}% AI</Badge>
                        </HStack>
                      </HStack>
                    ))}
                  </VStack>
                </CardBody>
              </Card>
            </TabPanel>

            {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
            <TabPanel>
              <Card>
                <CardHeader>
                  <Heading size="md">–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    {statistics?.recentActivity.map((activity, index) => (
                      <HStack key={index} p={3} bg={bgColor} borderRadius="md">
                        <FiClock />
                        <VStack align="start" spacing={1} flex={1}>
                          <Text fontSize="sm" fontWeight="medium">{activity.description}</Text>
                          <Text fontSize="xs" color="gray.500">
                            {new Date(activity.timestamp).toLocaleString('ru-RU')}
                          </Text>
                        </VStack>
                        <Badge
                          colorScheme={
                            activity.type === 'slot_found' ? 'green' :
                            activity.type === 'slot_booked' ? 'blue' : 'red'
                          }
                        >
                          {activity.type === 'slot_found' ? '–ù–∞–π–¥–µ–Ω' :
                           activity.type === 'slot_booked' ? '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω' : '–û—Ç–º–µ–Ω–µ–Ω'}
                        </Badge>
                      </HStack>
                    ))}
                  </VStack>
                </CardBody>
              </Card>
            </TabPanel>
          </TabPanels>
        </Tabs>
      </VStack>
    </Container>
  );
};
