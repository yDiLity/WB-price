import { useState } from 'react';
import {
  Box,
  SimpleGrid,
  Card,
  CardBody,
  CardHeader,
  CardFooter,
  Heading,
  Text,
  Button,
  Badge,
  useColorModeValue,
  Flex,
  Icon,
  Tooltip
} from '@chakra-ui/react';
import { InfoIcon, CheckCircleIcon } from '@chakra-ui/icons';
import { StrategyTemplate, StrategyType } from '../../types/strategy';

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º FontAwesome –∏–∫–æ–Ω–∫–∏)
const strategyTypeIcons = {
  [StrategyType.COMPETITOR_BASED]: 'üë•',
  [StrategyType.MARGIN_BASED]: 'üí∞',
  [StrategyType.MARKET_POSITION]: 'üìä',
  [StrategyType.TIME_BASED]: '‚è±Ô∏è',
  [StrategyType.STOCK_BASED]: 'üì¶',
  [StrategyType.CUSTOM]: '‚öôÔ∏è'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
const strategyTypeColors = {
  [StrategyType.COMPETITOR_BASED]: 'blue',
  [StrategyType.MARGIN_BASED]: 'green',
  [StrategyType.MARKET_POSITION]: 'purple',
  [StrategyType.TIME_BASED]: 'orange',
  [StrategyType.STOCK_BASED]: 'teal',
  [StrategyType.CUSTOM]: 'pink'
};

// –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º
const strategyTypeNames = {
  [StrategyType.COMPETITOR_BASED]: '–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
  [StrategyType.MARGIN_BASED]: '–ù–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∂–∏',
  [StrategyType.MARKET_POSITION]: '–ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ',
  [StrategyType.TIME_BASED]: '–ü–æ –≤—Ä–µ–º–µ–Ω–∏',
  [StrategyType.STOCK_BASED]: '–ü–æ –æ—Å—Ç–∞—Ç–∫–∞–º',
  [StrategyType.CUSTOM]: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'
};

interface StrategyTemplateSelectorProps {
  templates: StrategyTemplate[];
  onSelectTemplate: (template: StrategyTemplate) => void;
}

export default function StrategyTemplateSelector({
  templates,
  onSelectTemplate
}: StrategyTemplateSelectorProps) {
  const [selectedTemplateId, setSelectedTemplateId] = useState<string | null>(null);

  // –¶–≤–µ—Ç–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π/—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  const cardBg = useColorModeValue('white', 'gray.700');
  const cardBorderColor = useColorModeValue('gray.200', 'gray.600');
  const selectedCardBg = useColorModeValue('blue.50', 'blue.900');
  const selectedCardBorderColor = useColorModeValue('blue.300', 'blue.500');
  const badgeBg = useColorModeValue('gray.100', 'gray.600');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
  const handleSelectTemplate = (template: StrategyTemplate) => {
    setSelectedTemplateId(template.id);
    onSelectTemplate(template);
  };

  return (
    <Box>
      <Flex
        direction="column"
        align="center"
        mb={8}
        p={6}
        bg={useColorModeValue('blue.50', 'blue.900')}
        borderRadius="lg"
        boxShadow="sm"
      >
        <Heading size="lg" mb={2} textAlign="center">–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</Heading>
        <Text
          fontSize="md"
          color={useColorModeValue('gray.600', 'gray.300')}
          textAlign="center"
          maxW="700px"
        >
          –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å –Ω—É–ª—è.
          –ö–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.
        </Text>
      </Flex>

      <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
        {templates.map((template) => (
          <Card
            key={template.id}
            bg={selectedTemplateId === template.id ? `${strategyTypeColors[template.type]}.50` : cardBg}
            borderWidth="2px"
            borderColor={selectedTemplateId === template.id
              ? `${strategyTypeColors[template.type]}.400`
              : cardBorderColor}
            borderRadius="xl"
            overflow="hidden"
            boxShadow={selectedTemplateId === template.id ? 'md' : 'sm'}
            transition="all 0.3s ease"
            _hover={{
              transform: 'translateY(-4px)',
              boxShadow: 'lg',
              borderColor: `${strategyTypeColors[template.type]}.400`
            }}
            onClick={() => handleSelectTemplate(template)}
            cursor="pointer"
            position="relative"
          >
            {/* –¶–≤–µ—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Å–≤–µ—Ä—Ö—É –∫–∞—Ä—Ç–æ—á–∫–∏ */}
            <Box
              position="absolute"
              top="0"
              left="0"
              right="0"
              height="6px"
              bg={`${strategyTypeColors[template.type]}.500`}
            />

            <CardHeader pb={2} pt={4}>
              <Flex justify="space-between" align="center">
                <Heading size="md">
                  <Flex align="center">
                    <Box
                      mr={3}
                      fontSize="xl"
                      bg={`${strategyTypeColors[template.type]}.100`}
                      color={`${strategyTypeColors[template.type]}.700`}
                      p={2}
                      borderRadius="md"
                    >
                      {strategyTypeIcons[template.type]}
                    </Box>
                    {template.name}
                  </Flex>
                </Heading>
                <Badge
                  colorScheme={strategyTypeColors[template.type]}
                  fontSize="xs"
                  px={2}
                  py={1}
                  borderRadius="full"
                  fontWeight="medium"
                >
                  {strategyTypeNames[template.type]}
                </Badge>
              </Flex>
            </CardHeader>

            <CardBody py={3}>
              <Text
                fontSize="sm"
                color={useColorModeValue('gray.600', 'gray.300')}
                minHeight="60px"
              >
                {template.description}
              </Text>
            </CardBody>

            <CardFooter
              pt={2}
              justifyContent="space-between"
              alignItems="center"
              borderTopWidth="1px"
              borderTopColor={useColorModeValue('gray.100', 'gray.700')}
              bg={useColorModeValue('gray.50', 'gray.800')}
            >
              <Button
                size="sm"
                colorScheme={strategyTypeColors[template.type]}
                variant={selectedTemplateId === template.id ? 'solid' : 'outline'}
                leftIcon={selectedTemplateId === template.id ? <CheckCircleIcon /> : undefined}
                fontWeight="medium"
              >
                {selectedTemplateId === template.id ? '–í—ã–±—Ä–∞–Ω–æ' : '–í—ã–±—Ä–∞—Ç—å'}
              </Button>

              <Tooltip label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏">
                <Flex
                  align="center"
                  bg={useColorModeValue(`${strategyTypeColors[template.type]}.50`, `${strategyTypeColors[template.type]}.900`)}
                  px={2}
                  py={1}
                  borderRadius="md"
                >
                  <InfoIcon
                    mr={1}
                    boxSize={3}
                    color={useColorModeValue(`${strategyTypeColors[template.type]}.600`, `${strategyTypeColors[template.type]}.200`)}
                  />
                  <Text
                    fontSize="xs"
                    fontWeight="medium"
                    color={useColorModeValue(`${strategyTypeColors[template.type]}.600`, `${strategyTypeColors[template.type]}.200`)}
                  >
                    {template.configurationFields.length} {template.configurationFields.length === 1 ? '–ø–∞—Ä–∞–º–µ—Ç—Ä' :
                     template.configurationFields.length > 1 && template.configurationFields.length < 5 ? '–ø–∞—Ä–∞–º–µ—Ç—Ä–∞' : '–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'}
                  </Text>
                </Flex>
              </Tooltip>
            </CardFooter>
          </Card>
        ))}
      </SimpleGrid>
    </Box>
  );
}
