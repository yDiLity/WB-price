import React, { useState } from 'react';
import {
  Box,
  VStack,
  HStack,
  Text,
  Button,
  Card,
  CardHeader,
  CardBody,
  Heading,
  Badge,
  Input,
  NumberInput,
  NumberInputField,
  Select,
  useToast,
  Divider,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Code,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText
} from '@chakra-ui/react';
import { FiPlay, FiRefreshCw, FiDatabase, FiTrendingUp } from 'react-icons/fi';
import { useTrackedProductsSync } from '../../services/trackedProductsService';

const ExcelSyncDemo: React.FC = () => {
  const toast = useToast();
  const { notifyCompetitorLinked, notifyPriceChanged, notifyStrategyApplied } = useTrackedProductsSync();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ–º–æ
  const [selectedProductId, setSelectedProductId] = useState('product-1');
  const [competitorName, setCompetitorName] = useState('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –î–µ–º–æ');
  const [competitorPrice, setCompetitorPrice] = useState(1500);
  const [newPrice, setNewPrice] = useState(1450);
  const [oldPrice, setOldPrice] = useState(1500);

  // –î–µ–º–æ —Ç–æ–≤–∞—Ä—ã
  const demoProducts = [
    { id: 'product-1', name: 'iPhone 15 Pro 128GB' },
    { id: 'product-2', name: 'Samsung Galaxy S24' },
    { id: 'product-3', name: 'MacBook Air M3' }
  ];

  // –î–µ–º–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
  const handleAddCompetitorDemo = () => {
    notifyCompetitorLinked(
      selectedProductId,
      {
        id: `demo-comp-${Date.now()}`,
        name: competitorName,
        price: competitorPrice,
        url: 'https://example.com/competitor'
      },
      'ExcelSyncDemo'
    );

    toast({
      title: 'üéØ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!',
      description: `–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Excel-—Ç–∞–±–ª–∏—Ü—É`,
      status: 'success',
      duration: 4000,
      isClosable: true,
    });
  };

  // –î–µ–º–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
  const handlePriceChangeDemo = () => {
    notifyPriceChanged(
      selectedProductId,
      oldPrice,
      newPrice,
      '–î–µ–º–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã',
      'ExcelSyncDemo'
    );

    toast({
      title: 'üí∞ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!',
      description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∞–∂–µ–Ω–æ –≤ Excel-—Ç–∞–±–ª–∏—Ü–µ`,
      status: 'success',
      duration: 4000,
      isClosable: true,
    });
  };

  // –î–µ–º–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const handleStrategyDemo = () => {
    notifyStrategyApplied(
      selectedProductId,
      {
        strategy: {
          id: 'demo-strategy',
          name: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
          type: 'undercut_by_percent',
          parameters: { percentReduction: 5 }
        },
        competitorsCount: 3,
        estimatedPrice: newPrice
      },
      'ExcelSyncDemo'
    );

    toast({
      title: '‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!',
      description: `–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Excel-—Ç–∞–±–ª–∏—Ü–µ`,
      status: 'success',
      duration: 4000,
      isClosable: true,
    });
  };

  return (
    <Box p={6} maxW="1200px" mx="auto">
      <VStack spacing={6} align="stretch">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Card>
          <CardHeader>
            <HStack>
              <FiDatabase size={24} />
              <Heading size="lg">üîÑ –î–µ–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Excel-—Ç–∞–±–ª–∏—Ü–µ–π</Heading>
            </HStack>
          </CardHeader>
          <CardBody>
            <Alert status="info" borderRadius="md">
              <AlertIcon />
              <Box>
                <AlertTitle>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è!</AlertTitle>
                <AlertDescription>
                  –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ Excel-—Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
                  –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "üìä –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
                </AlertDescription>
              </Box>
            </Alert>
          </CardBody>
        </Card>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
          <Stat>
            <StatLabel>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</StatLabel>
            <StatNumber>12</StatNumber>
            <StatHelpText>–≤ Excel-—Ç–∞–±–ª–∏—Ü–µ</StatHelpText>
          </Stat>
          <Stat>
            <StatLabel>–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</StatLabel>
            <StatNumber>47</StatNumber>
            <StatHelpText>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è</StatHelpText>
          </Stat>
          <Stat>
            <StatLabel>–ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω</StatLabel>
            <StatNumber>156</StatNumber>
            <StatHelpText>–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</StatHelpText>
          </Stat>
        </SimpleGrid>

        {/* –î–µ–º–æ –¥–µ–π—Å—Ç–≤–∏—è */}
        <SimpleGrid columns={{ base: 1, lg: 3 }} spacing={6}>
          {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ */}
          <Card>
            <CardHeader>
              <Heading size="md">1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4}>
                <Select
                  value={selectedProductId}
                  onChange={(e) => setSelectedProductId(e.target.value)}
                >
                  {demoProducts.map(product => (
                    <option key={product.id} value={product.id}>
                      {product.name}
                    </option>
                  ))}
                </Select>

                <Input
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"
                  value={competitorName}
                  onChange={(e) => setCompetitorName(e.target.value)}
                />

                <NumberInput
                  value={competitorPrice}
                  onChange={(_, value) => setCompetitorPrice(value)}
                  min={0}
                >
                  <NumberInputField placeholder="–¶–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞" />
                </NumberInput>

                <Button
                  leftIcon={<FiPlay />}
                  colorScheme="blue"
                  onClick={handleAddCompetitorDemo}
                  width="full"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
                </Button>

                <Code fontSize="xs" p={2} borderRadius="md" width="full">
                  notifyCompetitorLinked(productId, competitor)
                </Code>
              </VStack>
            </CardBody>
          </Card>

          {/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã */}
          <Card>
            <CardHeader>
              <Heading size="md">2Ô∏è‚É£ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4}>
                <NumberInput
                  value={oldPrice}
                  onChange={(_, value) => setOldPrice(value)}
                  min={0}
                >
                  <NumberInputField placeholder="–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞" />
                </NumberInput>

                <NumberInput
                  value={newPrice}
                  onChange={(_, value) => setNewPrice(value)}
                  min={0}
                >
                  <NumberInputField placeholder="–ù–æ–≤–∞—è —Ü–µ–Ω–∞" />
                </NumberInput>

                <HStack width="full">
                  <Text fontSize="sm">–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</Text>
                  <Badge
                    colorScheme={newPrice > oldPrice ? 'red' : 'green'}
                  >
                    {newPrice > oldPrice ? '+' : ''}{newPrice - oldPrice} ‚ÇΩ
                  </Badge>
                </HStack>

                <Button
                  leftIcon={<FiTrendingUp />}
                  colorScheme="green"
                  onClick={handlePriceChangeDemo}
                  width="full"
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É
                </Button>

                <Code fontSize="xs" p={2} borderRadius="md" width="full">
                  notifyPriceChanged(productId, oldPrice, newPrice)
                </Code>
              </VStack>
            </CardBody>
          </Card>

          {/* –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ */}
          <Card>
            <CardHeader>
              <Heading size="md">3Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é</Heading>
            </CardHeader>
            <CardBody>
              <VStack spacing={4}>
                <Alert status="warning" size="sm" borderRadius="md">
                  <AlertIcon />
                  <Text fontSize="sm">
                    –°—Ç—Ä–∞—Ç–µ–≥–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
                  </Text>
                </Alert>

                <Box p={3} bg="gray.50" borderRadius="md" width="full">
                  <Text fontSize="sm" fontWeight="bold">–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è</Text>
                  <Text fontSize="xs" color="gray.600">
                    –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞ 5% –æ—Ç —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                  </Text>
                </Box>

                <HStack width="full">
                  <Text fontSize="sm">–†–∞—Å—á–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞:</Text>
                  <Badge colorScheme="purple">
                    {newPrice.toLocaleString()} ‚ÇΩ
                  </Badge>
                </HStack>

                <Button
                  leftIcon={<FiRefreshCw />}
                  colorScheme="purple"
                  onClick={handleStrategyDemo}
                  width="full"
                >
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                </Button>

                <Code fontSize="xs" p={2} borderRadius="md" width="full">
                  notifyStrategyApplied(productId, strategy)
                </Code>
              </VStack>
            </CardBody>
          </Card>
        </SimpleGrid>

        <Divider />

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <Card>
          <CardHeader>
            <Heading size="md">üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</Heading>
          </CardHeader>
          <CardBody>
            <VStack spacing={3} align="start">
              <Text>
                <strong>1.</strong> –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ª—é–±–æ–µ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –≤—ã—à–µ
              </Text>
              <Text>
                <strong>2.</strong> –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "üìä –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
              </Text>
              <Text>
                <strong>3.</strong> –£–≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
              </Text>
              <Text>
                <strong>4.</strong> –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª
              </Text>
              
              <Alert status="success" mt={4}>
                <AlertIcon />
                <Box>
                  <AlertTitle>–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!</AlertTitle>
                  <AlertDescription>
                    –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
                  </AlertDescription>
                </Box>
              </Alert>
            </VStack>
          </CardBody>
        </Card>
      </VStack>
    </Box>
  );
};

export default ExcelSyncDemo;
