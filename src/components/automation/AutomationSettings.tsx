import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardHeader,
  CardBody,
  Heading,
  VStack,
  HStack,
  Text,
  Switch,
  FormControl,
  FormLabel,
  FormHelperText,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Select,
  Button,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Badge,
  Divider,
  useToast,
  useColorModeValue,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  SimpleGrid,
  Input,
  InputGroup,
  InputRightElement,
  IconButton,
} from '@chakra-ui/react';
import { FiSettings, FiShield, FiClock, FiZap, FiEye, FiEyeOff } from 'react-icons/fi';
import { automationService } from '../../services/automationService';
import { AutomationSettings as AutomationSettingsType, MONITORING_INTERVALS } from '../../types/automation';

interface AutomationSettingsProps {
  productId: string;
  productTitle: string;
  currentPrice: number;
  onSettingsChange?: (settings: AutomationSettingsType) => void;
}

export const AutomationSettings: React.FC<AutomationSettingsProps> = ({
  productId,
  productTitle,
  currentPrice,
  onSettingsChange,
}) => {
  const [settings, setSettings] = useState<AutomationSettingsType | null>(null);
  const [showApiKeys, setShowApiKeys] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [clientId, setClientId] = useState('');
  const toast = useToast();

  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const textColor = useColorModeValue('gray.700', 'white');
  const helperTextColor = useColorModeValue('gray.500', 'gray.200');

  useEffect(() => {
    loadSettings();
  }, [productId]);

  const loadSettings = () => {
    const currentSettings = automationService.getAutomationSettings(productId);
    setSettings(currentSettings);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏
    const savedApiKey = localStorage.getItem('ozonApiKey') || '';
    const savedClientId = localStorage.getItem('ozonClientId') || '';
    setApiKey(savedApiKey);
    setClientId(savedClientId);
  };

  const updateSettings = (updates: Partial<AutomationSettingsType>) => {
    if (!settings) return;

    const updatedSettings = automationService.updateAutomationSettings(productId, updates);
    setSettings(updatedSettings);

    if (onSettingsChange) {
      onSettingsChange(updatedSettings);
    }

    toast({
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É',
      status: 'success',
      duration: 2000,
      isClosable: true,
    });
  };

  const handleOzonAutoUpdateToggle = (enabled: boolean) => {
    automationService.toggleOzonAutoUpdate(productId, enabled);
    loadSettings();

    toast({
      title: enabled ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
      description: enabled
        ? '–¶–µ–Ω—ã –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –Ω–∞ Ozon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        : '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –ø–æ—Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      status: enabled ? 'success' : 'warning',
      duration: 3000,
      isClosable: true,
    });
  };

  const handleApiKeysUpdate = () => {
    automationService.setOzonApiKeys(apiKey, clientId);
    toast({
      title: 'API –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon API –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ',
      status: 'success',
      duration: 2000,
      isClosable: true,
    });
  };

  const monitoringStatus = automationService.getMonitoringStatus();
  const ozonApiStatus = automationService.getOzonApiStatus();

  if (!settings) {
    return <Box>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</Box>;
  }

  return (
    <VStack spacing={6} align="stretch">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card bg={bgColor} borderColor={borderColor}>
        <CardHeader>
          <HStack>
            <FiSettings />
            <Heading size="md">‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è "{productTitle}"</Heading>
          </HStack>
        </CardHeader>
      </Card>

      {/* –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ */}
      <Card bg={bgColor} borderColor={borderColor}>
        <CardHeader>
          <HStack justify="space-between">
            <Heading size="sm">üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</Heading>
            <Badge colorScheme="green">24/7 –ê–∫—Ç–∏–≤–µ–Ω</Badge>
          </HStack>
        </CardHeader>
        <CardBody>
          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={4}>
            <Stat>
              <StatLabel>–ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è</StatLabel>
              <StatNumber>{monitoringStatus.checksToday}</StatNumber>
              <StatHelpText>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫</StatHelpText>
            </Stat>
            <Stat>
              <StatLabel>–ò–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è</StatLabel>
              <StatNumber color="green.500">{monitoringStatus.successfulChangesToday}</StatNumber>
              <StatHelpText>–£—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</StatHelpText>
            </Stat>
            <Stat>
              <StatLabel>–û—à–∏–±–æ–∫ —Å–µ–≥–æ–¥–Ω—è</StatLabel>
              <StatNumber color="red.500">{monitoringStatus.errorsToday}</StatNumber>
              <StatHelpText>–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫</StatHelpText>
            </Stat>
          </SimpleGrid>
        </CardBody>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Card bg={bgColor} borderColor={borderColor}>
        <CardHeader>
          <HStack>
            <FiZap />
            <Heading size="sm">üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ Ozon</Heading>
          </HStack>
        </CardHeader>
        <CardBody>
          <VStack spacing={6} align="stretch">
            {/* –ì–ª–∞–≤–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ */}
            <Alert status={settings.ozonAutoUpdate ? 'success' : 'warning'} borderRadius="md">
              <AlertIcon />
              <Box flex="1">
                <AlertTitle fontSize="sm">
                  {settings.ozonAutoUpdate ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ' : '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'}
                </AlertTitle>
                <AlertDescription fontSize="xs">
                  {settings.ozonAutoUpdate
                    ? '–¶–µ–Ω—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ Ozon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                    : '–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                  }
                </AlertDescription>
              </Box>
            </Alert>

            <FormControl display="flex" alignItems="center">
              <FormLabel htmlFor="ozon-auto-update" mb="0" flex="1">
                <VStack align="start" spacing={1}>
                  <Text fontWeight="semibold" color={textColor}>–ò–∑–º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã –Ω–∞ Ozon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</Text>
                  <Text fontSize="sm" color={helperTextColor}>
                    –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –±–µ–∑ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∏—è
                  </Text>
                </VStack>
              </FormLabel>
              <Switch
                id="ozon-auto-update"
                size="lg"
                isChecked={settings.ozonAutoUpdate}
                onChange={(e) => handleOzonAutoUpdateToggle(e.target.checked)}
                colorScheme="green"
              />
            </FormControl>

            {settings.ozonAutoUpdate && (
              <Alert status="info" borderRadius="md">
                <AlertIcon />
                <AlertDescription fontSize="sm">
                  <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã
                  –Ω–∞ Ozon –±–µ–∑ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
                </AlertDescription>
              </Alert>
            )}
          </VStack>
        </CardBody>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
      <Card bg={bgColor} borderColor={borderColor}>
        <CardHeader>
          <HStack>
            <FiShield />
            <Heading size="sm">üõ°Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</Heading>
          </HStack>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            <FormControl>
              <FormLabel>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —Ä–∞–∑ (%)</FormLabel>
              <NumberInput
                value={settings.maxPriceChangePercent}
                onChange={(_, value) => updateSettings({ maxPriceChangePercent: value || 10 })}
                min={1}
                max={50}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput>
              <FormHelperText>
                –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {currentPrice} ‚ÇΩ.
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ¬±{((currentPrice * settings.maxPriceChangePercent) / 100).toFixed(2)} ‚ÇΩ
              </FormHelperText>
            </FormControl>

            <FormControl>
              <FormLabel>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–µ–Ω—å</FormLabel>
              <NumberInput
                value={settings.maxDailyChanges}
                onChange={(_, value) => updateSettings({ maxDailyChanges: value || 5 })}
                min={1}
                max={20}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput>
              <FormHelperText>–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π</FormHelperText>
            </FormControl>

            <FormControl>
              <FormLabel>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ (–º–∏–Ω—É—Ç—ã)</FormLabel>
              <NumberInput
                value={settings.minTimeBetweenChanges}
                onChange={(_, value) => updateSettings({ minTimeBetweenChanges: value || 30 })}
                min={5}
                max={1440}
              >
                <NumberInputField />
                <NumberInputStepper>
                  <NumberIncrementStepper />
                  <NumberDecrementStepper />
                </NumberInputStepper>
              </NumberInput>
              <FormHelperText>–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏</FormHelperText>
            </FormControl>
          </VStack>
        </CardBody>
      </Card>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API */}
      <Card bg={bgColor} borderColor={borderColor}>
        <CardHeader>
          <HStack justify="space-between">
            <HStack>
              <FiSettings />
              <Heading size="sm">üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ozon API</Heading>
            </HStack>
            <Badge colorScheme={ozonApiStatus.hasValidKeys ? 'green' : 'red'}>
              {ozonApiStatus.hasValidKeys ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}
            </Badge>
          </HStack>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            {!ozonApiStatus.hasValidKeys && (
              <Alert status="warning" borderRadius="md">
                <AlertIcon />
                <AlertDescription fontSize="sm">
                  –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ Ozon
                </AlertDescription>
              </Alert>
            )}

            <FormControl>
              <FormLabel>API Key</FormLabel>
              <InputGroup>
                <Input
                  type={showApiKeys ? 'text' : 'password'}
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Ozon"
                />
                <InputRightElement>
                  <IconButton
                    aria-label="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å"
                    icon={showApiKeys ? <FiEyeOff /> : <FiEye />}
                    size="sm"
                    variant="ghost"
                    onClick={() => setShowApiKeys(!showApiKeys)}
                  />
                </InputRightElement>
              </InputGroup>
            </FormControl>

            <FormControl>
              <FormLabel>Client ID</FormLabel>
              <Input
                type={showApiKeys ? 'text' : 'password'}
                value={clientId}
                onChange={(e) => setClientId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ Client ID Ozon"
              />
            </FormControl>

            <Button
              colorScheme="blue"
              onClick={handleApiKeysUpdate}
              isDisabled={!apiKey || !clientId}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á–∏
            </Button>
          </VStack>
        </CardBody>
      </Card>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ */}
      <Alert status="info" borderRadius="md">
        <AlertIcon />
        <Box>
          <AlertTitle>üì° 24/7 –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω</AlertTitle>
          <AlertDescription>
            –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
            –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {new Date(monitoringStatus.lastCheck).toLocaleString('ru-RU')}
          </AlertDescription>
        </Box>
      </Alert>
    </VStack>
  );
};
