import React, { useState, useEffect } from 'react';
import {
  Box,
  Switch,
  FormControl,
  FormLabel,
  Text,
  Badge,
  HStack,
  VStack,
  Tooltip,
  useToast,
  useColorModeValue,
} from '@chakra-ui/react';
import { FiZap, FiShield } from 'react-icons/fi';
import { automationService } from '../../services/automationService';
import { AutomationSettings } from '../../types/automation';

interface AutomationToggleProps {
  productId: string;
  productTitle: string;
  currentPrice: number;
  compact?: boolean; // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
}

export const AutomationToggle: React.FC<AutomationToggleProps> = ({
  productId,
  productTitle,
  currentPrice,
  compact = false,
}) => {
  const [settings, setSettings] = useState<AutomationSettings | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const toast = useToast();

  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const textColor = useColorModeValue('gray.700', 'white');
  const helperTextColor = useColorModeValue('gray.500', 'gray.200');
  const successBg = useColorModeValue('green.50', 'green.900');
  const successBorder = useColorModeValue('green.400', 'green.500');
  const successText = useColorModeValue('green.700', 'green.200');

  useEffect(() => {
    loadSettings();
  }, [productId]);

  const loadSettings = () => {
    try {
      const currentSettings = automationService.getAutomationSettings(productId);
      setSettings(currentSettings);
    } catch (error) {
      console.error('Error loading automation settings:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleToggle = (enabled: boolean) => {
    try {
      automationService.toggleOzonAutoUpdate(productId, enabled);
      loadSettings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

      toast({
        title: enabled ? 'üöÄ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' : '‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
        description: enabled
          ? `–¶–µ–Ω—ã –¥–ª—è "${productTitle}" –±—É–¥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`
          : `–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è "${productTitle}" –ø–æ—Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`,
        status: enabled ? 'success' : 'warning',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error('Error toggling automation:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  if (isLoading || !settings) {
    return (
      <Box p={2}>
        <Text fontSize="sm" color="gray.500">–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </Box>
    );
  }

  if (compact) {
    // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    return (
      <Tooltip
        label={
          settings.ozonAutoUpdate
            ? 'üöÄ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ - —Ü–µ–Ω—ã –∏–∑–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ Ozon'
            : '‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
        }
        placement="top"
      >
        <Box>
          <FormControl display="flex" alignItems="center">
            <HStack spacing={2}>
              <FiZap color={settings.ozonAutoUpdate ? '#48BB78' : '#A0AEC0'} />
              <Switch
                size="sm"
                isChecked={settings.ozonAutoUpdate}
                onChange={(e) => handleToggle(e.target.checked)}
                colorScheme="green"
              />
              <Badge
                colorScheme={settings.ozonAutoUpdate ? 'green' : 'gray'}
                fontSize="xs"
              >
                {settings.ozonAutoUpdate ? 'AUTO' : 'MANUAL'}
              </Badge>
            </HStack>
          </FormControl>
        </Box>
      </Tooltip>
    );
  }

  // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
  return (
    <Box
      p={4}
      borderWidth="1px"
      borderRadius="md"
      borderColor={borderColor}
      bg={bgColor}
    >
      <VStack spacing={3} align="stretch">
        <HStack justify="space-between">
          <HStack>
            <FiZap color={settings.ozonAutoUpdate ? '#48BB78' : '#A0AEC0'} />
            <Text fontWeight="semibold">–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Ozon</Text>
            <Badge colorScheme="blue" fontSize="xs">24/7</Badge>
          </HStack>
          <Badge
            colorScheme={settings.ozonAutoUpdate ? 'green' : 'gray'}
            fontSize="sm"
          >
            {settings.ozonAutoUpdate ? '–ê–∫—Ç–∏–≤–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
          </Badge>
        </HStack>

        <FormControl display="flex" alignItems="center">
          <FormLabel htmlFor={`auto-${productId}`} mb="0" flex="1">
            <VStack align="start" spacing={1}>
              <Text fontSize="sm" fontWeight="medium" color={textColor}>
                –ò–∑–º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              </Text>
              <Text fontSize="xs" color={helperTextColor}>
                –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {currentPrice} ‚ÇΩ ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
              </Text>
            </VStack>
          </FormLabel>
          <Switch
            id={`auto-${productId}`}
            size="lg"
            isChecked={settings.ozonAutoUpdate}
            onChange={(e) => handleToggle(e.target.checked)}
            colorScheme="green"
          />
        </FormControl>

        {settings.ozonAutoUpdate && (
          <Box p={2} bg={successBg} borderRadius="md" borderLeft="4px solid" borderLeftColor={successBorder}>
            <HStack>
              <FiShield color={useColorModeValue('#48BB78', '#68D391')} />
              <Text fontSize="xs" color={successText}>
                <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong> –ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ {settings.maxPriceChangePercent}% ‚Ä¢
                –ú–∞–∫—Å. {settings.maxDailyChanges} —Ä–∞–∑/–¥–µ–Ω—å ‚Ä¢
                –ü–∞—É–∑–∞ {settings.minTimeBetweenChanges} –º–∏–Ω
              </Text>
            </HStack>
          </Box>
        )}

        <Text fontSize="xs" color={helperTextColor}>
          üí° 24/7 –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.
          –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—É–¥—É—Ç –ª–∏ —Ü–µ–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å—Å—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
        </Text>
      </VStack>
    </Box>
  );
};
