import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Input,
  FormControl,
  FormLabel,
  FormHelperText,
  Switch,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Badge,
  useColorModeValue,
  useToast,
  Divider,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Code,
  Link
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { FaBell, FaTelegram, FaEnvelope, FaTest, FaExternalLinkAlt } from 'react-icons/fa';
import { notificationService, NotificationConfig } from '../../services/notificationService';

export default function NotificationSettings() {
  const [config, setConfig] = useState<NotificationConfig | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isTesting, setIsTesting] = useState(false);
  const [testResults, setTestResults] = useState<any>(null);

  const cardBg = useColorModeValue('white', 'gray.700');
  const toast = useToast();

  useEffect(() => {
    loadConfig();
  }, []);

  const loadConfig = () => {
    const currentConfig = notificationService.getConfig();
    setConfig(currentConfig);
  };

  const handleSaveConfig = async () => {
    if (!config) return;

    setIsLoading(true);

    try {
      notificationService.saveConfig(config);

      toast({
        title: '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        description: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        status: 'success',
        duration: 5000,
        isClosable: true
      });

    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        status: 'error',
        duration: 5000,
        isClosable: true
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestNotifications = async () => {
    setIsTesting(true);
    setTestResults(null);

    try {
      const results = await notificationService.testNotifications();
      setTestResults(results);

      if (results.telegram || results.email) {
        toast({
          title: '‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
          status: 'success',
          duration: 5000,
          isClosable: true
        });
      } else {
        toast({
          title: '‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω',
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
          status: 'warning',
          duration: 5000,
          isClosable: true
        });
      }

    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        status: 'error',
        duration: 5000,
        isClosable: true
      });
    } finally {
      setIsTesting(false);
    }
  };

  const updateConfig = (path: string, value: any) => {
    if (!config) return;

    const newConfig = { ...config };
    const keys = path.split('.');
    let current: any = newConfig;

    for (let i = 0; i < keys.length - 1; i++) {
      current = current[keys[i]];
    }

    current[keys[keys.length - 1]] = value;
    setConfig(newConfig);
  };

  if (!config) {
    return <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</Text>;
  }

  return (
    <VStack spacing={6} align="stretch">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <HStack spacing={3}>
            <FaBell color="purple" />
            <Heading size="lg" color="purple.600">
              üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–Ω–∞—Ö
            </Heading>
            <Badge colorScheme="blue" size="sm">
              Real-time
            </Badge>
          </HStack>
          <Text fontSize="sm" color="gray.600" mt={2}>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –∏ Email –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
          </Text>
        </CardHeader>
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <Tabs variant="enclosed" colorScheme="purple">
        <TabList className="purple-tab-border">
          <Tab>
            <HStack spacing={2}>
              <FaTelegram />
              <Text>Telegram</Text>
            </HStack>
          </Tab>
          <Tab>
            <HStack spacing={2}>
              <FaEnvelope />
              <Text>Email</Text>
            </HStack>
          </Tab>
          <Tab>
            <HStack spacing={2}>
              <FaTest />
              <Text>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</Text>
            </HStack>
          </Tab>
        </TabList>

        <TabPanels>
          {/* Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <TabPanel p={0} pt={6}>
            <VStack spacing={6} align="stretch">
              <Alert status="info" className="purple-alert-border">
                <AlertIcon />
                <VStack align="start" spacing={2}>
                  <AlertTitle>üì± –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</AlertTitle>
                  <AlertDescription>
                    <VStack align="start" spacing={1} fontSize="sm">
                      <Text>1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram</Text>
                      <Text>2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot</Text>
                      <Text>3. –î–∞–π—Ç–µ –∏–º—è –±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "WB Parser Bot")</Text>
                      <Text>4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω</Text>
                      <Text>5. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ —Å–≤–æ–µ–º—É –±–æ—Ç—É</Text>
                      <Text>6. –ü–æ–ª—É—á–∏—Ç–µ Chat ID —á–µ—Ä–µ–∑: 
                        <Link 
                          href="https://api.telegram.org/bot<YOUR_TOKEN>/getUpdates" 
                          isExternal 
                          color="blue.500"
                          ml={1}
                        >
                          API <FaExternalLinkAlt style={{ display: 'inline' }} />
                        </Link>
                      </Text>
                    </VStack>
                  </AlertDescription>
                </VStack>
              </Alert>

              <Card className="purple-card-border" bg={cardBg}>
                <CardHeader>
                  <HStack justify="space-between">
                    <Heading size="md">üì± Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Heading>
                    <Switch
                      isChecked={config.telegram.enabled}
                      onChange={(e) => updateConfig('telegram.enabled', e.target.checked)}
                      colorScheme="purple"
                    />
                  </HStack>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl>
                      <FormLabel>Bot Token</FormLabel>
                      <Input
                        type="password"
                        value={config.telegram.botToken}
                        onChange={(e) => updateConfig('telegram.botToken', e.target.value)}
                        placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
                        className="purple-input-border"
                        isDisabled={!config.telegram.enabled}
                      />
                      <FormHelperText>
                        –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
                      </FormHelperText>
                    </FormControl>

                    <FormControl>
                      <FormLabel>Chat ID</FormLabel>
                      <Input
                        value={config.telegram.chatId}
                        onChange={(e) => updateConfig('telegram.chatId', e.target.value)}
                        placeholder="123456789"
                        className="purple-input-border"
                        isDisabled={!config.telegram.enabled}
                      />
                      <FormHelperText>
                        –í–∞—à Chat ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                      </FormHelperText>
                    </FormControl>

                    <FormControl>
                      <FormLabel>Cooldown (–º–∏–Ω—É—Ç—ã)</FormLabel>
                      <NumberInput
                        value={config.telegram.cooldown}
                        onChange={(value) => updateConfig('telegram.cooldown', parseInt(value) || 5)}
                        min={1}
                        max={60}
                        isDisabled={!config.telegram.enabled}
                      >
                        <NumberInputField className="purple-input-border" />
                        <NumberInputStepper>
                          <NumberIncrementStepper />
                          <NumberDecrementStepper />
                        </NumberInputStepper>
                      </NumberInput>
                      <FormHelperText>
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                      </FormHelperText>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>

          {/* Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <TabPanel p={0} pt={6}>
            <VStack spacing={6} align="stretch">
              <Alert status="warning" className="purple-alert-border">
                <AlertIcon />
                <VStack align="start" spacing={2}>
                  <AlertTitle>üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</AlertTitle>
                  <AlertDescription>
                    <Text fontSize="sm">
                      Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ backend —Å–µ—Ä–≤–µ—Ä. 
                      –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã.
                      –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ App Password –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.
                    </Text>
                  </AlertDescription>
                </VStack>
              </Alert>

              <Card className="purple-card-border" bg={cardBg}>
                <CardHeader>
                  <HStack justify="space-between">
                    <Heading size="md">üìß Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Heading>
                    <Switch
                      isChecked={config.email.enabled}
                      onChange={(e) => updateConfig('email.enabled', e.target.checked)}
                      colorScheme="purple"
                    />
                  </HStack>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <FormControl>
                      <FormLabel>Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</FormLabel>
                      <Input
                        type="email"
                        value={config.email.from}
                        onChange={(e) => updateConfig('email.from', e.target.value)}
                        placeholder="your.email@gmail.com"
                        className="purple-input-border"
                        isDisabled={!config.email.enabled}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è</FormLabel>
                      <Input
                        type="email"
                        value={config.email.to}
                        onChange={(e) => updateConfig('email.to', e.target.value)}
                        placeholder="alerts@yourcompany.com"
                        className="purple-input-border"
                        isDisabled={!config.email.enabled}
                      />
                    </FormControl>

                    <FormControl>
                      <FormLabel>Cooldown (–º–∏–Ω—É—Ç—ã)</FormLabel>
                      <NumberInput
                        value={config.email.cooldown}
                        onChange={(value) => updateConfig('email.cooldown', parseInt(value) || 10)}
                        min={1}
                        max={120}
                        isDisabled={!config.email.enabled}
                      >
                        <NumberInputField className="purple-input-border" />
                        <NumberInputStepper>
                          <NumberIncrementStepper />
                          <NumberDecrementStepper />
                        </NumberInputStepper>
                      </NumberInput>
                      <FormHelperText>
                        –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                      </FormHelperText>
                    </FormControl>
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>

          {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
          <TabPanel p={0} pt={6}>
            <VStack spacing={6} align="stretch">
              <Card className="purple-card-border" bg={cardBg}>
                <CardHeader>
                  <Heading size="md">üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Heading>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <Text fontSize="sm" color="gray.600">
                      –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    </Text>

                    <Button
                      colorScheme="blue"
                      onClick={handleTestNotifications}
                      isLoading={isTesting}
                      loadingText="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
                      className="purple-button-border"
                      leftIcon={<FaTest />}
                    >
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </Button>

                    {testResults && (
                      <Alert 
                        status={testResults.telegram || testResults.email ? 'success' : 'error'} 
                        className="purple-alert-border"
                      >
                        <AlertIcon />
                        <VStack align="start" spacing={2}>
                          <AlertTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</AlertTitle>
                          <AlertDescription>
                            <VStack align="start" spacing={1} fontSize="sm">
                              <HStack>
                                <Text fontWeight="bold">Telegram:</Text>
                                <Badge colorScheme={testResults.telegram ? 'green' : 'red'}>
                                  {testResults.telegram ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}
                                </Badge>
                              </HStack>
                              <HStack>
                                <Text fontWeight="bold">Email:</Text>
                                <Badge colorScheme={testResults.email ? 'green' : 'red'}>
                                  {testResults.email ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}
                                </Badge>
                              </HStack>
                              {testResults.errors.length > 0 && (
                                <VStack align="start" spacing={1}>
                                  <Text fontWeight="bold" color="red.500">–û—à–∏–±–∫–∏:</Text>
                                  {testResults.errors.map((error: string, index: number) => (
                                    <Code key={index} fontSize="xs" colorScheme="red">
                                      {error}
                                    </Code>
                                  ))}
                                </VStack>
                              )}
                            </VStack>
                          </AlertDescription>
                        </VStack>
                      </Alert>
                    )}
                  </VStack>
                </CardBody>
              </Card>
            </VStack>
          </TabPanel>
        </TabPanels>
      </Tabs>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <HStack spacing={4}>
        <Button
          colorScheme="green"
          onClick={handleSaveConfig}
          isLoading={isLoading}
          loadingText="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
          className="purple-button-border"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </Button>

        <Button
          variant="outline"
          onClick={loadConfig}
          className="purple-button-border"
        >
          –°–±—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        </Button>
      </HStack>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üìã –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={3} align="stretch" fontSize="sm">
            <HStack>
              <Badge colorScheme="red">üö® BAN</Badge>
              <Text>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∏–ª–∏ fingerprint</Text>
            </HStack>
            <HStack>
              <Badge colorScheme="green">‚úÖ UNBAN</Badge>
              <Text>–£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</Text>
            </HStack>
            <HStack>
              <Badge colorScheme="orange">üí• CRITICAL</Badge>
              <Text>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞</Text>
            </HStack>
            <HStack>
              <Badge colorScheme="yellow">‚ö†Ô∏è WARNING</Badge>
              <Text>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö</Text>
            </HStack>
          </VStack>
        </CardBody>
      </Card>
    </VStack>
  );
}
