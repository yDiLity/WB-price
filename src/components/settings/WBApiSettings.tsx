import {
  Box,
  Card,
  CardBody,
  CardHeader,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Input,
  FormControl,
  FormLabel,
  FormHelperText,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Badge,
  useColorModeValue,
  useToast,
  Divider,
  Link,
  Code
} from '@chakra-ui/react';
import { useState, useEffect } from 'react';
import { FaKey, FaCheck, FaTimes, FaExternalLinkAlt } from 'react-icons/fa';
import { wbApiService, WBApiCredentials } from '../../services/wbApi';

export default function WBApiSettings() {
  const [apiKey, setApiKey] = useState('');
  const [supplierId, setSupplierId] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTestingConnection, setIsTestingConnection] = useState(false);
  const [apiStatus, setApiStatus] = useState<any>(null);
  const [connectionTest, setConnectionTest] = useState<any>(null);

  const cardBg = useColorModeValue('white', 'gray.700');
  const toast = useToast();

  useEffect(() => {
    loadApiStatus();
  }, []);

  const loadApiStatus = () => {
    const status = wbApiService.getStatus();
    setApiStatus(status);
  };

  const handleSaveCredentials = async () => {
    if (!apiKey.trim() || !supplierId.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
        status: 'error',
        duration: 3000,
        isClosable: true
      });
      return;
    }

    setIsLoading(true);

    try {
      const credentials: WBApiCredentials = {
        apiKey: apiKey.trim(),
        supplierId: supplierId.trim(),
        isValid: true
      };

      wbApiService.initialize(credentials);
      loadApiStatus();

      toast({
        title: '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
        description: 'API –∫–ª—é—á–∏ Wildberries —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        status: 'success',
        duration: 5000,
        isClosable: true
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await handleTestConnection();

    } catch (error) {
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        status: 'error',
        duration: 5000,
        isClosable: true
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestConnection = async () => {
    setIsTestingConnection(true);
    setConnectionTest(null);

    try {
      const result = await wbApiService.testConnection();
      setConnectionTest(result);

      if (result.success) {
        toast({
          title: '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
          description: `–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${result.responseTime}ms`,
          status: 'success',
          duration: 5000,
          isClosable: true
        });
      } else {
        toast({
          title: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
          description: result.message,
          status: 'error',
          duration: 5000,
          isClosable: true
        });
      }

    } catch (error) {
      setConnectionTest({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
      });
    } finally {
      setIsTestingConnection(false);
    }
  };

  const handleDisconnect = () => {
    wbApiService.disconnect();
    setApiKey('');
    setSupplierId('');
    setConnectionTest(null);
    loadApiStatus();

    toast({
      title: 'üîå API –æ—Ç–∫–ª—é—á–µ–Ω',
      description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wildberries API —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ',
      status: 'info',
      duration: 3000,
      isClosable: true
    });
  };

  return (
    <VStack spacing={6} align="stretch">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <HStack spacing={3}>
            <FaKey color="purple" />
            <Heading size="lg" color="purple.600">
              üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wildberries API
            </Heading>
            {apiStatus?.isInitialized && (
              <Badge colorScheme="green" size="sm">
                –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
              </Badge>
            )}
          </HStack>
          <Text fontSize="sm" color="gray.600" mt={2}>
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É API Wildberries –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
          </Text>
        </CardHeader>
      </Card>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <Alert status="info" className="purple-alert-border">
        <AlertIcon />
        <VStack align="start" spacing={2}>
          <AlertTitle>üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á–∏ Wildberries</AlertTitle>
          <AlertDescription>
            <VStack align="start" spacing={1} fontSize="sm">
              <Text>1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ Wildberries</Text>
              <Text>2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "–î–æ—Å—Ç—É–ø –∫ API"</Text>
              <Text>3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</Text>
              <Text>4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API –∫–ª—é—á –∏ ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</Text>
              <Link 
                href="https://seller.wildberries.ru/supplier-settings/access-to-api" 
                isExternal 
                color="blue.500"
              >
                –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API <FaExternalLinkAlt style={{ display: 'inline', marginLeft: '4px' }} />
              </Link>
            </VStack>
          </AlertDescription>
        </VStack>
      </Alert>

      {/* –§–æ—Ä–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üîë API Credentials</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={4} align="stretch">
            <FormControl>
              <FormLabel>API –∫–ª—é—á</FormLabel>
              <Input
                type="password"
                value={apiKey}
                onChange={(e) => setApiKey(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á Wildberries..."
                className="purple-input-border"
              />
              <FormHelperText>
                –ü–æ–ª—É—á–∏—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ—Å—Ç—É–ø –∫ API"
              </FormHelperText>
            </FormControl>

            <FormControl>
              <FormLabel>ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</FormLabel>
              <Input
                value={supplierId}
                onChange={(e) => setSupplierId(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞..."
                className="purple-input-border"
              />
              <FormHelperText>
                –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ WB
              </FormHelperText>
            </FormControl>

            <HStack spacing={4}>
              <Button
                colorScheme="green"
                onClick={handleSaveCredentials}
                isLoading={isLoading}
                loadingText="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
                className="purple-button-border"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>

              {apiStatus?.isInitialized && (
                <>
                  <Button
                    colorScheme="blue"
                    variant="outline"
                    onClick={handleTestConnection}
                    isLoading={isTestingConnection}
                    loadingText="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
                    className="purple-button-border"
                  >
                    –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                  </Button>

                  <Button
                    colorScheme="red"
                    variant="outline"
                    onClick={handleDisconnect}
                    className="purple-button-border"
                  >
                    –û—Ç–∫–ª—é—á–∏—Ç—å
                  </Button>
                </>
              )}
            </HStack>
          </VStack>
        </CardBody>
      </Card>

      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      {apiStatus && (
        <Card className="purple-card-border" bg={cardBg}>
          <CardHeader>
            <Heading size="md">üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</Heading>
          </CardHeader>
          <CardBody>
            <VStack spacing={3} align="stretch">
              <HStack justify="space-between">
                <Text fontWeight="bold">–°—Ç–∞—Ç—É—Å API:</Text>
                <Badge colorScheme={apiStatus.isInitialized ? 'green' : 'red'}>
                  {apiStatus.isInitialized ? (
                    <HStack spacing={1}>
                      <FaCheck />
                      <Text>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</Text>
                    </HStack>
                  ) : (
                    <HStack spacing={1}>
                      <FaTimes />
                      <Text>–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ</Text>
                    </HStack>
                  )}
                </Badge>
              </HStack>

              <HStack justify="space-between">
                <Text fontWeight="bold">–ë–∞–∑–æ–≤—ã–π URL:</Text>
                <Code fontSize="sm">{apiStatus.baseUrl}</Code>
              </HStack>

              {apiStatus.supplierId && (
                <HStack justify="space-between">
                  <Text fontWeight="bold">ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</Text>
                  <Code fontSize="sm">{apiStatus.supplierId}</Code>
                </HStack>
              )}
            </VStack>
          </CardBody>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {connectionTest && (
        <Alert 
          status={connectionTest.success ? 'success' : 'error'} 
          className="purple-alert-border"
        >
          <AlertIcon />
          <VStack align="start" spacing={2}>
            <AlertTitle>
              {connectionTest.success ? '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' : '‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω'}
            </AlertTitle>
            <AlertDescription>
              <Text fontSize="sm">{connectionTest.message}</Text>
              {connectionTest.responseTime && (
                <Text fontSize="sm" color="gray.600">
                  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {connectionTest.responseTime}ms
                </Text>
              )}
            </AlertDescription>
          </VStack>
        </Alert>
      )}

      {/* –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ API */}
      <Card className="purple-card-border" bg={cardBg}>
        <CardHeader>
          <Heading size="md">üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Wildberries API</Heading>
        </CardHeader>
        <CardBody>
          <VStack spacing={2} align="stretch" fontSize="sm">
            <Text>‚Ä¢ üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤</Text>
            <Text>‚Ä¢ üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω</Text>
            <Text>‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤</Text>
            <Text>‚Ä¢ üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Text>
            <Text>‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</Text>
            <Text>‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤</Text>
          </VStack>
        </CardBody>
      </Card>

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
      <Alert status="warning" className="purple-alert-border">
        <AlertIcon />
        <VStack align="start" spacing={2}>
          <AlertTitle>‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</AlertTitle>
          <AlertDescription>
            <Text fontSize="sm">
              ‚Ä¢ <strong>–•—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</strong> - –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º<br/>
              ‚Ä¢ <strong>–°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã API</strong> - –Ω–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤<br/>
              ‚Ä¢ <strong>–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</strong> - —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API<br/>
              ‚Ä¢ <strong>–û–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–ª—é—á–∏</strong> - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏
            </Text>
          </AlertDescription>
        </VStack>
      </Alert>
    </VStack>
  );
}
