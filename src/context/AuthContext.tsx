import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, UserRole } from '../types/auth';
import { OzonApiCredentials, LoginCredentials, RegisterData } from '../types/auth';
import { OzonApiServiceFactory } from '../services/ozonApiServiceFactory';
import { useToast } from '@chakra-ui/react';
import { aiService } from '../services/aiService';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (credentials: LoginCredentials) => Promise<boolean>;
  register: (data: RegisterData) => Promise<boolean>;
  logout: () => void;
  updateUser: (userData: Partial<User>) => Promise<boolean>;
  updateOzonApiCredentials: (credentials: OzonApiCredentials) => Promise<boolean>;
  validateOzonApiCredentials: (credentials: OzonApiCredentials) => Promise<boolean>;
  clearError: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const toast = useToast();
  const apiServiceFactory = OzonApiServiceFactory.getInstance();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ localStorage
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser);
        console.log('üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', parsedUser.role, parsedUser.username);
        setUser(parsedUser);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
        localStorage.removeItem('user');
      }
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å VIEWER (–≥–æ—Å—Ç—å)
      console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ä–æ–ª—å VIEWER');
      setUser(null);
    }
    setIsLoading(false);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò-—Å–µ—Ä–≤–∏—Å —Å API –∫–ª—é—á–æ–º OpenAI
    try {
      aiService.initialize('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');
      console.log('AI Service initialized automatically on app start with OpenAI API key');
    } catch (error) {
      console.error('Failed to initialize AI service:', error);
    }
  }, []);

  const clearError = () => {
    setError(null);
  };

  const login = async (credentials: LoginCredentials) => {
    setIsLoading(true);
    setError(null);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–Ω–∞/email
      let userRole = UserRole.SELLER; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

      // –ê–¥–º–∏–Ω—Å–∫–∏–µ –ª–æ–≥–∏–Ω—ã
      const adminLogins = ['admin', 'root', 'administrator', 'admin@wbfinder.com'];
      if (adminLogins.includes(credentials.username.toLowerCase())) {
        userRole = UserRole.ADMIN;
      }

      // –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –ª–æ–≥–∏–Ω—ã
      const managerLogins = ['manager', 'supervisor', 'lead'];
      if (managerLogins.some(login => credentials.username.toLowerCase().includes(login))) {
        userRole = UserRole.MANAGER;
      }

      // Viewer –ª–æ–≥–∏–Ω—ã (–¥–µ–º–æ –∞–∫–∫–∞—É–Ω—Ç—ã) - –Ω–æ demo –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SELLER
      const viewerLogins = ['guest', 'viewer', 'test'];
      if (viewerLogins.some(login => credentials.username.toLowerCase().includes(login))) {
        userRole = UserRole.VIEWER;
      }

      // Demo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å SELLER (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û)
      if (credentials.username.toLowerCase().includes('demo') || credentials.username.toLowerCase() === 'demo') {
        userRole = UserRole.SELLER;
        console.log('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å SELLER –¥–ª—è demo –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞
      const loggedInUser: User = {
        id: Date.now().toString(),
        username: credentials.username,
        email: credentials.username.includes('@') ? credentials.username : `${credentials.username}@wbfinder.com`,
        role: userRole,
        firstName: userRole === UserRole.ADMIN ? '–ê–¥–º–∏–Ω' :
                  userRole === UserRole.MANAGER ? '–ú–µ–Ω–µ–¥–∂–µ—Ä' :
                  userRole === UserRole.VIEWER ? '–ì–æ—Å—Ç—å' : '–ü—Ä–æ–¥–∞–≤–µ—Ü',
        lastName: 'WB Finder',
        createdAt: new Date(),
        updatedAt: new Date(),
        settings: {
          theme: 'system',
          notifications: true,
          emailNotifications: true,
          language: 'ru',
          defaultPricingStrategy: 'aggressive'
        },
        ozonApiCredentials: {
          clientId: '',
          apiKey: '',
          isValid: false
        }
      };

      console.log('üîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é:', userRole, credentials.username);
      setUser(loggedInUser);
      localStorage.setItem('user', JSON.stringify(loggedInUser));

      toast({
        title: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${credentials.username}!`,
        status: 'success',
        duration: 5000,
        isClosable: true,
      });

      return true;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ';
      setError(errorMessage);

      toast({
        title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
        description: errorMessage,
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (data: RegisterData) => {
    setIsLoading(true);
    setError(null);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ email –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
      let userRole = UserRole.SELLER; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ–¥–∞–≤—Ü—ã

      // –ê–¥–º–∏–Ω—Å–∫–∏–µ email'—ã
      const adminEmails = ['admin@wbfinder.com', 'admin@example.com', 'root@wbfinder.com'];
      if (adminEmails.includes(data.email.toLowerCase())) {
        userRole = UserRole.ADMIN;
      }

      // –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ email'—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã)
      if (data.email.toLowerCase().includes('@manager.') || data.email.toLowerCase().includes('@corp.')) {
        userRole = UserRole.MANAGER;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser: User = {
        id: Date.now().toString(),
        username: data.username,
        email: data.email,
        role: userRole,
        firstName: data.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        lastName: data.lastName || '',
        createdAt: new Date(),
        updatedAt: new Date(),
        settings: {
          theme: 'system',
          notifications: true,
          emailNotifications: true,
          language: 'ru',
          defaultPricingStrategy: 'aggressive'
        },
        ozonApiCredentials: {
          clientId: '',
          apiKey: '',
          isValid: false
        }
      };

      console.log('üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é:', userRole, data.username);
      setUser(newUser);
      localStorage.setItem('user', JSON.stringify(newUser));

      toast({
        title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
        description: '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });

      return true;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      setError(errorMessage);

      toast({
        title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        description: errorMessage,
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API, —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
    if (user && user.id) {
      apiServiceFactory.removeServiceForUser(user.id);
    }

    setUser(null);
    localStorage.removeItem('user');

    toast({
      title: '–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
      description: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
      status: 'info',
      duration: 3000,
      isClosable: true,
    });
  };

  const updateUser = async (userData: Partial<User>) => {
    setIsLoading(true);
    setError(null);
    try {
      if (user) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
        const updatedUser = { ...user, ...userData };
        setUser(updatedUser);
        localStorage.setItem('user', JSON.stringify(updatedUser));

        toast({
          title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
          description: '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });

        return true;
      }
      return false;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è';
      setError(errorMessage);

      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        description: errorMessage,
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const updateOzonApiCredentials = async (credentials: OzonApiCredentials) => {
    setIsLoading(true);
    setError(null);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const isValid = await validateOzonApiCredentials(credentials);

      if (!isValid) {
        setError('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Ozon');
        toast({
          title: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
          description: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Ozon',
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
        return false;
      }

      if (user) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedCredentials = { ...credentials, isValid, lastValidated: new Date() };
        const updatedUser = {
          ...user,
          ozonApiCredentials: updatedCredentials
        };

        setUser(updatedUser);
        localStorage.setItem('user', JSON.stringify(updatedUser));

        toast({
          title: 'API –ø–æ–¥–∫–ª—é—á–µ–Ω',
          description: '–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Ozon —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
          status: 'success',
          duration: 5000,
          isClosable: true,
        });

        return true;
      }
      return false;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API';
      setError(errorMessage);

      toast({
        title: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API',
        description: errorMessage,
        status: 'error',
        duration: 5000,
        isClosable: true,
      });

      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const validateOzonApiCredentials = async (credentials: OzonApiCredentials) => {
    setIsLoading(true);
    setError(null);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤
      const isValid = await apiServiceFactory.validateCredentials(credentials);
      return isValid;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API';
      setError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        error,
        login,
        register,
        logout,
        updateUser,
        updateOzonApiCredentials,
        validateOzonApiCredentials,
        clearError
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
