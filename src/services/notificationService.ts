/**
 * üö® –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–∞–Ω–∞—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Telegram, Email –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

interface NotificationConfig {
  telegram: {
    enabled: boolean;
    botToken: string;
    chatId: string;
    cooldown: number; // –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  };
  email: {
    enabled: boolean;
    smtp: {
      host: string;
      port: number;
      secure: boolean;
      user: string;
      pass: string;
    };
    from: string;
    to: string;
    cooldown: number;
  };
  internal: {
    enabled: boolean;
    maxAlerts: number;
  };
}

interface BanAlert {
  type: 'ban' | 'unban' | 'critical' | 'warning';
  ip: string;
  proxy?: string;
  userAgent?: string;
  statusCode: number;
  url: string;
  timestamp: Date;
  retryCount: number;
  fingerprint?: string;
  reason?: string;
}

interface AlertStats {
  totalAlerts: number;
  banAlerts: number;
  criticalAlerts: number;
  lastAlert: Date | null;
  alertsPerHour: number;
}

class NotificationService {
  private config: NotificationConfig;
  private alertHistory: BanAlert[] = [];
  private lastNotificationTime: Map<string, Date> = new Map();
  private alertStats: AlertStats = {
    totalAlerts: 0,
    banAlerts: 0,
    criticalAlerts: 0,
    lastAlert: null,
    alertsPerHour: 0
  };

  constructor() {
    this.config = this.getDefaultConfig();
    this.loadConfig();
  }

  /**
   * üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private getDefaultConfig(): NotificationConfig {
    return {
      telegram: {
        enabled: false,
        botToken: '',
        chatId: '',
        cooldown: 5 // 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      },
      email: {
        enabled: false,
        smtp: {
          host: 'smtp.gmail.com',
          port: 587,
          secure: false,
          user: '',
          pass: ''
        },
        from: '',
        to: '',
        cooldown: 10 // 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É email
      },
      internal: {
        enabled: true,
        maxAlerts: 1000
      }
    };
  }

  /**
   * üìù –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ localStorage
   */
  private loadConfig(): void {
    try {
      const saved = localStorage.getItem('wb-notification-config');
      if (saved) {
        this.config = { ...this.config, ...JSON.parse(saved) };
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }

  /**
   * üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  public saveConfig(newConfig: Partial<NotificationConfig>): void {
    this.config = { ...this.config, ...newConfig };
    localStorage.setItem('wb-notification-config', JSON.stringify(this.config));
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  }

  /**
   * üö® –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ
   */
  public async sendBanAlert(alert: BanAlert): Promise<void> {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.addToHistory(alert);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
      if (!this.shouldSendNotification(alert.type)) {
        console.log(`‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ cooldown: ${alert.type}`);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.formatAlertMessage(alert);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const promises: Promise<void>[] = [];

      if (this.config.telegram.enabled) {
        promises.push(this.sendTelegramAlert(message, alert));
      }

      if (this.config.email.enabled) {
        promises.push(this.sendEmailAlert(message, alert));
      }

      await Promise.allSettled(promises);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      this.lastNotificationTime.set(alert.type, new Date());

      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${alert.type} - ${alert.ip}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  /**
   * üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
   */
  private async sendTelegramAlert(message: string, alert: BanAlert): Promise<void> {
    if (!this.config.telegram.botToken || !this.config.telegram.chatId) {
      throw new Error('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const url = `https://api.telegram.org/bot${this.config.telegram.botToken}/sendMessage`;
    
    const payload = {
      chat_id: this.config.telegram.chatId,
      text: message,
      parse_mode: 'HTML',
      disable_web_page_preview: true
    };

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    console.log('üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }

  /**
   * üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Email
   */
  private async sendEmailAlert(message: string, alert: BanAlert): Promise<void> {
    // –í –±—Ä–∞—É–∑–µ—Ä–µ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å email –Ω–∞–ø—Ä—è–º—É—é
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend
    try {
      const response = await fetch('/api/send-email-alert', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          subject: this.getEmailSubject(alert),
          message: message,
          alert: alert
        })
      });

      if (!response.ok) {
        throw new Error(`Email API error: ${response.status}`);
      }

      console.log('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    } catch (error) {
      console.warn('‚ö†Ô∏è Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', error);
    }
  }

  /**
   * üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private formatAlertMessage(alert: BanAlert): string {
    const emoji = this.getAlertEmoji(alert.type);
    const timestamp = alert.timestamp.toLocaleString('ru-RU');

    let message = `${emoji} <b>WB –ü–∞—Ä—Å–∏–Ω–≥ - ${alert.type.toUpperCase()}</b>\n\n`;
    
    message += `üïê <b>–í—Ä–µ–º—è:</b> ${timestamp}\n`;
    message += `üåê <b>IP:</b> <code>${alert.ip}</code>\n`;
    message += `üìä <b>–ö–æ–¥:</b> ${alert.statusCode}\n`;
    message += `üîó <b>URL:</b> ${this.truncateUrl(alert.url)}\n`;

    if (alert.proxy) {
      message += `üîÑ <b>–ü—Ä–æ–∫—Å–∏:</b> <code>${alert.proxy}</code>\n`;
    }

    if (alert.userAgent) {
      message += `ü§ñ <b>UA:</b> ${this.truncateUserAgent(alert.userAgent)}\n`;
    }

    if (alert.retryCount > 0) {
      message += `üîÅ <b>–ü–æ–ø—ã—Ç–∫–∞:</b> ${alert.retryCount}\n`;
    }

    if (alert.reason) {
      message += `‚ùó <b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${alert.reason}\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message += `\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: ${this.alertStats.totalAlerts}\n`;
    message += `‚Ä¢ –ë–∞–Ω–æ–≤: ${this.alertStats.banAlerts}\n`;
    message += `‚Ä¢ –í —á–∞—Å: ${this.alertStats.alertsPerHour.toFixed(1)}`;

    return message;
  }

  /**
   * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞
   */
  private getAlertEmoji(type: string): string {
    const emojis: Record<string, string> = {
      'ban': 'üö®',
      'unban': '‚úÖ',
      'critical': 'üí•',
      'warning': '‚ö†Ô∏è'
    };
    return emojis[type] || 'üì¢';
  }

  /**
   * üìß –¢–µ–º–∞ –¥–ª—è email
   */
  private getEmailSubject(alert: BanAlert): string {
    const emoji = this.getAlertEmoji(alert.type);
    return `${emoji} WB –ü–∞—Ä—Å–∏–Ω–≥ - ${alert.type.toUpperCase()} - ${alert.ip}`;
  }

  /**
   * ‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ URL –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
   */
  private truncateUrl(url: string): string {
    if (url.length <= 50) return url;
    return url.substring(0, 47) + '...';
  }

  /**
   * ‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ User-Agent
   */
  private truncateUserAgent(ua: string): string {
    if (ua.length <= 60) return ua;
    return ua.substring(0, 57) + '...';
  }

  /**
   * ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
   */
  private shouldSendNotification(type: string): boolean {
    const lastTime = this.lastNotificationTime.get(type);
    if (!lastTime) return true;

    const cooldownMinutes = type === 'ban' ? 
      this.config.telegram.cooldown : 
      this.config.email.cooldown;

    const cooldownMs = cooldownMinutes * 60 * 1000;
    return Date.now() - lastTime.getTime() > cooldownMs;
  }

  /**
   * üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private addToHistory(alert: BanAlert): void {
    this.alertHistory.unshift(alert);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.alertHistory.length > this.config.internal.maxAlerts) {
      this.alertHistory = this.alertHistory.slice(0, this.config.internal.maxAlerts);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.alertStats.totalAlerts++;
    this.alertStats.lastAlert = alert.timestamp;

    if (alert.type === 'ban') {
      this.alertStats.banAlerts++;
    }
    if (alert.type === 'critical') {
      this.alertStats.criticalAlerts++;
    }

    // –°—á–∏—Ç–∞–µ–º –∞–ª–µ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    const hourAgo = new Date(Date.now() - 60 * 60 * 1000);
    this.alertStats.alertsPerHour = this.alertHistory.filter(
      a => a.timestamp > hourAgo
    ).length;
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  public async testNotifications(): Promise<{
    telegram: boolean;
    email: boolean;
    errors: string[];
  }> {
    const results = { telegram: false, email: false, errors: [] };

    const testAlert: BanAlert = {
      type: 'warning',
      ip: '127.0.0.1',
      proxy: 'test-proxy:8080',
      userAgent: 'Test User Agent',
      statusCode: 403,
      url: 'https://wildberries.ru/test',
      timestamp: new Date(),
      retryCount: 0,
      reason: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    };

    // –¢–µ—Å—Ç Telegram
    if (this.config.telegram.enabled) {
      try {
        await this.sendTelegramAlert('üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π WB –ü–∞—Ä—Å–∏–Ω–≥', testAlert);
        results.telegram = true;
      } catch (error) {
        results.errors.push(`Telegram: ${error}`);
      }
    }

    // –¢–µ—Å—Ç Email
    if (this.config.email.enabled) {
      try {
        await this.sendEmailAlert('üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π WB –ü–∞—Ä—Å–∏–Ω–≥', testAlert);
        results.email = true;
      } catch (error) {
        results.errors.push(`Email: ${error}`);
      }
    }

    return results;
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  public getStats(): AlertStats {
    return { ...this.alertStats };
  }

  /**
   * üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
   */
  public getHistory(limit: number = 50): BanAlert[] {
    return this.alertHistory.slice(0, limit);
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
   */
  public clearHistory(): void {
    this.alertHistory = [];
    this.alertStats = {
      totalAlerts: 0,
      banAlerts: 0,
      criticalAlerts: 0,
      lastAlert: null,
      alertsPerHour: 0
    };
    console.log('üßπ –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * ‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  public getConfig(): NotificationConfig {
    return { ...this.config };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const notificationService = new NotificationService();
export default NotificationService;
export type { NotificationConfig, BanAlert, AlertStats };
