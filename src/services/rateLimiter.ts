// üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ Rate Limiting –¥–ª—è –∑–∞—â–∏—Ç—ã API
interface RateLimitRule {
  endpoint: string
  method: string
  maxRequests: number
  windowMs: number
  scope: 'ip' | 'user' | 'global'
  action: 'block' | 'throttle' | 'captcha'
}

interface RateLimitEntry {
  count: number
  resetTime: number
  blocked: boolean
}

// üìä –ü—Ä–∞–≤–∏–ª–∞ Rate Limiting
const RATE_LIMIT_RULES: RateLimitRule[] = [
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  {
    endpoint: '/api/auth/login',
    method: 'POST',
    maxRequests: 5,
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    scope: 'ip',
    action: 'block',
  },
  {
    endpoint: '/api/auth/register',
    method: 'POST',
    maxRequests: 3,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'ip',
    action: 'block',
  },
  {
    endpoint: '/api/auth/forgot-password',
    method: 'POST',
    maxRequests: 3,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'ip',
    action: 'block',
  },

  // –ë–∏–∑–Ω–µ—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
  {
    endpoint: '/api/slots/book',
    method: 'POST',
    maxRequests: 10,
    windowMs: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    scope: 'user',
    action: 'throttle',
  },
  {
    endpoint: '/api/prices/update',
    method: 'PUT',
    maxRequests: 100,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'user',
    action: 'throttle',
  },
  {
    endpoint: '/api/products',
    method: 'GET',
    maxRequests: 1000,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'user',
    action: 'throttle',
  },

  // –§–∞–π–ª—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç
  {
    endpoint: '/api/export',
    method: 'POST',
    maxRequests: 5,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'user',
    action: 'block',
  },
  {
    endpoint: '/api/upload',
    method: 'POST',
    maxRequests: 20,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'user',
    action: 'throttle',
  },

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
  {
    endpoint: '/api/*',
    method: '*',
    maxRequests: 1000,
    windowMs: 60 * 60 * 1000, // 1 —á–∞—Å
    scope: 'ip',
    action: 'throttle',
  },
]

// üîí –ö–ª–∞—Å—Å Rate Limiter
class RateLimiter {
  private storage: Map<string, RateLimitEntry> = new Map()
  private cleanupInterval: NodeJS.Timeout

  constructor() {
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.cleanupInterval = setInterval(() => {
      this.cleanup()
    }, 5 * 60 * 1000)
  }

  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
  checkLimit(
    endpoint: string,
    method: string,
    identifier: string,
    scope: 'ip' | 'user' | 'global'
  ): {
    allowed: boolean
    remaining: number
    resetTime: number
    action?: string
  } {
    const rule = this.findRule(endpoint, method, scope)
    
    if (!rule) {
      return {
        allowed: true,
        remaining: Infinity,
        resetTime: 0,
      }
    }

    const key = this.generateKey(rule, identifier)
    const now = Date.now()
    const entry = this.storage.get(key)

    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –∏–ª–∏ –æ–∫–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ
    if (!entry || now >= entry.resetTime) {
      const newEntry: RateLimitEntry = {
        count: 1,
        resetTime: now + rule.windowMs,
        blocked: false,
      }
      this.storage.set(key, newEntry)

      return {
        allowed: true,
        remaining: rule.maxRequests - 1,
        resetTime: newEntry.resetTime,
      }
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    entry.count++

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if (entry.count > rule.maxRequests) {
      entry.blocked = true
      
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
      this.logRateLimitViolation(rule, identifier, entry.count)

      return {
        allowed: false,
        remaining: 0,
        resetTime: entry.resetTime,
        action: rule.action,
      }
    }

    return {
      allowed: true,
      remaining: rule.maxRequests - entry.count,
      resetTime: entry.resetTime,
    }
  }

  // üéØ –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
  private findRule(
    endpoint: string,
    method: string,
    scope: 'ip' | 'user' | 'global'
  ): RateLimitRule | null {
    // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    let rule = RATE_LIMIT_RULES.find(
      r => r.endpoint === endpoint && 
           (r.method === method || r.method === '*') && 
           r.scope === scope
    )

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º wildcard –ø—Ä–∞–≤–∏–ª–∞
    if (!rule) {
      rule = RATE_LIMIT_RULES.find(
        r => this.matchWildcard(r.endpoint, endpoint) && 
             (r.method === method || r.method === '*') && 
             r.scope === scope
      )
    }

    return rule || null
  }

  // üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
  private generateKey(rule: RateLimitRule, identifier: string): string {
    return `${rule.scope}:${identifier}:${rule.endpoint}:${rule.method}`
  }

  // üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ wildcard –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  private matchWildcard(pattern: string, str: string): boolean {
    const regex = new RegExp(
      pattern.replace(/\*/g, '.*').replace(/\?/g, '.')
    )
    return regex.test(str)
  }

  // üßπ –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  private cleanup(): void {
    const now = Date.now()
    const keysToDelete: string[] = []

    for (const [key, entry] of this.storage.entries()) {
      if (now >= entry.resetTime) {
        keysToDelete.push(key)
      }
    }

    keysToDelete.forEach(key => this.storage.delete(key))
    
    console.log(`Rate limiter: –æ—á–∏—â–µ–Ω–æ ${keysToDelete.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`)
  }

  // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
  private logRateLimitViolation(
    rule: RateLimitRule,
    identifier: string,
    attempts: number
  ): void {
    const violation = {
      timestamp: new Date().toISOString(),
      event: 'RATE_LIMIT_EXCEEDED',
      rule: {
        endpoint: rule.endpoint,
        method: rule.method,
        maxRequests: rule.maxRequests,
        windowMs: rule.windowMs,
        scope: rule.scope,
        action: rule.action,
      },
      identifier,
      attempts,
      severity: attempts > rule.maxRequests * 2 ? 'HIGH' : 'MEDIUM',
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É–¥–∏—Ç–∞
    fetch('/api/audit/rate-limit-violation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(violation),
    }).catch(console.error)

    console.warn('Rate limit exceeded:', violation)
  }

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats(): {
    totalEntries: number
    blockedEntries: number
    topViolators: Array<{ key: string; count: number }>
  } {
    const entries = Array.from(this.storage.entries())
    const blockedEntries = entries.filter(([, entry]) => entry.blocked)
    
    const topViolators = entries
      .map(([key, entry]) => ({ key, count: entry.count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 10)

    return {
      totalEntries: entries.length,
      blockedEntries: blockedEntries.length,
      topViolators,
    }
  }

  // üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  resetLimits(identifier: string, scope: 'ip' | 'user' | 'global'): void {
    const keysToDelete: string[] = []

    for (const key of this.storage.keys()) {
      if (key.startsWith(`${scope}:${identifier}:`)) {
        keysToDelete.push(key)
      }
    }

    keysToDelete.forEach(key => this.storage.delete(key))
    
    console.log(`Rate limiter: —Å–±—Ä–æ—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è ${scope}:${identifier}`)
  }

  // üõë –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  blockUser(identifier: string, durationMs: number): void {
    const blockKey = `block:${identifier}`
    const blockEntry: RateLimitEntry = {
      count: Infinity,
      resetTime: Date.now() + durationMs,
      blocked: true,
    }

    this.storage.set(blockKey, blockEntry)
    
    console.log(`Rate limiter: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ${identifier} –Ω–∞ ${durationMs}ms`)
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
  isBlocked(identifier: string): boolean {
    const blockKey = `block:${identifier}`
    const entry = this.storage.get(blockKey)
    
    if (!entry) return false
    
    if (Date.now() >= entry.resetTime) {
      this.storage.delete(blockKey)
      return false
    }
    
    return entry.blocked
  }

  // üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
  destroy(): void {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval)
    }
    this.storage.clear()
  }
}

// üåü Singleton instance
export const rateLimiter = new RateLimiter()

// üéØ Middleware –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
export const rateLimitMiddleware = (
  endpoint: string,
  method: string,
  getUserId: () => string | null,
  getClientIP: () => string
) => {
  return (req: any, res: any, next: any) => {
    const userId = getUserId()
    const clientIP = getClientIP()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (rateLimiter.isBlocked(clientIP) || (userId && rateLimiter.isBlocked(userId))) {
      return res.status(429).json({
        error: 'IP –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        code: 'BLOCKED',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ IP
    const ipCheck = rateLimiter.checkLimit(endpoint, method, clientIP, 'ip')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    let userCheck = { allowed: true, remaining: Infinity, resetTime: 0 }
    if (userId) {
      userCheck = rateLimiter.checkLimit(endpoint, method, userId, 'user')
    }

    // –ï—Å–ª–∏ –ª—é–±–æ–π –∏–∑ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω
    if (!ipCheck.allowed || !userCheck.allowed) {
      const failedCheck = !ipCheck.allowed ? ipCheck : userCheck
      
      return res.status(429).json({
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
        code: 'RATE_LIMIT_EXCEEDED',
        remaining: failedCheck.remaining,
        resetTime: failedCheck.resetTime,
        action: failedCheck.action,
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
    res.set({
      'X-RateLimit-Limit': Math.min(ipCheck.remaining, userCheck.remaining),
      'X-RateLimit-Remaining': Math.min(ipCheck.remaining, userCheck.remaining),
      'X-RateLimit-Reset': Math.max(ipCheck.resetTime, userCheck.resetTime),
    })

    next()
  }
}

export default rateLimiter
