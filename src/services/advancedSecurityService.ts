/**
 * üõ°Ô∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å RateLimiter –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è enterprise-—É—Ä–æ–≤–Ω—è –∑–∞—â–∏—Ç—ã
 */

interface SecurityLog {
  timestamp: number;
  url: string;
  statusCode: number;
  responseTime: number;
  userAgent: string;
  proxyUsed?: string;
  errorType?: 'rate_limit' | 'blocked' | 'captcha' | 'timeout';
  responseSize: number;
}

interface ProxyHealth {
  proxy: string;
  isHealthy: boolean;
  lastChecked: number;
  successRate: number;
  avgResponseTime: number;
  consecutiveFailures: number;
}

interface SecurityMetrics {
  totalRequests: number;
  successfulRequests: number;
  blockedRequests: number;
  avgResponseTime: number;
  activeProxies: number;
  healthyProxies: number;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
}

class AdvancedSecurityService {
  private logs: SecurityLog[] = [];
  private proxyHealth: Map<string, ProxyHealth> = new Map();
  private rateLimiter: Map<string, number[]> = new Map(); // IP -> timestamps
  private userAgentPool: string[] = [];
  private emergencyMode = false;
  private lastHealthCheck = 0;

  constructor() {
    this.initializeUserAgentPool();
    this.startHealthMonitoring();
  }

  /**
   * üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞ User-Agent (1000+ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
   */
  private initializeUserAgentPool(): void {
    // –†–µ–∞–ª—å–Ω—ã–µ User-Agent –∏–∑ —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const browsers = [
      'Chrome', 'Firefox', 'Safari', 'Edge', 'Opera'
    ];
    
    const platforms = [
      'Windows NT 10.0; Win64; x64',
      'Windows NT 11.0; Win64; x64',
      'Macintosh; Intel Mac OS X 10_15_7',
      'Macintosh; Intel Mac OS X 11_6_0',
      'X11; Linux x86_64',
      'iPhone; CPU iPhone OS 17_0 like Mac OS X',
      'iPad; CPU OS 17_0 like Mac OS X',
      'Android 13; Mobile',
      'Android 14; Tablet'
    ];

    const versions = {
      Chrome: ['120.0.0.0', '119.0.0.0', '118.0.0.0', '117.0.0.0'],
      Firefox: ['120.0', '119.0', '118.0', '117.0'],
      Safari: ['17.1', '17.0', '16.6', '16.5'],
      Edge: ['120.0.0.0', '119.0.0.0', '118.0.0.0'],
      Opera: ['105.0.0.0', '104.0.0.0', '103.0.0.0']
    };

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    browsers.forEach(browser => {
      platforms.forEach(platform => {
        versions[browser as keyof typeof versions]?.forEach(version => {
          let userAgent = '';
          
          switch (browser) {
            case 'Chrome':
              userAgent = `Mozilla/5.0 (${platform}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${version} Safari/537.36`;
              break;
            case 'Firefox':
              userAgent = `Mozilla/5.0 (${platform}; rv:${version}) Gecko/20100101 Firefox/${version}`;
              break;
            case 'Safari':
              userAgent = `Mozilla/5.0 (${platform}) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/${version} Safari/605.1.15`;
              break;
            case 'Edge':
              userAgent = `Mozilla/5.0 (${platform}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${version} Safari/537.36 Edg/${version}`;
              break;
            case 'Opera':
              userAgent = `Mozilla/5.0 (${platform}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 OPR/${version}`;
              break;
          }
          
          if (userAgent) {
            this.userAgentPool.push(userAgent);
          }
        });
      });
    });

    console.log(`üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª –∏–∑ ${this.userAgentPool.length} User-Agent`);
  }

  /**
   * üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏
   */
  async checkProxyHealth(proxy: string): Promise<boolean> {
    const startTime = Date.now();
    
    try {
      const testUrl = 'https://www.wildberries.ru/robots.txt';
      const response = await fetch(testUrl, {
        method: 'GET',
        headers: {
          'User-Agent': this.getRandomUserAgent()
        },
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        signal: AbortSignal.timeout(10000) // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      const responseTime = Date.now() - startTime;
      const isHealthy = response.ok && responseTime < 5000;

      this.updateProxyHealth(proxy, isHealthy, responseTime);
      return isHealthy;

    } catch (error) {
      this.updateProxyHealth(proxy, false, Date.now() - startTime);
      return false;
    }
  }

  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏
   */
  private updateProxyHealth(proxy: string, isHealthy: boolean, responseTime: number): void {
    const current = this.proxyHealth.get(proxy) || {
      proxy,
      isHealthy: true,
      lastChecked: 0,
      successRate: 1,
      avgResponseTime: 0,
      consecutiveFailures: 0
    };

    current.lastChecked = Date.now();
    current.isHealthy = isHealthy;
    current.avgResponseTime = (current.avgResponseTime + responseTime) / 2;

    if (isHealthy) {
      current.consecutiveFailures = 0;
      current.successRate = Math.min(current.successRate + 0.1, 1);
    } else {
      current.consecutiveFailures++;
      current.successRate = Math.max(current.successRate - 0.2, 0);
    }

    this.proxyHealth.set(proxy, current);
  }

  /**
   * ‚è±Ô∏è RateLimiter —Å —Ç–æ–∫–µ–Ω-–±–∞–∫–µ—Ç–æ–º
   */
  checkRateLimit(identifier: string, maxRequests = 100, windowMs = 60000): boolean {
    const now = Date.now();
    const windowStart = now - windowMs;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    const requests = this.rateLimiter.get(identifier) || [];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const recentRequests = requests.filter(timestamp => timestamp > windowStart);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (recentRequests.length >= maxRequests) {
      console.warn(`üö´ Rate limit exceeded for ${identifier}: ${recentRequests.length}/${maxRequests}`);
      return false;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
    recentRequests.push(now);
    this.rateLimiter.set(identifier, recentRequests);
    
    return true;
  }

  /**
   * üìù –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  logRequest(log: Omit<SecurityLog, 'timestamp'>): void {
    const fullLog: SecurityLog = {
      timestamp: Date.now(),
      ...log
    };

    this.logs.push(fullLog);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10000 –∑–∞–ø–∏—Å–µ–π)
    if (this.logs.length > 10000) {
      this.logs = this.logs.slice(-10000);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º
    this.analyzeSecurityThreats(fullLog);
  }

  /**
   * üîç –ê–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private analyzeSecurityThreats(log: SecurityLog): void {
    const recentLogs = this.logs.slice(-100); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏
    const errorRate = recentLogs.filter(l => l.statusCode >= 400).length / recentLogs.length;
    
    if (errorRate > 0.3) { // –ë–æ–ª–µ–µ 30% –æ—à–∏–±–æ–∫
      console.warn('üö® –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫, –≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞');
      this.activateEmergencyMode();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–ø—á–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if (log.statusCode === 403 || log.errorType === 'captcha') {
      console.error('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –∫–∞–ø—á–∞');
      this.handleBlocking(log);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    if (log.responseTime > 10000) {
      console.warn('‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏');
    }
  }

  /**
   * üö® –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
   */
  private activateEmergencyMode(): void {
    if (this.emergencyMode) return;

    this.emergencyMode = true;
    console.error('üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú');

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ 3 —Ä–∞–∑–∞
    // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    setTimeout(() => {
      this.emergencyMode = false;
      console.log('‚úÖ –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω');
    }, 30 * 60 * 1000);
  }

  /**
   * üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
   */
  private handleBlocking(log: SecurityLog): void {
    // –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    if (log.proxyUsed) {
      const health = this.proxyHealth.get(log.proxyUsed);
      if (health) {
        health.isHealthy = false;
        health.consecutiveFailures = 999; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.sendSecurityAlert('blocking', {
      url: log.url,
      statusCode: log.statusCode,
      proxy: log.proxyUsed
    });
  }

  /**
   * üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  private async sendSecurityAlert(type: string, details: any): Promise<void> {
    const message = `üö® Security Alert: ${type}\n${JSON.stringify(details, null, 2)}`;
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram/Slack/Email
    console.error(message);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    // await telegramService.sendAlert(message);
    // await slackService.sendAlert(message);
  }

  /**
   * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
   */
  getRandomUserAgent(): string {
    return this.userAgentPool[Math.floor(Math.random() * this.userAgentPool.length)];
  }

  /**
   * üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  getHealthyProxy(): string | null {
    const healthyProxies = Array.from(this.proxyHealth.values())
      .filter(p => p.isHealthy && p.consecutiveFailures < 3)
      .sort((a, b) => b.successRate - a.successRate);

    return healthyProxies.length > 0 ? healthyProxies[0].proxy : null;
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  getSecurityMetrics(): SecurityMetrics {
    const recentLogs = this.logs.slice(-1000); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
    const totalRequests = recentLogs.length;
    const successfulRequests = recentLogs.filter(l => l.statusCode < 400).length;
    const blockedRequests = recentLogs.filter(l => l.statusCode === 403 || l.errorType === 'blocked').length;
    
    const avgResponseTime = recentLogs.reduce((sum, log) => sum + log.responseTime, 0) / totalRequests || 0;
    
    const totalProxies = this.proxyHealth.size;
    const healthyProxies = Array.from(this.proxyHealth.values()).filter(p => p.isHealthy).length;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    let riskLevel: SecurityMetrics['riskLevel'] = 'low';
    const errorRate = (totalRequests - successfulRequests) / totalRequests;
    
    if (errorRate > 0.5 || this.emergencyMode) riskLevel = 'critical';
    else if (errorRate > 0.3 || healthyProxies < totalProxies * 0.5) riskLevel = 'high';
    else if (errorRate > 0.1 || avgResponseTime > 5000) riskLevel = 'medium';

    return {
      totalRequests,
      successfulRequests,
      blockedRequests,
      avgResponseTime,
      activeProxies: totalProxies,
      healthyProxies,
      riskLevel
    };
  }

  /**
   * üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private startHealthMonitoring(): void {
    setInterval(async () => {
      const now = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      if (now - this.lastHealthCheck > 5 * 60 * 1000) {
        await this.performHealthCheck();
        this.lastHealthCheck = now;
      }

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
      this.cleanupOldLogs();
      
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
   */
  private async performHealthCheck(): Promise<void> {
    console.log('üè• –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏...');
    
    const proxies = Array.from(this.proxyHealth.keys());
    const checkPromises = proxies.map(proxy => this.checkProxyHealth(proxy));
    
    await Promise.allSettled(checkPromises);
    
    const metrics = this.getSecurityMetrics();
    console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', metrics);
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
   */
  private cleanupOldLogs(): void {
    const oneHourAgo = Date.now() - 60 * 60 * 1000;
    this.logs = this.logs.filter(log => log.timestamp > oneHourAgo);
  }

  /**
   * üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
   */
  isEmergencyMode(): boolean {
    return this.emergencyMode;
  }

  /**
   * üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  exportLogs(format: 'json' | 'csv' = 'json'): string {
    if (format === 'csv') {
      const headers = 'timestamp,url,statusCode,responseTime,userAgent,proxyUsed,errorType,responseSize\n';
      const rows = this.logs.map(log => 
        `${log.timestamp},${log.url},${log.statusCode},${log.responseTime},"${log.userAgent}",${log.proxyUsed || ''},${log.errorType || ''},${log.responseSize}`
      ).join('\n');
      return headers + rows;
    }
    
    return JSON.stringify(this.logs, null, 2);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const advancedSecurityService = new AdvancedSecurityService();
export default AdvancedSecurityService;
