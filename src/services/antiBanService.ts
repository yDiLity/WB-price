/**
 * üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –±–∞–Ω–∞ (AntiBan Failsafe System)
 * 7-—É—Ä–æ–≤–Ω–µ–≤–∞—è –∑–∞—â–∏—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
 */

import { notificationService, BanAlert } from './notificationService';

interface ProxyInfo {
  ip: string;
  port: number;
  type: 'residential' | 'mobile' | 'datacenter';
  username?: string;
  password?: string;
  reputation: number; // 0-100
  bannedUntil?: Date;
  banCount: number;
  lastUsed: Date;
  responseTime: number;
  successRate: number;
}

interface Fingerprint {
  userAgent: string;
  acceptLanguage: string;
  acceptEncoding: string;
  referer: string;
  xRequestedWith?: string;
  dnt?: string;
  upgradeInsecureRequests?: string;
  secFetchSite?: string;
  secFetchMode?: string;
  secFetchDest?: string;
}

interface BanDetectionResult {
  isBanned: boolean;
  banType: 'ip' | 'fingerprint' | 'rate_limit' | 'unknown';
  confidence: number; // 0-100
  statusCode: number;
  responseTime: number;
  headers: Record<string, string>;
}

interface RecoveryStrategy {
  changeProxy: boolean;
  changeFingerprint: boolean;
  clearCookies: boolean;
  waitTime: number; // —Å–µ–∫—É–Ω–¥—ã
  retryCount: number;
  escalate: boolean;
}

class AntiBanService {
  private proxyPool: ProxyInfo[] = [];
  private currentProxy: ProxyInfo | null = null;
  private currentFingerprint: Fingerprint | null = null;
  private banHistory: Map<string, Date> = new Map();
  private requestCount: number = 0;
  private lastRequestTime: Date = new Date();
  private isRecovering: boolean = false;

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  private config = {
    maxRequestsPerMinute: 60,
    minDelayBetweenRequests: 5000, // 5 —Å–µ–∫—É–Ω–¥
    maxRetryAttempts: 3,
    banCooldownMinutes: 30,
    proxyRotationThreshold: 100, // –∑–∞–ø—Ä–æ—Å–æ–≤
    fingerprintRotationThreshold: 50,
    emergencyBackoffMinutes: 60
  };

  constructor() {
    this.initializeProxyPool();
    this.generateFingerprint();
  }

  /**
   * üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø—Ä–æ–∫—Å–∏
   */
  private initializeProxyPool(): void {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ
    const savedProxies = localStorage.getItem('wb-proxy-pool');
    
    if (savedProxies) {
      try {
        this.proxyPool = JSON.parse(savedProxies);
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏:', error);
      }
    }

    // –ï—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏
    if (this.proxyPool.length === 0) {
      this.proxyPool = this.generateMockProxies();
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏
    this.selectBestProxy();
  }

  /**
   * üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ fingerprint
   */
  private generateFingerprint(): void {
    const userAgents = [
      'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
      'Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36',
      'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
      'Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36'
    ];

    const referers = [
      'https://www.google.com/',
      'https://yandex.ru/',
      'https://wildberries.ru/',
      'https://m.wildberries.ru/',
      ''
    ];

    this.currentFingerprint = {
      userAgent: userAgents[Math.floor(Math.random() * userAgents.length)],
      acceptLanguage: 'ru-RU,ru;q=0.9,en;q=0.8',
      acceptEncoding: 'gzip, deflate, br',
      referer: referers[Math.floor(Math.random() * referers.length)],
      xRequestedWith: Math.random() > 0.5 ? 'XMLHttpRequest' : undefined,
      dnt: Math.random() > 0.7 ? '1' : undefined,
      upgradeInsecureRequests: '1',
      secFetchSite: 'same-origin',
      secFetchMode: 'cors',
      secFetchDest: 'empty'
    };

    console.log('üé≠ –ù–æ–≤—ã–π fingerprint —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–∞–Ω–∞
   */
  public detectBan(response: Response, responseTime: number): BanDetectionResult {
    const result: BanDetectionResult = {
      isBanned: false,
      banType: 'unknown',
      confidence: 0,
      statusCode: response.status,
      responseTime,
      headers: {}
    };

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    response.headers.forEach((value, key) => {
      result.headers[key] = value;
    });

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤
    if (response.status === 403) {
      result.isBanned = true;
      result.banType = 'ip';
      result.confidence = 95;
    } else if (response.status === 429) {
      result.isBanned = true;
      result.banType = 'rate_limit';
      result.confidence = 90;
    } else if (response.status === 503 || response.status === 502) {
      result.isBanned = true;
      result.banType = 'unknown';
      result.confidence = 70;
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã)
    if (responseTime < 100 && response.status !== 200) {
      result.confidence += 20;
    }

    // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const suspiciousHeaders = ['cf-ray', 'x-blocked', 'x-rate-limit'];
    for (const header of suspiciousHeaders) {
      if (result.headers[header]) {
        result.confidence += 15;
      }
    }

    // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    const contentLength = result.headers['content-length'];
    if (contentLength && parseInt(contentLength) < 1000 && response.status !== 200) {
      result.confidence += 10;
    }

    return result;
  }

  /**
   * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–∞–Ω–∞
   */
  public async autoRecover(banDetection: BanDetectionResult, url: string): Promise<boolean> {
    if (this.isRecovering) {
      console.log('‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
      return false;
    }

    this.isRecovering = true;

    try {
      console.log(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–Ω: ${banDetection.banType} (${banDetection.confidence}%)`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.sendBanNotification(banDetection, url);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      const strategy = this.getRecoveryStrategy(banDetection);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      await this.executeRecoveryStrategy(strategy);

      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return false;
    } finally {
      this.isRecovering = false;
    }
  }

  /**
   * üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  private getRecoveryStrategy(banDetection: BanDetectionResult): RecoveryStrategy {
    const strategy: RecoveryStrategy = {
      changeProxy: false,
      changeFingerprint: false,
      clearCookies: false,
      waitTime: 30,
      retryCount: 1,
      escalate: false
    };

    switch (banDetection.banType) {
      case 'ip':
        strategy.changeProxy = true;
        strategy.changeFingerprint = true;
        strategy.clearCookies = true;
        strategy.waitTime = 60;
        break;

      case 'rate_limit':
        strategy.waitTime = 120;
        strategy.changeFingerprint = true;
        break;

      case 'fingerprint':
        strategy.changeFingerprint = true;
        strategy.clearCookies = true;
        strategy.waitTime = 30;
        break;

      default:
        strategy.changeProxy = true;
        strategy.changeFingerprint = true;
        strategy.clearCookies = true;
        strategy.waitTime = 90;
        strategy.escalate = true;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –±–∞–Ω–µ
    if (banDetection.confidence > 90) {
      strategy.waitTime *= 2;
    }

    return strategy;
  }

  /**
   * ‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  private async executeRecoveryStrategy(strategy: RecoveryStrategy): Promise<void> {
    console.log('üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');

    // 1. –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏
    if (strategy.changeProxy) {
      this.banCurrentProxy();
      this.selectBestProxy();
      console.log('üåê –ü—Ä–æ–∫—Å–∏ –∏–∑–º–µ–Ω–µ–Ω');
    }

    // 2. –°–º–µ–Ω–∞ fingerprint
    if (strategy.changeFingerprint) {
      this.generateFingerprint();
      console.log('üé≠ Fingerprint –∏–∑–º–µ–Ω–µ–Ω');
    }

    // 3. –û—á–∏—Å—Ç–∫–∞ cookies
    if (strategy.clearCookies) {
      this.clearCookies();
      console.log('üç™ Cookies –æ—á–∏—â–µ–Ω—ã');
    }

    // 4. –û–∂–∏–¥–∞–Ω–∏–µ
    if (strategy.waitTime > 0) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${strategy.waitTime} —Å–µ–∫—É–Ω–¥...`);
      await this.sleep(strategy.waitTime * 1000);
    }

    // 5. –≠—Å–∫–∞–ª–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if (strategy.escalate) {
      await this.escalateRecovery();
    }
  }

  /**
   * üö® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ
   */
  private async sendBanNotification(banDetection: BanDetectionResult, url: string): Promise<void> {
    const alert: BanAlert = {
      type: 'ban',
      ip: this.currentProxy?.ip || 'unknown',
      proxy: this.currentProxy ? `${this.currentProxy.ip}:${this.currentProxy.port}` : undefined,
      userAgent: this.currentFingerprint?.userAgent,
      statusCode: banDetection.statusCode,
      url: url,
      timestamp: new Date(),
      retryCount: 0,
      fingerprint: JSON.stringify(this.currentFingerprint),
      reason: `${banDetection.banType} ban detected (${banDetection.confidence}% confidence)`
    };

    await notificationService.sendBanAlert(alert);
  }

  /**
   * üî• –≠—Å–∫–∞–ª–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  private async escalateRecovery(): Promise<void> {
    console.log('üî• –≠—Å–∫–∞–ª–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    this.config.minDelayBetweenRequests *= 2;
    this.config.maxRequestsPerMinute = Math.floor(this.config.maxRequestsPerMinute / 2);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const criticalAlert: BanAlert = {
      type: 'critical',
      ip: this.currentProxy?.ip || 'unknown',
      statusCode: 0,
      url: 'system',
      timestamp: new Date(),
      retryCount: 0,
      reason: 'Escalated recovery mode activated'
    };

    await notificationService.sendBanAlert(criticalAlert);

    // –ñ–¥–µ–º –¥–æ–ª—å—à–µ
    await this.sleep(this.config.emergencyBackoffMinutes * 60 * 1000);
  }

  /**
   * üåê –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  private selectBestProxy(): void {
    const availableProxies = this.proxyPool.filter(proxy => {
      return !proxy.bannedUntil || proxy.bannedUntil < new Date();
    });

    if (availableProxies.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!');
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    availableProxies.sort((a, b) => {
      const scoreA = a.reputation * 0.7 + (1000 - a.responseTime) * 0.3;
      const scoreB = b.reputation * 0.7 + (1000 - b.responseTime) * 0.3;
      return scoreB - scoreA;
    });

    this.currentProxy = availableProxies[0];
    this.currentProxy.lastUsed = new Date();

    console.log(`üåê –í—ã–±—Ä–∞–Ω –ø—Ä–æ–∫—Å–∏: ${this.currentProxy.ip}:${this.currentProxy.port} (—Ä–µ–ø—É—Ç–∞—Ü–∏—è: ${this.currentProxy.reputation})`);
  }

  /**
   * üö´ –ë–∞–Ω —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  private banCurrentProxy(): void {
    if (!this.currentProxy) return;

    this.currentProxy.banCount++;
    this.currentProxy.reputation = Math.max(0, this.currentProxy.reputation - 20);
    this.currentProxy.bannedUntil = new Date(Date.now() + this.config.banCooldownMinutes * 60 * 1000);

    console.log(`üö´ –ü—Ä–æ–∫—Å–∏ –∑–∞–±–∞–Ω–µ–Ω: ${this.currentProxy.ip} (–¥–æ ${this.currentProxy.bannedUntil.toLocaleTimeString()})`);
  }

  /**
   * üç™ –û—á–∏—Å—Ç–∫–∞ cookies
   */
  private clearCookies(): void {
    // –í –±—Ä–∞—É–∑–µ—Ä–µ –æ—á–∏—â–∞–µ–º localStorage –∏ sessionStorage
    try {
      localStorage.removeItem('wb-session');
      sessionStorage.clear();
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ cookies:', error);
    }
  }

  /**
   * üò¥ –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–∫—Å–∏
   */
  private generateMockProxies(): ProxyInfo[] {
    const mockProxies: ProxyInfo[] = [];
    
    for (let i = 0; i < 10; i++) {
      mockProxies.push({
        ip: `192.168.1.${100 + i}`,
        port: 8080 + i,
        type: ['residential', 'mobile', 'datacenter'][i % 3] as any,
        reputation: 70 + Math.random() * 30,
        banCount: 0,
        lastUsed: new Date(Date.now() - Math.random() * 86400000),
        responseTime: 100 + Math.random() * 500,
        successRate: 85 + Math.random() * 15
      });
    }

    return mockProxies;
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  public getStats(): {
    currentProxy: ProxyInfo | null;
    proxyPoolSize: number;
    bannedProxies: number;
    requestCount: number;
    isRecovering: boolean;
    config: typeof this.config;
  } {
    const bannedProxies = this.proxyPool.filter(p => 
      p.bannedUntil && p.bannedUntil > new Date()
    ).length;

    return {
      currentProxy: this.currentProxy,
      proxyPoolSize: this.proxyPool.length,
      bannedProxies,
      requestCount: this.requestCount,
      isRecovering: this.isRecovering,
      config: { ...this.config }
    };
  }

  /**
   * ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  public updateConfig(newConfig: Partial<typeof this.config>): void {
    this.config = { ...this.config, ...newConfig };
    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AntiBan –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /**
   * üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è
   */
  public forceRotation(): void {
    this.generateFingerprint();
    this.selectBestProxy();
    this.clearCookies();
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const antiBanService = new AntiBanService();
export default AntiBanService;
export type { ProxyInfo, Fingerprint, BanDetectionResult, RecoveryStrategy };
