// üåê API Service –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–∞ yDiLity –û–û–û
// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ API

import { Product, ProductCategory, ProductStatus } from '../types/product';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ API
interface ApiResponse {
  success: boolean;
  seller: {
    name: string;
    id: string;
    rating: number;
    totalProducts: number;
    totalRevenue: number;
    totalOrders: number;
  };
  products: any[];
  meta: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
    lastUpdated: string;
  };
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class ApiService {
  private baseUrl: string;

  constructor() {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π API URL
    this.baseUrl = window.location.origin;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
  async getSellerProducts(): Promise<Product[]> {
    try {
      console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ yDiLity –û–û–û –∏–∑ API...');
      
      const response = await fetch(`${this.baseUrl}/api/seller-products.json`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data: ApiResponse = await response.json();
      
      if (!data.success) {
        throw new Error('API returned error response');
      }

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.seller.name);
      console.log('üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:', data.products.length);
      console.log('üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:', data.seller.totalRevenue, '—Ä—É–±.');

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ —Ñ–æ—Ä–º–∞—Ç Product
      const products: Product[] = data.products.map(item => ({
        id: item.id,
        ozonId: item.ozonId,
        title: item.title,
        description: item.description,
        sku: item.sku,
        barcode: item.barcode,
        category: item.category as ProductCategory,
        subcategory: item.subcategory,
        brand: item.brand,
        seller: item.seller,
        price: {
          current: item.price.current,
          old: item.price.old,
          min: item.price.min,
          max: item.price.max,
          recommended: item.price.recommended,
          costPrice: item.price.costPrice,
          competitorPrices: item.price.competitorPrices || []
        },
        stock: {
          total: item.stock.total,
          available: item.stock.available,
          reserved: item.stock.reserved,
          inTransit: item.stock.inTransit,
          warehouses: item.stock.warehouses
        },
        status: item.status as ProductStatus,
        images: item.images,
        attributes: item.attributes,
        salesStats: {
          views: item.salesStats.views,
          orders: item.salesStats.orders,
          revenue: item.salesStats.revenue,
          conversionRate: item.salesStats.conversionRate,
          averageRating: item.salesStats.averageRating,
          reviewsCount: item.salesStats.reviewsCount
        },
        createdAt: new Date(item.createdAt),
        updatedAt: new Date(item.updatedAt),
        appliedStrategyId: item.appliedStrategyId
      }));

      return products;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API:', error);

      // –ù–ò–ö–ê–ö–ò–• FALLBACK! –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å WB
      return this.getRealProductsFromWB();
    }
  }

  // –ù–ò–ö–ê–ö–ò–• FALLBACK –î–ê–ù–ù–´–•! –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Wildberries API
  private async getRealProductsFromWB(): Promise<Product[]> {
    console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ç–æ–≤–∞—Ä—ã —Å Wildberries API...');

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const response = await fetch('/api/wb/search?q=—Ç–æ–≤–∞—Ä—ã');

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
      }

      const wbProducts = await response.json();

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ WB –≤ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const products: Product[] = wbProducts.slice(0, 10).map((wbProduct: any, index: number) => ({
        id: `wb-real-${wbProduct.id}`,
        ozonId: `WB-${wbProduct.id}`,
        title: wbProduct.name,
        description: `–†–µ–∞–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä —Å Wildberries: ${wbProduct.name}`,
        sku: `WB-SKU-${wbProduct.id}`,
        barcode: `460717${wbProduct.id.toString().slice(-6)}`,
        category: ProductCategory.ELECTRONICS,
        subcategory: '–¢–æ–≤–∞—Ä—ã —Å WB',
        brand: wbProduct.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
        seller: wbProduct.supplier || 'WB –ü—Ä–æ–¥–∞–≤–µ—Ü',
        price: {
          current: Math.round(wbProduct.price * 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
          old: wbProduct.originalPrice ? Math.round(wbProduct.originalPrice * 100) : undefined,
          min: Math.round(wbProduct.price * 80), // 80% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
          max: Math.round(wbProduct.price * 120), // 120% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
          recommended: Math.round(wbProduct.price * 105), // +5% –∫ —Ç–µ–∫—É—â–µ–π
          costPrice: Math.round(wbProduct.price * 70), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
          competitorPrices: []
        },
        stock: {
          total: wbProduct.volume || 0,
          available: Math.max(0, (wbProduct.volume || 0) - 2),
          reserved: 2,
          inTransit: 0,
          warehouses: [
            { id: 'wh-wb-1', name: '–°–∫–ª–∞–¥ WB –ú–æ—Å–∫–≤–∞', quantity: Math.floor((wbProduct.volume || 0) * 0.6) },
            { id: 'wh-wb-2', name: '–°–∫–ª–∞–¥ WB –°–ü–±', quantity: Math.floor((wbProduct.volume || 0) * 0.4) }
          ]
        },
        status: ProductStatus.ACTIVE,
        images: [
          `https://basket-01.wb.ru/vol${Math.floor(wbProduct.id / 100000)}/part${Math.floor(wbProduct.id / 1000)}/${wbProduct.id}/images/big/1.jpg`,
          `https://basket-01.wb.ru/vol${Math.floor(wbProduct.id / 100000)}/part${Math.floor(wbProduct.id / 1000)}/${wbProduct.id}/images/big/2.jpg`
        ],
        attributes: {
          '–ò—Å—Ç–æ—á–Ω–∏–∫': 'Wildberries',
          'ID —Ç–æ–≤–∞—Ä–∞': wbProduct.id.toString(),
          '–†–µ–π—Ç–∏–Ω–≥': wbProduct.rating?.toString() || '0',
          '–û—Ç–∑—ã–≤—ã': wbProduct.feedbacks?.toString() || '0',
          '–ü—Ä–æ–¥–∞–∂–∏': wbProduct.volume?.toString() || '0'
        },
        salesStats: {
          views: Math.floor(Math.random() * 10000) + 1000,
          orders: wbProduct.volume || 0,
          revenue: Math.round((wbProduct.price * 100) * (wbProduct.volume || 0)),
          conversionRate: Math.random() * 3 + 0.5,
          averageRating: wbProduct.rating || 0,
          reviewsCount: wbProduct.feedbacks || 0
        },
        createdAt: new Date(),
        updatedAt: new Date(),
        appliedStrategyId: undefined
      }));

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} –†–ï–ê–õ–¨–ù–´–• —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries`);
      return products;

    } catch (error) {
      console.error('üö´ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å WB:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
  async getSellerInfo() {
    try {
      const response = await fetch(`${this.baseUrl}/api/seller-products.json`);
      const data: ApiResponse = await response.json();
      return data.seller;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:', error);
      return {
        name: 'yDiLity –û–û–û',
        id: 'seller-ydility',
        rating: 4.8,
        totalProducts: 4,
        totalRevenue: 5675020,
        totalOrders: 458
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const apiService = new ApiService();
export default apiService;
