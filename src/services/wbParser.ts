// üï∑Ô∏è Wildberries Safe Parser Service
// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ WB —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–∞–Ω–æ–≤

export interface WBCompetitor {
  id: number
  name: string
  brand: string
  seller: string
  price: number
  originalPrice?: number
  discount?: number
  rating: number
  reviewsCount: number
  url: string
  image: string
  isAvailable: boolean
}

export interface WBSearchResult {
  competitors: WBCompetitor[]
  totalFound: number
  searchQuery: string
  timestamp: string
}

class WildberriesParser {
  private lastRequestTime = 0
  private requestCount = 0
  private readonly MIN_DELAY = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞ –º–∏–Ω–∏–º—É–º
  private readonly MAX_DELAY = 5000 // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
  private readonly MAX_REQUESTS_PER_HOUR = 60
  private readonly REQUEST_RESET_TIME = 60 * 60 * 1000 // 1 —á–∞—Å

  // üé≠ –ú–∞—Å—Å–∏–≤ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
  private userAgents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
  ]

  constructor() {
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(() => {
      this.requestCount = 0
    }, this.REQUEST_RESET_TIME)
  }

  // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
  private checkRateLimit(): boolean {
    if (this.requestCount >= this.MAX_REQUESTS_PER_HOUR) {
      console.warn('Rate limit exceeded. Please wait before making more requests.')
      return false
    }
    return true
  }

  // ‚è±Ô∏è –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  private async smartDelay(): Promise<void> {
    const now = Date.now()
    const timeSinceLastRequest = now - this.lastRequestTime
    
    // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    const randomDelay = Math.random() * (this.MAX_DELAY - this.MIN_DELAY) + this.MIN_DELAY
    const requiredDelay = Math.max(0, randomDelay - timeSinceLastRequest)
    
    if (requiredDelay > 0) {
      await new Promise(resolve => setTimeout(resolve, requiredDelay))
    }
    
    this.lastRequestTime = Date.now()
    this.requestCount++
  }

  // üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
  private getRandomUserAgent(): string {
    return this.userAgents[Math.floor(Math.random() * this.userAgents.length)]
  }

  // üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å retry
  private async safeRequest(url: string, retries = 3): Promise<any> {
    if (!this.checkRateLimit()) {
      throw new Error('Rate limit exceeded')
    }

    await this.smartDelay()

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'User-Agent': this.getRandomUserAgent(),
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Cache-Control': 'max-age=0'
          }
        })

        if (response.status === 429) {
          // Rate limit - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
          const delay = Math.pow(2, attempt) * 1000 // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          console.warn(`Rate limited, waiting ${delay}ms before retry ${attempt}/${retries}`)
          await new Promise(resolve => setTimeout(resolve, delay))
          continue
        }

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`)
        }

        return await response.json()
      } catch (error) {
        console.warn(`Request attempt ${attempt}/${retries} failed:`, error)
        
        if (attempt === retries) {
          throw error
        }
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        const delay = Math.pow(2, attempt) * 1000
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    }
  }

  // üîç –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  async searchCompetitors(query: string, limit = 20): Promise<WBSearchResult> {
    try {
      console.log(`üîç Searching for: "${query}"`)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –ø–æ–∏—Å–∫–∞ WB
      const searchUrl = `https://search.wb.ru/exactmatch/ru/common/v4/search?appType=1&curr=rub&dest=-1257786&query=${encodeURIComponent(query)}&resultset=catalog&sort=popular&spp=30&suppressSpellcheck=false`
      
      const data = await this.safeRequest(searchUrl)
      
      if (!data?.data?.products) {
        return {
          competitors: [],
          totalFound: 0,
          searchQuery: query,
          timestamp: new Date().toISOString()
        }
      }

      const products = data.data.products.slice(0, limit)
      
      const competitors: WBCompetitor[] = products.map((product: any) => {
        const price = product.salePriceU ? product.salePriceU / 100 : 0
        const originalPrice = product.priceU ? product.priceU / 100 : price
        const discount = originalPrice > price ? Math.round(((originalPrice - price) / originalPrice) * 100) : 0

        return {
          id: product.id,
          name: product.name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          brand: product.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
          seller: product.supplier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü',
          price: price,
          originalPrice: originalPrice > price ? originalPrice : undefined,
          discount: discount > 0 ? discount : undefined,
          rating: product.rating ? Math.round(product.rating * 10) / 10 : 0,
          reviewsCount: product.feedbacks || 0,
          url: `https://www.wildberries.ru/catalog/${product.id}/detail.aspx`,
          image: product.pics && product.pics.length > 0 
            ? `https://basket-${String(product.id).slice(0, 2).padStart(2, '0')}.wb.ru/vol${String(product.id).slice(0, -5)}/part${String(product.id).slice(0, -3)}/${product.id}/images/big/1.jpg`
            : '',
          isAvailable: product.totalQuantity > 0
        }
      })

      console.log(`‚úÖ Found ${competitors.length} competitors for "${query}"`)

      return {
        competitors,
        totalFound: data.data.total || competitors.length,
        searchQuery: query,
        timestamp: new Date().toISOString()
      }

    } catch (error) {
      console.error('Error searching competitors:', error)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return {
        competitors: [],
        totalFound: 0,
        searchQuery: query,
        timestamp: new Date().toISOString()
      }
    }
  }

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
  async getProductDetails(productId: number): Promise<WBCompetitor | null> {
    try {
      console.log(`üìä Getting details for product: ${productId}`)
      
      const detailUrl = `https://card.wb.ru/cards/detail?appType=1&curr=rub&dest=-1257786&nm=${productId}`
      
      const data = await this.safeRequest(detailUrl)
      
      if (!data?.data?.products?.[0]) {
        return null
      }

      const product = data.data.products[0]
      const price = product.salePriceU ? product.salePriceU / 100 : 0
      const originalPrice = product.priceU ? product.priceU / 100 : price

      return {
        id: product.id,
        name: product.name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        brand: product.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
        seller: product.supplier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü',
        price: price,
        originalPrice: originalPrice > price ? originalPrice : undefined,
        discount: originalPrice > price ? Math.round(((originalPrice - price) / originalPrice) * 100) : undefined,
        rating: product.rating ? Math.round(product.rating * 10) / 10 : 0,
        reviewsCount: product.feedbacks || 0,
        url: `https://www.wildberries.ru/catalog/${product.id}/detail.aspx`,
        image: product.pics && product.pics.length > 0 
          ? `https://basket-${String(product.id).slice(0, 2).padStart(2, '0')}.wb.ru/vol${String(product.id).slice(0, -5)}/part${String(product.id).slice(0, -3)}/${product.id}/images/big/1.jpg`
          : '',
        isAvailable: product.totalQuantity > 0
      }

    } catch (error) {
      console.error(`Error getting product details for ${productId}:`, error)
      return null
    }
  }

  // üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  async monitorCompetitorPrices(productIds: number[]): Promise<WBCompetitor[]> {
    const results: WBCompetitor[] = []
    
    console.log(`üìà Monitoring prices for ${productIds.length} products`)
    
    for (const productId of productIds) {
      try {
        const product = await this.getProductDetails(productId)
        if (product) {
          results.push(product)
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        await new Promise(resolve => setTimeout(resolve, 2000))
        
      } catch (error) {
        console.error(`Error monitoring product ${productId}:`, error)
      }
    }
    
    console.log(`‚úÖ Successfully monitored ${results.length} products`)
    return results
  }

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
  getStats() {
    return {
      requestCount: this.requestCount,
      maxRequestsPerHour: this.MAX_REQUESTS_PER_HOUR,
      remainingRequests: this.MAX_REQUESTS_PER_HOUR - this.requestCount,
      lastRequestTime: this.lastRequestTime,
      isRateLimited: this.requestCount >= this.MAX_REQUESTS_PER_HOUR
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const wbParser = new WildberriesParser()
export default wbParser
