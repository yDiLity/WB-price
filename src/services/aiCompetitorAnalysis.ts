/**
 * ü§ñ AI-–º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI GPT + ML –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
 */

interface CompetitorData {
  id: string;
  name: string;
  price: number;
  rating: number;
  reviewCount: number;
  position: number;
  category: string;
  brand: string;
  features: string[];
  images: string[];
  description: string;
  salesVolume?: number;
  priceHistory: Array<{ date: string; price: number }>;
}

interface MarketAnalysis {
  averagePrice: number;
  priceRange: { min: number; max: number };
  topCompetitors: CompetitorData[];
  marketTrends: {
    priceDirection: 'up' | 'down' | 'stable';
    demandLevel: 'low' | 'medium' | 'high';
    competitionLevel: 'low' | 'medium' | 'high';
    seasonality: string;
  };
  opportunities: string[];
  threats: string[];
}

interface PricingRecommendation {
  recommendedPrice: number;
  confidence: number;
  reasoning: string;
  expectedPosition: number;
  expectedSales: number;
  riskLevel: 'low' | 'medium' | 'high';
  alternatives: Array<{
    price: number;
    strategy: string;
    pros: string[];
    cons: string[];
  }>;
}

interface AIInsight {
  type: 'pricing' | 'positioning' | 'marketing' | 'product';
  title: string;
  description: string;
  actionItems: string[];
  priority: 'low' | 'medium' | 'high' | 'critical';
  impact: number; // 1-10
  effort: number; // 1-10
}

class AICompetitorAnalysisService {
  private openaiApiKey: string;
  private analysisCache: Map<string, { data: any; timestamp: number }> = new Map();

  constructor() {
    this.openaiApiKey = import.meta.env.VITE_OPENAI_API_KEY || '';
  }

  /**
   * üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
   */
  async analyzeCompetitors(
    productId: string,
    competitors: CompetitorData[],
    currentPrice: number
  ): Promise<{
    marketAnalysis: MarketAnalysis;
    pricingRecommendation: PricingRecommendation;
    insights: AIInsight[];
  }> {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cacheKey = `analysis_${productId}_${JSON.stringify(competitors.map(c => c.id))}`;
    const cached = this.analysisCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç
      return cached.data;
    }

    try {
      // 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
      const marketAnalysis = await this.performMarketAnalysis(competitors);

      // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
      const pricingRecommendation = await this.generatePricingRecommendation(
        competitors,
        currentPrice,
        marketAnalysis
      );

      // 3. AI-–∏–Ω—Å–∞–π—Ç—ã —á–µ—Ä–µ–∑ OpenAI
      const insights = await this.generateAIInsights(
        competitors,
        marketAnalysis,
        currentPrice
      );

      const result = {
        marketAnalysis,
        pricingRecommendation,
        insights
      };

      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.analysisCache.set(cacheKey, {
        data: result,
        timestamp: Date.now()
      });

      return result;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞:', error);
      throw error;
    }
  }

  /**
   * üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
   */
  private async performMarketAnalysis(competitors: CompetitorData[]): Promise<MarketAnalysis> {
    const prices = competitors.map(c => c.price);
    const averagePrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    const topCompetitors = competitors
      .sort((a, b) => a.position - b.position)
      .slice(0, 5);

    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    const priceDirection = this.analyzePriceTrends(competitors);
    const demandLevel = this.analyzeDemandLevel(competitors);
    const competitionLevel = this.analyzeCompetitionLevel(competitors);

    // –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —É–≥—Ä–æ–∑
    const opportunities = this.identifyOpportunities(competitors, averagePrice);
    const threats = this.identifyThreats(competitors);

    return {
      averagePrice,
      priceRange: { min: minPrice, max: maxPrice },
      topCompetitors,
      marketTrends: {
        priceDirection,
        demandLevel,
        competitionLevel,
        seasonality: '–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö'
      },
      opportunities,
      threats
    };
  }

  /**
   * üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
   */
  private async generatePricingRecommendation(
    competitors: CompetitorData[],
    currentPrice: number,
    marketAnalysis: MarketAnalysis
  ): Promise<PricingRecommendation> {
    // ML-–∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
    const optimalPrice = this.calculateOptimalPrice(competitors, marketAnalysis);
    
    // –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const confidence = this.calculateConfidence(competitors, marketAnalysis);
    
    // –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–∑–∏—Ü–∏–∏
    const expectedPosition = this.predictPosition(optimalPrice, competitors);
    
    // –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
    const expectedSales = this.predictSales(optimalPrice, competitors, marketAnalysis);
    
    // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
    const riskLevel = this.assessRisk(optimalPrice, currentPrice, marketAnalysis);

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    const alternatives = this.generateAlternativeStrategies(
      optimalPrice,
      competitors,
      marketAnalysis
    );

    return {
      recommendedPrice: optimalPrice,
      confidence,
      reasoning: this.generateReasoning(optimalPrice, currentPrice, marketAnalysis),
      expectedPosition,
      expectedSales,
      riskLevel,
      alternatives
    };
  }

  /**
   * üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–∏–Ω—Å–∞–π—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI
   */
  private async generateAIInsights(
    competitors: CompetitorData[],
    marketAnalysis: MarketAnalysis,
    currentPrice: number
  ): Promise<AIInsight[]> {
    if (!this.openaiApiKey) {
      return this.generateMockInsights(competitors, marketAnalysis, currentPrice);
    }

    try {
      const prompt = this.buildAnalysisPrompt(competitors, marketAnalysis, currentPrice);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openaiApiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4-turbo-preview',
          messages: [
            {
              role: 'system',
              content: '–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ e-commerce –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2000
        })
      });

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content;

      return this.parseAIResponse(aiResponse);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ OpenAI API:', error);
      return this.generateMockInsights(competitors, marketAnalysis, currentPrice);
    }
  }

  /**
   * üìù –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI
   */
  private buildAnalysisPrompt(
    competitors: CompetitorData[],
    marketAnalysis: MarketAnalysis,
    currentPrice: number
  ): string {
    return `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ Wildberries:

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
- –ú–æ—è —Ü–µ–Ω–∞: ${currentPrice} —Ä—É–±.
- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Ä—ã–Ω–∫–∞: ${marketAnalysis.averagePrice} —Ä—É–±.
- –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${marketAnalysis.priceRange.min} - ${marketAnalysis.priceRange.max} —Ä—É–±.
- –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏: ${marketAnalysis.marketTrends.competitionLevel}
- –¢—Ä–µ–Ω–¥ —Ü–µ–Ω: ${marketAnalysis.marketTrends.priceDirection}

–¢–û–ü-5 –ö–û–ù–ö–£–†–ï–ù–¢–û–í:
${marketAnalysis.topCompetitors.map((c, i) => 
  `${i+1}. ${c.name} - ${c.price} —Ä—É–±., —Ä–µ–π—Ç–∏–Ω–≥ ${c.rating}, –ø–æ–∑–∏—Ü–∏—è ${c.position}`
).join('\n')}

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
${marketAnalysis.opportunities.join('\n- ')}

–£–ì–†–û–ó–´:
${marketAnalysis.threats.join('\n- ')}

–î–∞–π—Ç–µ 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {
    "type": "pricing|positioning|marketing|product",
    "title": "–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫",
    "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "actionItems": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 1", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 2"],
    "priority": "low|medium|high|critical",
    "impact": 1-10,
    "effort": 1-10
  }
]
`;
  }

  /**
   * üîç –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI
   */
  private parseAIResponse(response: string): AIInsight[] {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const jsonMatch = response.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
    }

    // Fallback –∫ –º–æ–∫–æ–≤—ã–º –∏–Ω—Å–∞–π—Ç–∞–º
    return this.generateMockInsights([], {} as MarketAnalysis, 0);
  }

  /**
   * üéØ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
   */
  private calculateOptimalPrice(
    competitors: CompetitorData[],
    marketAnalysis: MarketAnalysis
  ): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã
    const { averagePrice, priceRange } = marketAnalysis;
    const topCompetitorPrices = marketAnalysis.topCompetitors.slice(0, 3).map(c => c.price);
    
    // –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è - —Ç–æ–ø-3
    const targetPrice = topCompetitorPrices.length > 0 
      ? Math.min(...topCompetitorPrices) - 1
      : averagePrice * 0.95;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    return Math.max(
      priceRange.min * 1.05,
      Math.min(targetPrice, priceRange.max * 0.95)
    );
  }

  /**
   * üìä –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  private analyzePriceTrends(competitors: CompetitorData[]): 'up' | 'down' | 'stable' {
    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    const recentChanges = competitors.filter(c => c.priceHistory.length > 1);
    if (recentChanges.length === 0) return 'stable';

    let upCount = 0;
    let downCount = 0;

    recentChanges.forEach(competitor => {
      const history = competitor.priceHistory;
      const recent = history[history.length - 1].price;
      const previous = history[history.length - 2].price;
      
      if (recent > previous) upCount++;
      else if (recent < previous) downCount++;
    });

    if (upCount > downCount * 1.5) return 'up';
    if (downCount > upCount * 1.5) return 'down';
    return 'stable';
  }

  private analyzeDemandLevel(competitors: CompetitorData[]): 'low' | 'medium' | 'high' {
    const avgReviews = competitors.reduce((sum, c) => sum + c.reviewCount, 0) / competitors.length;
    
    if (avgReviews > 1000) return 'high';
    if (avgReviews > 100) return 'medium';
    return 'low';
  }

  private analyzeCompetitionLevel(competitors: CompetitorData[]): 'low' | 'medium' | 'high' {
    const competitorCount = competitors.length;
    const avgRating = competitors.reduce((sum, c) => sum + c.rating, 0) / competitors.length;
    
    if (competitorCount > 20 && avgRating > 4.5) return 'high';
    if (competitorCount > 10 && avgRating > 4.0) return 'medium';
    return 'low';
  }

  private identifyOpportunities(competitors: CompetitorData[], avgPrice: number): string[] {
    const opportunities = [];
    
    const lowRatedCompetitors = competitors.filter(c => c.rating < 4.0);
    if (lowRatedCompetitors.length > 0) {
      opportunities.push('–ï—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –∏—Ö –¥–æ–ª—é');
    }

    const highPricedCompetitors = competitors.filter(c => c.price > avgPrice * 1.2);
    if (highPricedCompetitors.length > 0) {
      opportunities.push('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∑–∞–≤—ã—à–∞—é—Ç —Ü–µ–Ω—ã - –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ª—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ');
    }

    return opportunities;
  }

  private identifyThreats(competitors: CompetitorData[]): string[] {
    const threats = [];
    
    const strongCompetitors = competitors.filter(c => c.rating > 4.7 && c.reviewCount > 500);
    if (strongCompetitors.length > 0) {
      threats.push('–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∏–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∑—ã–≤–æ–≤');
    }

    return threats;
  }

  private calculateConfidence(competitors: CompetitorData[], marketAnalysis: MarketAnalysis): number {
    // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –∫–∞—á–µ—Å—Ç–≤–∞
    let confidence = 0.5;
    
    if (competitors.length > 10) confidence += 0.2;
    if (competitors.length > 20) confidence += 0.1;
    
    const hasHistoryData = competitors.filter(c => c.priceHistory.length > 1).length;
    confidence += (hasHistoryData / competitors.length) * 0.2;
    
    return Math.min(confidence, 0.95);
  }

  private predictPosition(price: number, competitors: CompetitorData[]): number {
    const cheaperCompetitors = competitors.filter(c => c.price < price).length;
    return cheaperCompetitors + 1;
  }

  private predictSales(price: number, competitors: CompetitorData[], marketAnalysis: MarketAnalysis): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂
    const position = this.predictPosition(price, competitors);
    const demandMultiplier = marketAnalysis.marketTrends.demandLevel === 'high' ? 1.5 : 
                           marketAnalysis.marketTrends.demandLevel === 'medium' ? 1.0 : 0.7;
    
    const baseSales = Math.max(100 - position * 10, 10);
    return Math.round(baseSales * demandMultiplier);
  }

  private assessRisk(optimalPrice: number, currentPrice: number, marketAnalysis: MarketAnalysis): 'low' | 'medium' | 'high' {
    const priceChange = Math.abs(optimalPrice - currentPrice) / currentPrice;
    
    if (priceChange > 0.3) return 'high';
    if (priceChange > 0.15) return 'medium';
    return 'low';
  }

  private generateReasoning(optimalPrice: number, currentPrice: number, marketAnalysis: MarketAnalysis): string {
    const change = optimalPrice - currentPrice;
    const changePercent = (change / currentPrice * 100).toFixed(1);
    
    if (change > 0) {
      return `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ ${changePercent}% –¥–æ ${optimalPrice} —Ä—É–±. –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —Ä—ã–Ω–∫–∞ ${marketAnalysis.averagePrice} —Ä—É–±., —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.`;
    } else {
      return `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ ${Math.abs(parseFloat(changePercent))}% –¥–æ ${optimalPrice} —Ä—É–±. –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ–∏—Å–∫–µ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂.`;
    }
  }

  private generateAlternativeStrategies(
    optimalPrice: number,
    competitors: CompetitorData[],
    marketAnalysis: MarketAnalysis
  ): PricingRecommendation['alternatives'] {
    return [
      {
        price: optimalPrice * 0.95,
        strategy: '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è',
        pros: ['–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –¥–æ–ª–∏ —Ä—ã–Ω–∫–∞', '–í—ã—Å–æ–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ'],
        cons: ['–°–Ω–∏–∂–µ–Ω–∏–µ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏', '–†–∏—Å–∫ —Ü–µ–Ω–æ–≤–æ–π –≤–æ–π–Ω—ã']
      },
      {
        price: optimalPrice * 1.05,
        strategy: '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è',
        pros: ['–í—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–µ–º–∏—É–º'],
        cons: ['–ú–µ–Ω—å—à–µ –ø—Ä–æ–¥–∞–∂', '–†–∏—Å–∫ –ø–æ—Ç–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏–π']
      }
    ];
  }

  private generateMockInsights(
    competitors: CompetitorData[],
    marketAnalysis: MarketAnalysis,
    currentPrice: number
  ): AIInsight[] {
    return [
      {
        type: 'pricing',
        title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
        description: '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π',
        actionItems: [
          '–°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ 5-10% –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ç–æ–ø-5',
          '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        ],
        priority: 'high',
        impact: 8,
        effort: 3
      },
      {
        type: 'marketing',
        title: '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏',
        description: '–ö–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ñ–æ—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é',
        actionItems: [
          '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏'
        ],
        priority: 'medium',
        impact: 6,
        effort: 5
      }
    ];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const aiCompetitorAnalysis = new AICompetitorAnalysisService();
export default AICompetitorAnalysisService;
