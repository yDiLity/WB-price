// üé≠ Demo Wildberries API Service
// –î–µ–º–æ-—Å–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API

import { WBProduct, WBPriceInfo, WBStock } from './wildberriesApi'

// üéØ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ WB
const categories = [
  '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–î–µ—Ç—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', '–û–±—É–≤—å',
  '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–ö—Ä–∞—Å–æ—Ç–∞', '–ó–¥–æ—Ä–æ–≤—å–µ', '–î–æ–º –∏ –¥–∞—á–∞', '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
  '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', '–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã', '–ö–Ω–∏–≥–∏', '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã', '–ó–æ–æ—Ç–æ–≤–∞—Ä—ã'
]

// üè∑Ô∏è –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
const brands = [
  'ZARA', 'H&M', 'Nike', 'Adidas', 'Apple', 'Samsung', 'Xiaomi',
  'Uniqlo', 'Mango', 'Bershka', 'Pull&Bear', 'Stradivarius',
  'Reserved', 'Cropp', 'House', 'Mohito', 'Sinsay'
]

// üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
const productNames = [
  '–§—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è',
  '–î–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è',
  '–ü–ª–∞—Ç—å–µ –ª–µ—Ç–Ω–µ–µ —Å –ø—Ä–∏–Ω—Ç–æ–º',
  '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –±–µ–≥–∞',
  '–†—é–∫–∑–∞–∫ –≥–æ—Ä–æ–¥—Å–∫–æ–π',
  '–°–º–∞—Ä—Ç—Ñ–æ–Ω —Å –¥–≤–æ–π–Ω–æ–π –∫–∞–º–µ—Ä–æ–π',
  '–ù–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ',
  '–ö—É—Ä—Ç–∫–∞ –¥–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è',
  '–°–≤–∏—Ç–µ—Ä –æ–≤–µ—Ä—Å–∞–π–∑',
  '–ë—Ä—é–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ',
  '–ë–ª—É–∑–∫–∞ —à–∏—Ñ–æ–Ω–æ–≤–∞—è',
  '–ë–æ—Ç–∏–Ω–∫–∏ –∑–∏–º–Ω–∏–µ',
  '–°—É–º–∫–∞ –∫–æ–∂–∞–Ω–∞—è',
  '–ß–∞—Å—ã –Ω–∞—Ä—É—á–Ω—ã–µ',
  '–ö–µ–ø–∫–∞ –±–µ–π—Å–±–æ–ª–∫–∞'
]

class DemoWildberriesApiService {
  private demoProducts: WBProduct[] = []
  private demoPrices: WBPriceInfo[] = []
  private demoStocks: WBStock[] = []

  constructor() {
    this.generateDemoData()
  }

  // üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
  private generateDemoData() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 50 –¥–µ–º–æ-—Ç–æ–≤–∞—Ä–æ–≤
    for (let i = 1; i <= 50; i++) {
      const nmID = 100000000 + i
      const brand = brands[Math.floor(Math.random() * brands.length)]
      const productName = productNames[Math.floor(Math.random() * productNames.length)]
      const category = categories[Math.floor(Math.random() * categories.length)]

      // –¢–æ–≤–∞—Ä
      const product: WBProduct = {
        nmID,
        vendorCode: `ART-${String(i).padStart(6, '0')}`,
        brand,
        title: `${brand} ${productName}`,
        photos: [
          `https://basket-01.wb.ru/vol${Math.floor(nmID/100000)}/part${Math.floor(nmID/1000)}/${nmID}/images/big/1.jpg`,
          `https://basket-01.wb.ru/vol${Math.floor(nmID/100000)}/part${Math.floor(nmID/1000)}/${nmID}/images/big/2.jpg`
        ],
        video: '',
        dimensions: {
          length: Math.floor(Math.random() * 50) + 10,
          width: Math.floor(Math.random() * 30) + 5,
          height: Math.floor(Math.random() * 20) + 2
        },
        characteristics: [
          { id: 1, name: '–°–æ—Å—Ç–∞–≤', value: '–•–ª–æ–ø–æ–∫ 95%, –≠–ª–∞—Å—Ç–∞–Ω 5%' },
          { id: 2, name: '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', value: '–¢—É—Ä—Ü–∏—è' },
          { id: 3, name: '–°–µ–∑–æ–Ω', value: '–í—Å–µ—Å–µ–∑–æ–Ω–Ω—ã–π' }
        ],
        sizes: [
          {
            chrtID: nmID * 10 + 1,
            techSize: 'M',
            wbSize: '46',
            price: Math.floor(Math.random() * 5000) + 500,
            discountedPrice: Math.floor(Math.random() * 4000) + 400,
            qty: Math.floor(Math.random() * 100)
          }
        ],
        tags: [category, brand, '–Ω–æ–≤–∏–Ω–∫–∞'],
        createdAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
        updatedAt: new Date().toISOString()
      }

      // –¶–µ–Ω–∞
      const price: WBPriceInfo = {
        nmId: nmID,
        price: product.sizes[0].price,
        discount: Math.floor(Math.random() * 50),
        promoCode: Math.floor(Math.random() * 20)
      }

      // –û—Å—Ç–∞—Ç–∫–∏
      const stock: WBStock = {
        lastChangeDate: new Date().toISOString(),
        supplierArticle: product.vendorCode,
        techSize: 'M',
        barcode: `${nmID}${Math.floor(Math.random() * 1000)}`,
        quantity: Math.floor(Math.random() * 100),
        isSupply: Math.random() > 0.5,
        isRealization: Math.random() > 0.3,
        quantityFull: Math.floor(Math.random() * 150),
        warehouse: Math.floor(Math.random() * 10) + 1,
        nmId: nmID,
        subject: category,
        category: category,
        brand: brand,
        SCCode: `SC${Math.floor(Math.random() * 1000000)}`,
        Price: product.sizes[0].price,
        Discount: price.discount
      }

      this.demoProducts.push(product)
      this.demoPrices.push(price)
      this.demoStocks.push(stock)
    }
  }

  // üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–µ–º–æ)
  async getProducts(limit = 100, offset = 0): Promise<WBProduct[]> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 500))

    return this.demoProducts.slice(offset, offset + limit)
  }

  // üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö (–¥–µ–º–æ)
  async getPrices(): Promise<WBPriceInfo[]> {
    await new Promise(resolve => setTimeout(resolve, 300))
    return this.demoPrices
  }

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–µ–º–æ)
  async getStocks(dateFrom?: string): Promise<WBStock[]> {
    await new Promise(resolve => setTimeout(resolve, 400))
    return this.demoStocks
  }

  // üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ (–¥–µ–º–æ)
  async updatePrices(prices: Array<{ nmId: number; price: number }>): Promise<boolean> {
    await new Promise(resolve => setTimeout(resolve, 800))

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    prices.forEach(({ nmId, price }) => {
      const priceIndex = this.demoPrices.findIndex(p => p.nmId === nmId)
      if (priceIndex !== -1) {
        this.demoPrices[priceIndex].price = price
      }

      const productIndex = this.demoProducts.findIndex(p => p.nmID === nmId)
      if (productIndex !== -1) {
        this.demoProducts[productIndex].sizes[0].price = price
      }
    })

    return true
  }

  // üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ (–¥–µ–º–æ)
  async getSalesStatistics(dateFrom: string, dateTo: string): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 600))

    return this.demoProducts.map(product => ({
      nmId: product.nmID,
      vendorCode: product.vendorCode,
      brand: product.brand,
      subject: product.characteristics[0]?.value || '–¢–æ–≤–∞—Ä',
      category: product.tags[0] || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
      sales: Math.floor(Math.random() * 100),
      revenue: Math.floor(Math.random() * 50000),
      orders: Math.floor(Math.random() * 80),
      clicks: Math.floor(Math.random() * 1000),
      ctr: (Math.random() * 10).toFixed(2),
      date: dateFrom
    }))
  }

  // üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–¥–µ–º–æ)
  async searchCompetitorProducts(query: string): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 700))

    // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = []
    for (let i = 1; i <= 10; i++) {
      const basePrice = Math.floor(Math.random() * 5000) + 500
      const discount = Math.floor(Math.random() * 50)
      const originalPrice = Math.floor(basePrice / (1 - discount / 100))

      competitors.push({
        id: 200000000 + i,
        name: `${query} ${brands[Math.floor(Math.random() * brands.length)]} ${productNames[Math.floor(Math.random() * productNames.length)]}`,
        brand: brands[Math.floor(Math.random() * brands.length)],
        seller: `–û–û–û "–ü–æ—Å—Ç–∞–≤—â–∏–∫ ${i}"`,
        price: basePrice,
        originalPrice: discount > 0 ? originalPrice : undefined,
        discount: discount > 0 ? discount : undefined,
        rating: Math.round((Math.random() * 2 + 3) * 10) / 10,
        reviewsCount: Math.floor(Math.random() * 1000) + 10,
        url: `https://www.wildberries.ru/catalog/200000${i}/detail.aspx`,
        image: `https://via.placeholder.com/300x400/4299e1/ffffff?text=–¢–æ–≤–∞—Ä+${i}`,
        isAvailable: Math.random() > 0.1 // 90% —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
      })
    }

    return competitors
  }

  // üè™ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–∞—Ö (–¥–µ–º–æ)
  async getWarehouses(): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 300))

    return [
      { id: 1, name: '–ö–æ–ª–µ–¥–∏–Ω–æ', address: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', type: '–û—Å–Ω–æ–≤–Ω–æ–π' },
      { id: 2, name: '–ü–æ–¥–æ–ª—å—Å–∫', address: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', type: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π' },
      { id: 3, name: '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å', address: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', type: '–û—Å–Ω–æ–≤–Ω–æ–π' },
      { id: 4, name: '–ö–∞–∑–∞–Ω—å', address: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', type: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π' },
      { id: 5, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', address: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', type: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π' }
    ]
  }

  // üöö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö (–¥–µ–º–æ)
  async getSupplies(): Promise<any[]> {
    await new Promise(resolve => setTimeout(resolve, 400))

    return [
      {
        id: 'WB-SUP-001',
        name: '–ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ1',
        status: '–í –ø—É—Ç–∏',
        warehouse: '–ö–æ–ª–µ–¥–∏–Ω–æ',
        items: Math.floor(Math.random() * 100) + 50,
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        expectedAt: new Date(Date.now() + 1 * 24 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'WB-SUP-002',
        name: '–ü–æ—Å—Ç–∞–≤–∫–∞ ‚Ññ2',
        status: '–ü—Ä–∏–Ω—è—Ç–∞',
        warehouse: '–ü–æ–¥–æ–ª—å—Å–∫',
        items: Math.floor(Math.random() * 80) + 30,
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
        expectedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
      }
    ]
  }

  // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
  refreshDemoData() {
    this.demoProducts = []
    this.demoPrices = []
    this.demoStocks = []
    this.generateDemoData()
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ–º–æ-—Å–µ—Ä–≤–∏—Å–∞
export const demoWildberriesApi = new DemoWildberriesApiService()
export default demoWildberriesApi
