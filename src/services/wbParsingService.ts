/**
 * üï∑Ô∏è –°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */

import { wbAntiBlockService } from './wbAntiBlockService';

interface WBProduct {
  id: string;
  name: string;
  price: number;
  oldPrice?: number;
  rating: number;
  reviewCount: number;
  seller: string;
  sellerId: string;
  category: string;
  brand: string;
  images: string[];
  url: string;
  inStock: boolean;
  position?: number;
  lastUpdated: Date;
}

interface WBSearchParams {
  query: string;
  category?: string;
  priceMin?: number;
  priceMax?: number;
  page?: number;
  limit?: number;
  sort?: 'popular' | 'price_asc' | 'price_desc' | 'rating' | 'new';
}

interface WBParsingResult {
  products: WBProduct[];
  totalFound: number;
  currentPage: number;
  totalPages: number;
  searchTime: number;
  success: boolean;
  error?: string;
}

class WBParsingService {
  private baseUrls = {
    search: 'https://search.wb.ru/exactmatch/ru/common/v4/search',
    catalog: 'https://catalog.wb.ru/catalog',
    card: 'https://card.wb.ru/cards/detail',
    mobile: 'https://mobile-api.wildberries.ru/api/v1',
    content: 'https://wbx-content-v2.wbstatic.net'
  };

  private requestCount = 0;
  private lastRequestTime = 0;

  /**
   * üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries
   */
  async searchProducts(params: WBSearchParams): Promise<WBParsingResult> {
    const startTime = Date.now();
    
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ WB:', params.query);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
      await this.ensureSafeRequest();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
      const searchParams = this.buildSearchParams(params);
      const url = `${this.baseUrls.search}?${searchParams}`;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const response = await this.makeSecureRequest(url, {
        method: 'GET',
        headers: this.getSearchHeaders()
      });

      if (!response.ok) {
        throw new Error(`WB API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      
      // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const products = await this.parseSearchResults(data, params.query);
      
      const result: WBParsingResult = {
        products,
        totalFound: data.metadata?.total || products.length,
        currentPage: params.page || 1,
        totalPages: Math.ceil((data.metadata?.total || products.length) / (params.limit || 20)),
        searchTime: Date.now() - startTime,
        success: true
      };

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${result.searchTime}ms`);
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      
      return {
        products: [],
        totalFound: 0,
        currentPage: params.page || 1,
        totalPages: 0,
        searchTime: Date.now() - startTime,
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
   */
  async getProductDetails(productId: string): Promise<WBProduct | null> {
    try {
      console.log('üì¶ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞:', productId);

      await this.ensureSafeRequest();

      // –ó–∞–ø—Ä–æ—Å –∫ API –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      const url = `${this.baseUrls.card}?appType=1&curr=rub&dest=-1257786&regions=80,64,83,4,38,115,30,33,70,69,68,86,75,40,1,66,48,110,31,22,71,114&spp=27&nm=${productId}`;
      
      const response = await this.makeSecureRequest(url, {
        method: 'GET',
        headers: this.getCardHeaders()
      });

      if (!response.ok) {
        throw new Error(`WB Card API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.data?.products?.[0]) {
        console.warn('‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', productId);
        return null;
      }

      const product = await this.parseProductCard(data.data.products[0]);
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞:', product.name);
      
      return product;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞:', error);
      return null;
    }
  }

  /**
   * üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
   */
  async getCompetitorPrices(query: string, limit = 20): Promise<WBProduct[]> {
    try {
      console.log('üí∞ –ò—â–µ–º —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è:', query);

      const searchResult = await this.searchProducts({
        query,
        limit,
        sort: 'popular'
      });

      if (!searchResult.success) {
        throw new Error(searchResult.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ–∏—Å–∫–µ
      const competitors = searchResult.products.map((product, index) => ({
        ...product,
        position: index + 1
      }));

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${competitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);
      return competitors;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
   */
  private async makeSecureRequest(url: string, options: RequestInit = {}): Promise<Response> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    const secureOptions = await wbAntiBlockService.makeSecureRequest(url, options);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è WB –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      ...options.headers,
      'Accept': 'application/json, text/plain, */*',
      'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Sec-Fetch-Dest': 'empty',
      'Sec-Fetch-Mode': 'cors',
      'Sec-Fetch-Site': 'same-site',
      'X-Requested-With': 'XMLHttpRequest'
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(url, {
      ...options,
      headers
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    this.logRequest(url, response.status, response.ok);

    return response;
  }

  /**
   * ‚è±Ô∏è –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
   */
  private async ensureSafeRequest(): Promise<void> {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (5 —Å–µ–∫—É–Ω–¥)
    const minDelay = 5000;
    
    if (timeSinceLastRequest < minDelay) {
      const waitTime = minDelay - timeSinceLastRequest;
      console.log(`‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}ms –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    this.lastRequestTime = Date.now();
    this.requestCount++;

    // –ö–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É
    if (this.requestCount % 100 === 0) {
      console.log('‚òï –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (2 –º–∏–Ω—É—Ç—ã)...');
      await new Promise(resolve => setTimeout(resolve, 120000));
    }
  }

  /**
   * üîß –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private buildSearchParams(params: WBSearchParams): string {
    const searchParams = new URLSearchParams();
    
    searchParams.append('query', params.query);
    searchParams.append('resultset', 'catalog');
    searchParams.append('limit', (params.limit || 20).toString());
    searchParams.append('offset', ((params.page || 1) - 1) * (params.limit || 20)).toString());
    
    if (params.category) {
      searchParams.append('cat', params.category);
    }
    
    if (params.priceMin) {
      searchParams.append('priceU', (params.priceMin * 100).toString());
    }
    
    if (params.priceMax) {
      searchParams.append('priceU', (params.priceMax * 100).toString());
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch (params.sort) {
      case 'price_asc':
        searchParams.append('sort', 'priceup');
        break;
      case 'price_desc':
        searchParams.append('sort', 'pricedown');
        break;
      case 'rating':
        searchParams.append('sort', 'rate');
        break;
      case 'new':
        searchParams.append('sort', 'newly');
        break;
      default:
        searchParams.append('sort', 'popular');
    }

    return searchParams.toString();
  }

  /**
   * üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  private getSearchHeaders(): Record<string, string> {
    return {
      'Accept': 'application/json, text/plain, */*',
      'Accept-Language': 'ru-RU,ru;q=0.9',
      'Origin': 'https://www.wildberries.ru',
      'Referer': 'https://www.wildberries.ru/',
      'Sec-Ch-Ua': '"Chromium";v="120", "Not A(Brand";v="99"',
      'Sec-Ch-Ua-Mobile': '?0',
      'Sec-Ch-Ua-Platform': '"Windows"'
    };
  }

  /**
   * üÉè –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
   */
  private getCardHeaders(): Record<string, string> {
    return {
      'Accept': 'application/json, text/plain, */*',
      'Accept-Language': 'ru-RU,ru;q=0.9',
      'Origin': 'https://www.wildberries.ru',
      'Referer': 'https://www.wildberries.ru/catalog/',
      'Sec-Ch-Ua': '"Chromium";v="120", "Not A(Brand";v="99"',
      'Sec-Ch-Ua-Mobile': '?0',
      'Sec-Ch-Ua-Platform': '"Windows"'
    };
  }

  /**
   * üîç –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private async parseSearchResults(data: any, query: string): Promise<WBProduct[]> {
    const products: WBProduct[] = [];
    
    if (!data.data?.products) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞');
      return products;
    }

    for (const item of data.data.products) {
      try {
        const product = await this.parseProductItem(item, query);
        if (product) {
          products.push(product);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞:', error);
      }
    }

    return products;
  }

  /**
   * üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
   */
  private async parseProductItem(item: any, query: string): Promise<WBProduct | null> {
    try {
      const id = item.id?.toString();
      if (!id) return null;

      const price = item.priceU ? Math.round(item.priceU / 100) : 0;
      const oldPrice = item.salePriceU ? Math.round(item.salePriceU / 100) : undefined;

      const product: WBProduct = {
        id,
        name: item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        price,
        oldPrice,
        rating: item.rating || 0,
        reviewCount: item.feedbacks || 0,
        seller: item.supplier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü',
        sellerId: item.supplierId?.toString() || '',
        category: item.subj_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
        brand: item.brand || '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞',
        images: this.extractImages(item),
        url: `https://www.wildberries.ru/catalog/${id}/detail.aspx`,
        inStock: (item.totalQuantity || 0) > 0,
        lastUpdated: new Date()
      };

      return product;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞:', error);
      return null;
    }
  }

  /**
   * üÉè –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
   */
  private async parseProductCard(item: any): Promise<WBProduct> {
    const id = item.id?.toString() || '';
    const price = item.priceU ? Math.round(item.priceU / 100) : 0;
    const oldPrice = item.salePriceU ? Math.round(item.salePriceU / 100) : undefined;

    return {
      id,
      name: item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      price,
      oldPrice,
      rating: item.rating || 0,
      reviewCount: item.feedbacks || 0,
      seller: item.supplier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü',
      sellerId: item.supplierId?.toString() || '',
      category: item.subj_name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      brand: item.brand || '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞',
      images: this.extractImages(item),
      url: `https://www.wildberries.ru/catalog/${id}/detail.aspx`,
      inStock: (item.totalQuantity || 0) > 0,
      lastUpdated: new Date()
    };
  }

  /**
   * üñºÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private extractImages(item: any): string[] {
    const images: string[] = [];
    
    if (item.pics && Array.isArray(item.pics)) {
      item.pics.forEach((pic: number) => {
        const vol = Math.floor(pic / 100000);
        const part = Math.floor(pic / 1000);
        const imageUrl = `https://images.wbstatic.net/c516x688/${vol}/${part}/${pic}/1.jpg`;
        images.push(imageUrl);
      });
    }

    return images;
  }

  /**
   * üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private logRequest(url: string, status: number, success: boolean): void {
    const timestamp = new Date().toISOString();
    console.log(`üìä [${timestamp}] ${success ? '‚úÖ' : '‚ùå'} ${status} ${url}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (!success) {
      console.warn(`‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${status} ${url}`);
    }
  }

  /**
   * üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  getParsingStats(): {
    totalRequests: number;
    requestsPerMinute: number;
    lastRequestTime: Date | null;
  } {
    return {
      totalRequests: this.requestCount,
      requestsPerMinute: this.requestCount / ((Date.now() - this.lastRequestTime) / 60000) || 0,
      lastRequestTime: this.lastRequestTime ? new Date(this.lastRequestTime) : null
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const wbParsingService = new WBParsingService();
export default WBParsingService;
export type { WBProduct, WBSearchParams, WBParsingResult };
