/**
 * üöÄ –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries
 * –í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ fingerprint
 */

interface ProxyServer {
  id: string;
  host: string;
  port: number;
  username?: string;
  password?: string;
  type: 'http' | 'https' | 'socks5';
  location: string;
  isActive: boolean;
  successRate: number;
  lastUsed: Date;
  responseTime: number;
}

interface UserAgentConfig {
  userAgent: string;
  platform: string;
  browser: string;
  version: string;
  lastUpdated: Date;
}

interface RequestMetrics {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  averageResponseTime: number;
  successRate: number;
  lastUpdated: Date;
}

class ProductionWBService {
  private proxyServers: ProxyServer[] = [];
  private userAgents: UserAgentConfig[] = [];
  private currentProxyIndex = 0;
  private currentUserAgentIndex = 0;
  private metrics: RequestMetrics = {
    totalRequests: 0,
    successfulRequests: 0,
    failedRequests: 0,
    averageResponseTime: 0,
    successRate: 0,
    lastUpdated: new Date()
  };

  constructor() {
    this.initializeProxyServers();
    this.initializeUserAgents();
    this.startMetricsMonitoring();
    this.startUserAgentRotation();
  }

  /**
   * üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω
   */
  private initializeProxyServers(): void {
    this.proxyServers = [
      // –†–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ–∫—Å–∏
      {
        id: 'proxy-ru-1',
        host: 'proxy-ru-1.example.com',
        port: 8080,
        username: 'user1',
        password: 'pass1',
        type: 'http',
        location: 'Moscow',
        isActive: true,
        successRate: 95,
        lastUsed: new Date(),
        responseTime: 150
      },
      {
        id: 'proxy-ru-2',
        host: 'proxy-ru-2.example.com',
        port: 8080,
        username: 'user2',
        password: 'pass2',
        type: 'https',
        location: 'Saint Petersburg',
        isActive: true,
        successRate: 92,
        lastUsed: new Date(),
        responseTime: 180
      },
      {
        id: 'proxy-ru-3',
        host: 'proxy-ru-3.example.com',
        port: 1080,
        username: 'user3',
        password: 'pass3',
        type: 'socks5',
        location: 'Novosibirsk',
        isActive: true,
        successRate: 88,
        lastUsed: new Date(),
        responseTime: 220
      },
      // –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
      {
        id: 'mobile-1',
        host: 'mobile-proxy-1.example.com',
        port: 8080,
        username: 'mobile1',
        password: 'mpass1',
        type: 'http',
        location: 'Moscow Mobile',
        isActive: true,
        successRate: 98,
        lastUsed: new Date(),
        responseTime: 120
      },
      {
        id: 'mobile-2',
        host: 'mobile-proxy-2.example.com',
        port: 8080,
        username: 'mobile2',
        password: 'mpass2',
        type: 'http',
        location: 'SPB Mobile',
        isActive: true,
        successRate: 96,
        lastUsed: new Date(),
        responseTime: 140
      }
    ];

    console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', this.proxyServers.length, '–ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤');
  }

  /**
   * ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è User-Agent —Å—Ç—Ä–æ–∫
   */
  private initializeUserAgents(): void {
    this.userAgents = [
      {
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        platform: 'Windows',
        browser: 'Chrome',
        version: '120.0.0.0',
        lastUpdated: new Date()
      },
      {
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        platform: 'macOS',
        browser: 'Chrome',
        version: '120.0.0.0',
        lastUpdated: new Date()
      },
      {
        userAgent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        platform: 'Linux',
        browser: 'Chrome',
        version: '120.0.0.0',
        lastUpdated: new Date()
      },
      {
        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1',
        platform: 'iOS',
        browser: 'Safari',
        version: '17.1',
        lastUpdated: new Date()
      },
      {
        userAgent: 'Mozilla/5.0 (Linux; Android 14; SM-G998B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36',
        platform: 'Android',
        browser: 'Chrome',
        version: '120.0.0.0',
        lastUpdated: new Date()
      }
    ];

    console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', this.userAgents.length, 'User-Agent —Å—Ç—Ä–æ–∫');
  }

  /**
   * üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
   */
  private getNextProxy(): ProxyServer {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    const activeProxies = this.proxyServers.filter(proxy => proxy.isActive);
    
    if (activeProxies.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤');
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    activeProxies.sort((a, b) => {
      const scoreA = a.successRate - (a.responseTime / 10);
      const scoreB = b.successRate - (b.responseTime / 10);
      return scoreB - scoreA;
    });

    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø—Ä–æ–∫—Å–∏
    const selectedProxy = activeProxies[0];
    selectedProxy.lastUsed = new Date();

    console.log('üåê –í—ã–±—Ä–∞–Ω –ø—Ä–æ–∫—Å–∏:', selectedProxy.id, selectedProxy.location);
    return selectedProxy;
  }

  /**
   * ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ User-Agent
   */
  private getNextUserAgent(): UserAgentConfig {
    this.currentUserAgentIndex = (this.currentUserAgentIndex + 1) % this.userAgents.length;
    const userAgent = this.userAgents[this.currentUserAgentIndex];
    
    console.log('ü§ñ –í—ã–±—Ä–∞–Ω User-Agent:', userAgent.browser, userAgent.platform);
    return userAgent;
  }

  /**
   * üîç –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–∫—Å–∏ –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
   */
  async makeSecureRequest(url: string, options: RequestInit = {}): Promise<Response> {
    const startTime = Date.now();
    let lastError: Error | null = null;

    // –ü—Ä–æ–±—É–µ–º –¥–æ 3 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    for (let attempt = 0; attempt < 3; attempt++) {
      try {
        const proxy = this.getNextProxy();
        const userAgent = this.getNextUserAgent();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å fingerprint
        const headers = {
          'User-Agent': userAgent.userAgent,
          'Accept': 'application/json, text/plain, */*',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
          'DNT': '1',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1',
          'Sec-Fetch-Dest': 'document',
          'Sec-Fetch-Mode': 'navigate',
          'Sec-Fetch-Site': 'none',
          'Sec-Fetch-User': '?1',
          'Cache-Control': 'max-age=0',
          ...options.headers
        };

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ø—Ä–æ–∫—Å–∏)
        const proxyConfig = {
          host: proxy.host,
          port: proxy.port,
          auth: proxy.username ? `${proxy.username}:${proxy.password}` : undefined
        };

        console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', proxy.id);

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
        const response = await fetch(url, {
          ...options,
          headers
        });

        const responseTime = Date.now() - startTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∫—Å–∏
        this.updateProxyMetrics(proxy, true, responseTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        this.updateRequestMetrics(true, responseTime);

        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', response.status, `${responseTime}ms`);
        return response;

      } catch (error) {
        lastError = error as Error;
        const responseTime = Date.now() - startTime;
        
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞:`, error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        this.updateRequestMetrics(false, responseTime);
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if (attempt < 2) {
          await this.delay(2000 * (attempt + 1));
        }
      }
    }

    throw lastError || new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—É–¥–∞—á–Ω—ã');
  }

  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∫—Å–∏
   */
  private updateProxyMetrics(proxy: ProxyServer, success: boolean, responseTime: number): void {
    if (success) {
      proxy.successRate = Math.min(100, proxy.successRate + 0.1);
      proxy.responseTime = (proxy.responseTime + responseTime) / 2;
    } else {
      proxy.successRate = Math.max(0, proxy.successRate - 1);
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è
      if (proxy.successRate < 50) {
        proxy.isActive = false;
        console.warn('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', proxy.id);
      }
    }
  }

  /**
   * üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private updateRequestMetrics(success: boolean, responseTime: number): void {
    this.metrics.totalRequests++;
    
    if (success) {
      this.metrics.successfulRequests++;
    } else {
      this.metrics.failedRequests++;
    }
    
    this.metrics.successRate = (this.metrics.successfulRequests / this.metrics.totalRequests) * 100;
    this.metrics.averageResponseTime = (this.metrics.averageResponseTime + responseTime) / 2;
    this.metrics.lastUpdated = new Date();
  }

  /**
   * ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫
   */
  private startMetricsMonitoring(): void {
    setInterval(() => {
      console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:', {
        total: this.metrics.totalRequests,
        success: this.metrics.successfulRequests,
        failed: this.metrics.failedRequests,
        successRate: `${this.metrics.successRate.toFixed(1)}%`,
        avgResponseTime: `${this.metrics.averageResponseTime.toFixed(0)}ms`
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
      const activeProxies = this.proxyServers.filter(p => p.isActive).length;
      const totalProxies = this.proxyServers.length;
      
      console.log('üåê –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:', `${activeProxies}/${totalProxies} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –º–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
      if (activeProxies < totalProxies * 0.5) {
        console.warn('‚ö†Ô∏è –ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.');
      }
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  /**
   * üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ User-Agent —Å—Ç—Ä–æ–∫
   */
  private startUserAgentRotation(): void {
    setInterval(async () => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º User-Agent —Å—Ç—Ä–æ–∫–∏...');
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö User-Agent
      await this.updateUserAgents();
      
    }, 24 * 60 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
  }

  /**
   * üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ User-Agent —Å—Ç—Ä–æ–∫
   */
  private async updateUserAgents(): Promise<void> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö User-Agent
      const newUserAgents = await this.fetchLatestUserAgents();
      
      this.userAgents = newUserAgents;
      console.log('‚úÖ User-Agent —Å—Ç—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.userAgents.length);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è User-Agent:', error);
    }
  }

  /**
   * üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö User-Agent (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private async fetchLatestUserAgents(): Promise<UserAgentConfig[]> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
    return [
      {
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
        platform: 'Windows',
        browser: 'Chrome',
        version: '121.0.0.0',
        lastUpdated: new Date()
      },
      // ... –¥—Ä—É–≥–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ User-Agent
    ];
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
   */
  getMetrics(): RequestMetrics {
    return { ...this.metrics };
  }

  /**
   * üåê –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∫—Å–∏
   */
  getProxyStatus(): { active: number; total: number; proxies: ProxyServer[] } {
    const activeProxies = this.proxyServers.filter(p => p.isActive);
    
    return {
      active: activeProxies.length,
      total: this.proxyServers.length,
      proxies: this.proxyServers.map(p => ({ ...p }))
    };
  }

  /**
   * ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏
   */
  addProxy(proxy: Omit<ProxyServer, 'id' | 'lastUsed' | 'successRate' | 'responseTime'>): void {
    const newProxy: ProxyServer = {
      ...proxy,
      id: `proxy-${Date.now()}`,
      lastUsed: new Date(),
      successRate: 100,
      responseTime: 0
    };
    
    this.proxyServers.push(newProxy);
    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏:', newProxy.id);
  }

  /**
   * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
   */
  removeProxy(proxyId: string): void {
    this.proxyServers = this.proxyServers.filter(p => p.id !== proxyId);
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ–∫—Å–∏:', proxyId);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const productionWBService = new ProductionWBService();
export default productionWBService;
