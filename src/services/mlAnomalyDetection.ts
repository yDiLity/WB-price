/**
 * ü§ñ ML-—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ü–µ–Ω–∞—Ö –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
 */

interface PriceDataPoint {
  timestamp: number;
  price: number;
  rating: number;
  reviewCount: number;
  competitorId: string;
  productId: string;
}

interface AnomalyResult {
  isAnomaly: boolean;
  anomalyScore: number;
  anomalyType: 'price_spike' | 'price_drop' | 'rating_manipulation' | 'review_bombing';
  confidence: number;
  description: string;
  recommendation: string;
}

interface MLConfig {
  priceChangeThreshold: number; // % –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–µ–π
  ratingChangeThreshold: number;
  timeWindowHours: number;
  minDataPoints: number;
  enableRealTimeDetection: boolean;
}

class MLAnomalyDetectionService {
  private config: MLConfig;
  private historicalData: Map<string, PriceDataPoint[]> = new Map();
  private models: {
    priceModel?: any;
    ratingModel?: any;
    reviewModel?: any;
  } = {};

  constructor(config: Partial<MLConfig> = {}) {
    this.config = {
      priceChangeThreshold: 20, // 20% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      ratingChangeThreshold: 0.5, // 0.5 –∑–≤–µ–∑–¥—ã
      timeWindowHours: 24,
      minDataPoints: 10,
      enableRealTimeDetection: true,
      ...config
    };
  }

  /**
   * üîç –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–Ω–æ–º–∞–ª–∏–π
   */
  async detectAnomalies(dataPoint: PriceDataPoint): Promise<AnomalyResult[]> {
    const results: AnomalyResult[] = [];

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    const productKey = `${dataPoint.productId}_${dataPoint.competitorId}`;
    const history = this.getHistoricalData(productKey);

    if (history.length < this.config.minDataPoints) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      this.addDataPoint(productKey, dataPoint);
      return [];
    }

    // 1. –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ü–µ–Ω–∞—Ö
    const priceAnomaly = await this.detectPriceAnomaly(dataPoint, history);
    if (priceAnomaly) results.push(priceAnomaly);

    // 2. –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
    const ratingAnomaly = await this.detectRatingAnomaly(dataPoint, history);
    if (ratingAnomaly) results.push(ratingAnomaly);

    // 3. –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
    const reviewAnomaly = await this.detectReviewAnomaly(dataPoint, history);
    if (reviewAnomaly) results.push(reviewAnomaly);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –¥–∞–Ω–Ω—ã—Ö
    this.addDataPoint(productKey, dataPoint);

    return results;
  }

  /**
   * üí∞ –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ü–µ–Ω–∞—Ö
   */
  private async detectPriceAnomaly(
    current: PriceDataPoint, 
    history: PriceDataPoint[]
  ): Promise<AnomalyResult | null> {
    const recentHistory = this.getRecentData(history, this.config.timeWindowHours);
    
    if (recentHistory.length === 0) return null;

    const avgPrice = this.calculateAverage(recentHistory.map(d => d.price));
    const priceChange = ((current.price - avgPrice) / avgPrice) * 100;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    const stdDev = this.calculateStandardDeviation(recentHistory.map(d => d.price));
    const zScore = Math.abs((current.price - avgPrice) / stdDev);

    // –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (Math.abs(priceChange) > this.config.priceChangeThreshold || zScore > 3) {
      const anomalyType = priceChange > 0 ? 'price_spike' : 'price_drop';
      
      return {
        isAnomaly: true,
        anomalyScore: Math.min(Math.abs(priceChange) / 10, 10), // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-10
        anomalyType,
        confidence: Math.min(zScore / 3, 1), // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ z-score
        description: `${anomalyType === 'price_spike' ? '–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç' : '–†–µ–∑–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ'} —Ü–µ–Ω—ã –Ω–∞ ${Math.abs(priceChange).toFixed(1)}%`,
        recommendation: this.getPriceRecommendation(anomalyType, priceChange)
      };
    }

    return null;
  }

  /**
   * ‚≠ê –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
   */
  private async detectRatingAnomaly(
    current: PriceDataPoint,
    history: PriceDataPoint[]
  ): Promise<AnomalyResult | null> {
    const recentHistory = this.getRecentData(history, this.config.timeWindowHours);
    
    if (recentHistory.length === 0) return null;

    const avgRating = this.calculateAverage(recentHistory.map(d => d.rating));
    const ratingChange = current.rating - avgRating;

    if (Math.abs(ratingChange) > this.config.ratingChangeThreshold) {
      return {
        isAnomaly: true,
        anomalyScore: Math.abs(ratingChange) * 2, // 0-10 —à–∫–∞–ª–∞
        anomalyType: 'rating_manipulation',
        confidence: Math.min(Math.abs(ratingChange) / 2, 1),
        description: `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ ${ratingChange.toFixed(2)} –∑–≤–µ–∑–¥`,
        recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏'
      };
    }

    return null;
  }

  /**
   * üìù –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞–∫—Ä—É—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
   */
  private async detectReviewAnomaly(
    current: PriceDataPoint,
    history: PriceDataPoint[]
  ): Promise<AnomalyResult | null> {
    const recentHistory = this.getRecentData(history, 168); // 7 –¥–Ω–µ–π
    
    if (recentHistory.length === 0) return null;

    const avgReviewGrowth = this.calculateReviewGrowthRate(recentHistory);
    const currentGrowth = this.calculateCurrentReviewGrowth(current, recentHistory);

    // –î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤
    if (currentGrowth > avgReviewGrowth * 3 && currentGrowth > 10) {
      return {
        isAnomaly: true,
        anomalyScore: Math.min(currentGrowth / 10, 10),
        anomalyType: 'review_bombing',
        confidence: Math.min(currentGrowth / (avgReviewGrowth * 5), 1),
        description: `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç–∑—ã–≤–æ–≤: +${currentGrowth} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞`,
        recommendation: '–í–æ–∑–º–æ–∂–Ω–∞—è –Ω–∞–∫—Ä—É—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–º'
      };
    }

    return null;
  }

  /**
   * üìä –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
   */
  private calculateAverage(values: number[]): number {
    return values.reduce((sum, val) => sum + val, 0) / values.length;
  }

  private calculateStandardDeviation(values: number[]): number {
    const avg = this.calculateAverage(values);
    const squaredDiffs = values.map(val => Math.pow(val - avg, 2));
    const avgSquaredDiff = this.calculateAverage(squaredDiffs);
    return Math.sqrt(avgSquaredDiff);
  }

  private getRecentData(history: PriceDataPoint[], hours: number): PriceDataPoint[] {
    const cutoffTime = Date.now() - (hours * 60 * 60 * 1000);
    return history.filter(point => point.timestamp > cutoffTime);
  }

  private calculateReviewGrowthRate(history: PriceDataPoint[]): number {
    if (history.length < 2) return 0;
    
    const sorted = history.sort((a, b) => a.timestamp - b.timestamp);
    const growthRates = [];
    
    for (let i = 1; i < sorted.length; i++) {
      const growth = sorted[i].reviewCount - sorted[i-1].reviewCount;
      growthRates.push(growth);
    }
    
    return this.calculateAverage(growthRates);
  }

  private calculateCurrentReviewGrowth(current: PriceDataPoint, history: PriceDataPoint[]): number {
    const yesterday = history.find(h => 
      Math.abs(h.timestamp - (current.timestamp - 24 * 60 * 60 * 1000)) < 60 * 60 * 1000
    );
    
    return yesterday ? current.reviewCount - yesterday.reviewCount : 0;
  }

  private getPriceRecommendation(anomalyType: string, priceChange: number): string {
    if (anomalyType === 'price_spike') {
      return `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –ø–æ–¥–Ω—è–ª —Ü–µ–Ω—É –Ω–∞ ${Math.abs(priceChange).toFixed(1)}%. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–≤–æ–µ–π —Ü–µ–Ω—ã.`;
    } else {
      return `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å–Ω–∏–∑–∏–ª —Ü–µ–Ω—É –Ω–∞ ${Math.abs(priceChange).toFixed(1)}%. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤–æ–µ–π —Ü–µ–Ω—ã.`;
    }
  }

  /**
   * üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  private getHistoricalData(productKey: string): PriceDataPoint[] {
    return this.historicalData.get(productKey) || [];
  }

  private addDataPoint(productKey: string, dataPoint: PriceDataPoint): void {
    const history = this.getHistoricalData(productKey);
    history.push(dataPoint);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Ç–æ—á–µ–∫)
    if (history.length > 1000) {
      history.splice(0, history.length - 1000);
    }
    
    this.historicalData.set(productKey, history);
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º
   */
  getAnomalyStats(): {
    totalProducts: number;
    anomaliesDetected: number;
    mostCommonAnomalyType: string;
    averageConfidence: number;
  } {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    return {
      totalProducts: this.historicalData.size,
      anomaliesDetected: 0, // –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      mostCommonAnomalyType: 'price_spike',
      averageConfidence: 0.85
    };
  }

  /**
   * ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  updateConfig(newConfig: Partial<MLConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const mlAnomalyDetection = new MLAnomalyDetectionService();
export default MLAnomalyDetectionService;
