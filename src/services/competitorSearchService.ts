import { CompetitorProduct } from '../types/product';
import { mockCompetitors } from './mockData';
import axios from 'axios';
import { securityService } from './securityService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Ozon
interface OzonSearchResult {
  products: {
    id: string;
    title: string;
    price: number;
    seller: {
      id: string;
      name: string;
    };
    url: string;
    image_url?: string;
  }[];
  total: number;
}

class CompetitorSearchService {
  private apiUrl = '/api/competitors/search';
  private useMockData = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (–º–æ–∫–æ–≤—ã–π –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π API)
  public setMockMode(useMockData: boolean): void {
    this.useMockData = useMockData;
    console.log(`–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${useMockData ? '–º–æ–∫–æ–≤—ã–π' : '—Ä–µ–∞–ª—å–Ω—ã–π'}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
  public getMockMode(): boolean {
    return this.useMockData;
  }

  // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  public async searchCompetitors(
    searchTerm: string,
    productId: string,
    currentPrice: number,
    showOnlyOzon: boolean = false,
    productName: string = ''
  ): Promise<CompetitorProduct[]> {
    console.log('–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', { searchTerm, productId, currentPrice, showOnlyOzon, productName, useMockData: this.useMockData });

    if (this.useMockData) {
      const results = await this.getMockCompetitors(searchTerm, currentPrice, showOnlyOzon, productName);
      console.log('–ú–æ–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
      return results;
    } else {
      try {
        console.log('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ securityService')

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const params = new URLSearchParams({
          query: searchTerm,
          limit: '10',
          only_ozon: showOnlyOzon ? '1' : '0',
          product_name: productName
        });

        const url = `${this.apiUrl}?${params.toString()}`;

        // –ó–∞–ø—Ä–æ—Å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        const response = await securityService.secureRequest(url);

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
        }

        const data = await response.json();

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç CompetitorProduct
        return data.products.map((product: any) => ({
          id: `wb-${product.id}`,
          competitorId: product.seller.id,
          competitorName: product.seller.name || 'Wildberries',
          productTitle: product.title,
          price: product.price,
          url: product.url || `https://wildberries.ru/catalog/${product.id}/detail.aspx`,
          lastUpdated: new Date(),
          isActive: true,
          imageUrl: product.image_url
        }));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return this.getMockCompetitors(searchTerm, currentPrice, showOnlyWB);
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö
  private getMockCompetitors(
    searchTerm: string,
    currentPrice: number,
    showOnlyOzon: boolean = false,
    productName: string = ''
  ): Promise<CompetitorProduct[]> {
    return new Promise(resolve => {
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
      setTimeout(() => {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        const results: CompetitorProduct[] = [];

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ Ozon
        let availableCompetitors = [...mockCompetitors];
        if (showOnlyOzon) {
          availableCompetitors = availableCompetitors.filter(
            c => c.name.toLowerCase().includes('ozon') || c.url.toLowerCase().includes('ozon.ru')
          );
        }

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º Ozon
        if (availableCompetitors.length === 0) {
          availableCompetitors.push({
            id: 'comp-ozon',
            name: 'Ozon',
            url: 'https://ozon.ru'
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º 5-10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        const numberOfResults = Math.floor(Math.random() * 6) + 5;

        for (let i = 0; i < numberOfResults; i++) {
          const competitor = availableCompetitors[Math.floor(Math.random() * availableCompetitors.length)];
          const price = Math.round(currentPrice * (0.85 + Math.random() * 0.3));

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
          const competitorProduct = {
            id: `comp-${Date.now()}-${i}`,
            competitorId: competitor.id,
            competitorName: competitor.name,
            productTitle: `${searchTerm} (${competitor.name})`,
            price,
            url: competitor.url + '/product/' + Math.floor(Math.random() * 1000000),
            lastUpdated: new Date(),
            isActive: true,
            imageUrl: `https://via.placeholder.com/150?text=${encodeURIComponent(searchTerm.substring(0, 10))}`
          };

          console.log('–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞:', competitorProduct);

          results.push(competitorProduct);
        }

        resolve(results);
      }, 1000);
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const competitorSearchService = new CompetitorSearchService();
