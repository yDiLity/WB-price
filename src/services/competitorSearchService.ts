import { CompetitorProduct } from '../types/product';
import axios from 'axios';
import { securityService } from './securityService';

// –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö
const realCompetitors = [
  { id: 'wb', name: 'Wildberries', url: 'https://wildberries.ru' },
  { id: 'ozon', name: 'Ozon', url: 'https://ozon.ru' },
  { id: 'yandex', name: '–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç', url: 'https://market.yandex.ru' },
  { id: 'megamarket', name: '–ú–µ–≥–∞–ú–∞—Ä–∫–µ—Ç', url: 'https://megamarket.ru' },
  { id: 'aliexpress', name: 'AliExpress', url: 'https://aliexpress.ru' }
];

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Ozon
interface OzonSearchResult {
  products: {
    id: string;
    title: string;
    price: number;
    seller: {
      id: string;
      name: string;
    };
    url: string;
    image_url?: string;
  }[];
  total: number;
}

class CompetitorSearchService {
  private apiUrl = '/api/competitors/search';
  private useMockData = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (–º–æ–∫–æ–≤—ã–π –∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π API)
  public setMockMode(useMockData: boolean): void {
    this.useMockData = useMockData;
    console.log(`–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${useMockData ? '–º–æ–∫–æ–≤—ã–π' : '—Ä–µ–∞–ª—å–Ω—ã–π'}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
  public getMockMode(): boolean {
    return this.useMockData;
  }

  // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  public async searchCompetitors(
    searchTerm: string,
    productId: string,
    currentPrice: number,
    showOnlyOzon: boolean = false,
    productName: string = ''
  ): Promise<CompetitorProduct[]> {
    console.log('üåê –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ Wildberries:', { searchTerm, productId, currentPrice, showOnlyOzon, productName });

    // –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Wildberries
    return this.getRealCompetitors(searchTerm, currentPrice, showOnlyOzon, productName);
  }

  // –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Wildberries API
  private async getRealCompetitors(
    searchTerm: string,
    currentPrice: number,
    showOnlyOzon: boolean = false,
    productName: string = ''
  ): Promise<CompetitorProduct[]> {
    try {
      console.log('üåê –ò—â–µ–º –†–ï–ê–õ–¨–ù–´–• –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ Wildberries:', searchTerm);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const response = await fetch(`/api/wb/search?q=${encodeURIComponent(searchTerm)}`);

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${response.status}`);
      }

      const wbProducts = await response.json();

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã WB –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const competitors: CompetitorProduct[] = wbProducts.slice(0, 10).map((product: any) => ({
        id: `wb-comp-${product.id}`,
        competitorId: `wb-seller-${product.supplierId || product.id}`,
        competitorName: product.supplier || 'WB –ü—Ä–æ–¥–∞–≤–µ—Ü',
        productId: product.id.toString(),
        productTitle: product.name,
        price: Math.round(product.price * 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
        url: `https://www.wildberries.ru/catalog/${product.id}/detail.aspx`,
        lastUpdated: new Date(),
        isActive: true,
        source: 'REAL_WILDBERRIES' // –ú–∞—Ä–∫–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      }));

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${competitors.length} –†–ï–ê–õ–¨–ù–´–• –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ WB`);
      return competitors;

    } catch (error) {
      console.error('üö´ –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –Ω–∞ Wildberries');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const competitorSearchService = new CompetitorSearchService();
