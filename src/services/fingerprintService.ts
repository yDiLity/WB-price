/**
 * üé≠ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä fingerprint –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
 * –≠–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */

interface DeviceProfile {
  type: 'desktop' | 'mobile' | 'tablet';
  os: string;
  browser: string;
  version: string;
  screen: {
    width: number;
    height: number;
    pixelRatio: number;
  };
  viewport: {
    width: number;
    height: number;
  };
  userAgent: string;
  platform: string;
  language: string;
  timezone: string;
  webgl: {
    vendor: string;
    renderer: string;
  };
}

interface BrowserFingerprint {
  userAgent: string;
  acceptLanguage: string;
  acceptEncoding: string;
  accept: string;
  referer: string;
  origin?: string;
  dnt?: string;
  upgradeInsecureRequests?: string;
  secFetchSite?: string;
  secFetchMode?: string;
  secFetchDest?: string;
  secFetchUser?: string;
  secChUa?: string;
  secChUaMobile?: string;
  secChUaPlatform?: string;
  cacheControl?: string;
  pragma?: string;
  connection?: string;
  xRequestedWith?: string;
}

interface TLSFingerprint {
  ja3: string;
  cipherSuites: string[];
  extensions: string[];
  ellipticCurves: string[];
  pointFormats: string[];
}

interface BehavioralPattern {
  scrollSpeed: number; // –ø–∏–∫—Å–µ–ª–µ–π –≤ —Å–µ–∫—É–Ω–¥—É
  mouseMovements: Array<{ x: number; y: number; timestamp: number }>;
  clickDelay: number; // –º—Å –º–µ–∂–¥—É –Ω–∞–≤–µ–¥–µ–Ω–∏–µ–º –∏ –∫–ª–∏–∫–æ–º
  typingSpeed: number; // —Å–∏–º–≤–æ–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  pauseBetweenActions: number; // –º—Å –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
  readingTime: number; // –º—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
}

class FingerprintService {
  private deviceProfiles: DeviceProfile[] = [];
  private currentProfile: DeviceProfile | null = null;
  private behavioralPattern: BehavioralPattern | null = null;

  constructor() {
    this.initializeDeviceProfiles();
    this.generateNewProfile();
  }

  /**
   * üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   */
  private initializeDeviceProfiles(): void {
    this.deviceProfiles = [
      // iPhone –ø—Ä–æ—Ñ–∏–ª–∏
      {
        type: 'mobile',
        os: 'iOS',
        browser: 'Safari',
        version: '17.0',
        screen: { width: 390, height: 844, pixelRatio: 3 },
        viewport: { width: 390, height: 664 },
        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
        platform: 'iPhone',
        language: 'ru-RU',
        timezone: 'Europe/Moscow',
        webgl: { vendor: 'Apple Inc.', renderer: 'Apple GPU' }
      },
      {
        type: 'mobile',
        os: 'iOS',
        browser: 'Safari',
        version: '16.6',
        screen: { width: 414, height: 896, pixelRatio: 2 },
        viewport: { width: 414, height: 719 },
        userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1',
        platform: 'iPhone',
        language: 'ru-RU',
        timezone: 'Europe/Moscow',
        webgl: { vendor: 'Apple Inc.', renderer: 'Apple A15 GPU' }
      },
      // Android –ø—Ä–æ—Ñ–∏–ª–∏
      {
        type: 'mobile',
        os: 'Android',
        browser: 'Chrome',
        version: '119.0',
        screen: { width: 412, height: 915, pixelRatio: 2.625 },
        viewport: { width: 412, height: 781 },
        userAgent: 'Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36',
        platform: 'Linux armv8l',
        language: 'ru-RU',
        timezone: 'Europe/Moscow',
        webgl: { vendor: 'Qualcomm', renderer: 'Adreno (TM) 660' }
      },
      {
        type: 'mobile',
        os: 'Android',
        browser: 'Chrome',
        version: '118.0',
        screen: { width: 393, height: 851, pixelRatio: 2.75 },
        viewport: { width: 393, height: 727 },
        userAgent: 'Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Mobile Safari/537.36',
        platform: 'Linux armv8l',
        language: 'ru-RU',
        timezone: 'Europe/Moscow',
        webgl: { vendor: 'ARM', renderer: 'Mali-G78 MP20' }
      },
      // Desktop –ø—Ä–æ—Ñ–∏–ª–∏
      {
        type: 'desktop',
        os: 'Windows',
        browser: 'Chrome',
        version: '119.0',
        screen: { width: 1920, height: 1080, pixelRatio: 1 },
        viewport: { width: 1920, height: 937 },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        platform: 'Win32',
        language: 'ru-RU',
        timezone: 'Europe/Moscow',
        webgl: { vendor: 'Google Inc. (NVIDIA)', renderer: 'ANGLE (NVIDIA, NVIDIA GeForce RTX 3060 Direct3D11 vs_5_0 ps_5_0, D3D11)' }
      },
      {
        type: 'desktop',
        os: 'macOS',
        browser: 'Safari',
        version: '17.0',
        screen: { width: 2560, height: 1440, pixelRatio: 2 },
        viewport: { width: 2560, height: 1297 },
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        platform: 'MacIntel',
        language: 'ru-RU',
        timezone: 'Europe/Moscow',
        webgl: { vendor: 'Apple Inc.', renderer: 'Apple M1 Pro' }
      }
    ];
  }

  /**
   * üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
   */
  public generateNewProfile(): DeviceProfile {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–µ—Å–∞–º–∏ (–º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–∞—â–µ)
    const weights = this.deviceProfiles.map(profile => 
      profile.type === 'mobile' ? 0.7 : 0.3
    );
    
    const randomIndex = this.weightedRandom(weights);
    this.currentProfile = { ...this.deviceProfiles[randomIndex] };

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    this.addProfileVariations();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
    this.generateBehavioralPattern();

    console.log('üé≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π fingerprint:', this.currentProfile.type, this.currentProfile.browser);
    return this.currentProfile;
  }

  /**
   * üîÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª—å
   */
  private addProfileVariations(): void {
    if (!this.currentProfile) return;

    // –ù–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö —ç–∫—Ä–∞–Ω–∞
    const screenVariation = Math.floor(Math.random() * 20) - 10;
    this.currentProfile.screen.width += screenVariation;
    this.currentProfile.viewport.width += screenVariation;

    // –í–∞—Ä–∏–∞—Ü–∏–∏ –≤ –≤–µ—Ä—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    if (this.currentProfile.browser === 'Chrome') {
      const minorVersion = Math.floor(Math.random() * 10);
      this.currentProfile.version = this.currentProfile.version.split('.')[0] + `.0.${minorVersion}`;
      this.currentProfile.userAgent = this.currentProfile.userAgent.replace(
        /Chrome\/[\d.]+/,
        `Chrome/${this.currentProfile.version}.0`
      );
    }

    // –°–ª—É—á–∞–π–Ω—ã–µ —è–∑—ã–∫–∏ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ä—É—Å—Å–∫–æ–≥–æ)
    const languages = ['ru-RU', 'ru-RU,ru;q=0.9', 'ru-RU,ru;q=0.9,en;q=0.8'];
    this.currentProfile.language = languages[Math.floor(Math.random() * languages.length)];

    // –°–ª—É—á–∞–π–Ω—ã–µ —Ç–∞–π–º–∑–æ–Ω—ã –†–æ—Å—Å–∏–∏
    const timezones = ['Europe/Moscow', 'Europe/Samara', 'Asia/Yekaterinburg', 'Asia/Novosibirsk'];
    this.currentProfile.timezone = timezones[Math.floor(Math.random() * timezones.length)];
  }

  /**
   * üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
   */
  private generateBehavioralPattern(): void {
    this.behavioralPattern = {
      scrollSpeed: 200 + Math.random() * 300, // 200-500 –ø–∏–∫—Å–µ–ª–µ–π/—Å–µ–∫
      mouseMovements: this.generateMouseMovements(),
      clickDelay: 100 + Math.random() * 400, // 100-500 –º—Å
      typingSpeed: 180 + Math.random() * 120, // 180-300 —Å–∏–º–≤–æ–ª–æ–≤/–º–∏–Ω
      pauseBetweenActions: 500 + Math.random() * 2000, // 0.5-2.5 —Å–µ–∫
      readingTime: 1000 + Math.random() * 3000 // 1-4 —Å–µ–∫ –Ω–∞ —á—Ç–µ–Ω–∏–µ
    };
  }

  /**
   * üñ±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏
   */
  private generateMouseMovements(): Array<{ x: number; y: number; timestamp: number }> {
    const movements = [];
    const startTime = Date.now();
    let currentX = Math.random() * 800;
    let currentY = Math.random() * 600;

    for (let i = 0; i < 10; i++) {
      currentX += (Math.random() - 0.5) * 100;
      currentY += (Math.random() - 0.5) * 100;
      
      movements.push({
        x: Math.max(0, Math.min(800, currentX)),
        y: Math.max(0, Math.min(600, currentY)),
        timestamp: startTime + i * (100 + Math.random() * 200)
      });
    }

    return movements;
  }

  /**
   * üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  public generateBrowserHeaders(url?: string): BrowserFingerprint {
    if (!this.currentProfile) {
      this.generateNewProfile();
    }

    const profile = this.currentProfile!;
    const headers: BrowserFingerprint = {
      userAgent: profile.userAgent,
      acceptLanguage: profile.language,
      acceptEncoding: 'gzip, deflate, br',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
      referer: this.generateReferer(url)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (profile.browser === 'Chrome') {
      headers.secChUa = `"Chromium";v="${profile.version.split('.')[0]}", "Not A(Brand";v="99"`;
      headers.secChUaMobile = profile.type === 'mobile' ? '?1' : '?0';
      headers.secChUaPlatform = `"${profile.os}"`;
      headers.secFetchSite = 'same-origin';
      headers.secFetchMode = 'navigate';
      headers.secFetchDest = 'document';
      headers.secFetchUser = '?1';
      headers.upgradeInsecureRequests = '1';
    }

    // –°–ª—É—á–∞–π–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (Math.random() > 0.5) {
      headers.dnt = '1';
    }

    if (Math.random() > 0.3) {
      headers.cacheControl = 'max-age=0';
      headers.pragma = 'no-cache';
    }

    if (profile.type === 'mobile' && Math.random() > 0.4) {
      headers.xRequestedWith = 'XMLHttpRequest';
    }

    return headers;
  }

  /**
   * üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ referer
   */
  private generateReferer(currentUrl?: string): string {
    const referers = [
      'https://www.google.com/',
      'https://yandex.ru/',
      'https://wildberries.ru/',
      'https://m.wildberries.ru/',
      'https://www.wildberries.ru/catalog',
      ''
    ];

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º WB –∫–∞–∫ referer
    if (currentUrl && currentUrl.includes('wildberries')) {
      return Math.random() > 0.3 ? 'https://www.wildberries.ru/' : '';
    }

    return referers[Math.floor(Math.random() * referers.length)];
  }

  /**
   * üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TLS fingerprint
   */
  public generateTLSFingerprint(): TLSFingerprint {
    const profile = this.currentProfile!;
    
    // –†–∞–∑–ª–∏—á–Ω—ã–µ TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    if (profile.browser === 'Chrome') {
      return {
        ja3: '771,4865-4866-4867-49195-49199-49196-49200-52393-52392-49171-49172-156-157-47-53,0-23-65281-10-11-35-16-5-13-18-51-45-43-27-17513,29-23-24,0',
        cipherSuites: ['TLS_AES_128_GCM_SHA256', 'TLS_AES_256_GCM_SHA384', 'TLS_CHACHA20_POLY1305_SHA256'],
        extensions: ['server_name', 'extended_master_secret', 'renegotiation_info'],
        ellipticCurves: ['X25519', 'P-256', 'P-384'],
        pointFormats: ['uncompressed']
      };
    } else if (profile.browser === 'Safari') {
      return {
        ja3: '771,4865-4866-4867-49196-49195-52393-49200-49199-52392-49162-49161-49172-49171-157-156-53-47,65281-0-23-35-13-5-18-16-30032-10-12-27-17513,29-23-30-25-24,0-1-2',
        cipherSuites: ['TLS_AES_128_GCM_SHA256', 'TLS_AES_256_GCM_SHA384', 'TLS_CHACHA20_POLY1305_SHA256'],
        extensions: ['server_name', 'status_request', 'supported_groups'],
        ellipticCurves: ['X25519', 'P-256', 'P-384', 'P-521'],
        pointFormats: ['uncompressed', 'ansiX962_compressed_prime', 'ansiX962_compressed_char2']
      };
    }

    // Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    return {
      ja3: '771,4865-4866-4867-49195-49199-49196-49200-52393-52392,0-23-65281-10-11-35-16-5-13,29-23-24,0',
      cipherSuites: ['TLS_AES_128_GCM_SHA256', 'TLS_AES_256_GCM_SHA384'],
      extensions: ['server_name', 'extended_master_secret'],
      ellipticCurves: ['X25519', 'P-256'],
      pointFormats: ['uncompressed']
    };
  }

  /**
   * üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
   */
  public getCurrentProfile(): DeviceProfile | null {
    return this.currentProfile;
  }

  /**
   * üé≠ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
   */
  public getBehavioralPattern(): BehavioralPattern | null {
    return this.behavioralPattern;
  }

  /**
   * üîÑ –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   */
  public rotateProfile(): DeviceProfile {
    return this.generateNewProfile();
  }

  /**
   * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
   */
  public getProfileStats(): {
    currentProfile: DeviceProfile | null;
    totalProfiles: number;
    profileTypes: Record<string, number>;
  } {
    const profileTypes: Record<string, number> = {};
    this.deviceProfiles.forEach(profile => {
      const key = `${profile.type}-${profile.browser}`;
      profileTypes[key] = (profileTypes[key] || 0) + 1;
    });

    return {
      currentProfile: this.currentProfile,
      totalProfiles: this.deviceProfiles.length,
      profileTypes
    };
  }

  /**
   * üé≤ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
   */
  private weightedRandom(weights: number[]): number {
    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);
    let random = Math.random() * totalWeight;
    
    for (let i = 0; i < weights.length; i++) {
      random -= weights[i];
      if (random <= 0) {
        return i;
      }
    }
    
    return weights.length - 1;
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fingerprint
   */
  public testFingerprint(): {
    uniqueness: number;
    realism: number;
    recommendations: string[];
  } {
    const profile = this.currentProfile;
    if (!profile) {
      return {
        uniqueness: 0,
        realism: 0,
        recommendations: ['–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å']
      };
    }

    let uniqueness = 50;
    let realism = 50;
    const recommendations: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    if (profile.type === 'mobile') uniqueness += 20;
    if (profile.browser === 'Safari' && profile.os === 'iOS') uniqueness += 15;
    if (profile.language.includes('ru')) uniqueness += 10;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    if (profile.screen.width > 0 && profile.screen.height > 0) realism += 20;
    if (profile.userAgent.includes(profile.browser)) realism += 15;
    if (profile.timezone.includes('Europe') || profile.timezone.includes('Asia')) realism += 15;

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (uniqueness < 70) {
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª—å');
    }
    if (realism < 70) {
      recommendations.push('–£–ª—É—á—à–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è');
    }

    return {
      uniqueness: Math.min(uniqueness, 100),
      realism: Math.min(realism, 100),
      recommendations
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const fingerprintService = new FingerprintService();
export default FingerprintService;
export type { DeviceProfile, BrowserFingerprint, TLSFingerprint, BehavioralPattern };
