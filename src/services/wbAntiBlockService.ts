/**
 * üõ°Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è 100% –∑–∞—â–∏—Ç—ã –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ Wildberries
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ 7 –∫–ª—é—á–µ–≤—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
 */

interface DeviceFingerprint {
  deviceId: string;
  userAgent: string;
  platform: string;
  screenResolution: string;
  timezone: string;
  language: string;
}

interface ProxyConfig {
  type: 'mobile_4g' | 'residential' | 'datacenter';
  url: string;
  priority: number;
  lastUsed: number;
  successRate: number;
  isHealthy: boolean;
}

interface RequestPattern {
  endpoint: string;
  method: string;
  delay: number;
  headers: Record<string, string>;
  timestamp: number;
}

class WBAntiBlockService {
  private deviceFingerprints: DeviceFingerprint[] = [];
  private proxyPool: ProxyConfig[] = [];
  private requestHistory: RequestPattern[] = [];
  private emergencyMode = false;
  private currentRegion: 'RU' | 'EU' | 'TR' = 'RU';

  constructor() {
    this.initializeDeviceFingerprints();
    this.initializeProxyPool();
    this.startHealthMonitoring();
  }

  /**
   * 1Ô∏è‚É£ –†–µ–∂–∏–º "–¢–µ–Ω—å" –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
   * –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WB
   */
  private initializeDeviceFingerprints(): void {
    const devices = [
      {
        deviceId: this.generateDeviceId(),
        userAgent: 'Wildberries/6.15.0 (iPhone; iOS 17.4; Scale/3.00)',
        platform: 'iOS',
        screenResolution: '1179x2556',
        timezone: 'Europe/Moscow',
        language: 'ru-RU'
      },
      {
        deviceId: this.generateDeviceId(),
        userAgent: 'Wildberries/6.14.2 (Android 14; SM-G998B)',
        platform: 'Android',
        screenResolution: '1440x3200',
        timezone: 'Europe/Moscow',
        language: 'ru-RU'
      },
      {
        deviceId: this.generateDeviceId(),
        userAgent: 'Wildberries/6.13.1 (iPhone; iOS 16.7; Scale/2.00)',
        platform: 'iOS',
        screenResolution: '828x1792',
        timezone: 'Europe/Moscow',
        language: 'ru-RU'
      }
    ];

    this.deviceFingerprints = devices;
    console.log('üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏');
  }

  /**
   * 2Ô∏è‚É£ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–µ—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
   * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º 3 —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
   */
  private initializeProxyPool(): void {
    // –ú–æ–±–∏–ª—å–Ω—ã–µ 4G –ø—Ä–æ–∫—Å–∏ (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
    const mobile4GProxies: ProxyConfig[] = [
      {
        type: 'mobile_4g',
        url: 'http://user:pass@mobile-proxy-1.com:8000',
        priority: 1,
        lastUsed: 0,
        successRate: 0.98,
        isHealthy: true
      },
      {
        type: 'mobile_4g',
        url: 'http://user:pass@mobile-proxy-2.com:8000',
        priority: 1,
        lastUsed: 0,
        successRate: 0.97,
        isHealthy: true
      }
    ];

    // –ñ–∏–ª—ã–µ –ø—Ä–æ–∫—Å–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–∞—Ñ–∏–∫)
    const residentialProxies: ProxyConfig[] = [
      {
        type: 'residential',
        url: 'http://user:pass@residential-1.com:8000',
        priority: 2,
        lastUsed: 0,
        successRate: 0.95,
        isHealthy: true
      },
      {
        type: 'residential',
        url: 'http://user:pass@residential-2.com:8000',
        priority: 2,
        lastUsed: 0,
        successRate: 0.94,
        isHealthy: true
      }
    ];

    // –î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä –ø—Ä–æ–∫—Å–∏ (—Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏)
    const datacenterProxies: ProxyConfig[] = [
      {
        type: 'datacenter',
        url: 'http://ec2-user@54.123.45.67:8080',
        priority: 3,
        lastUsed: 0,
        successRate: 0.90,
        isHealthy: true
      }
    ];

    this.proxyPool = [...mobile4GProxies, ...residentialProxies, ...datacenterProxies];
    console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É–ª –ø—Ä–æ–∫—Å–∏:', this.proxyPool.length);
  }

  /**
   * 3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   * –°–æ–∑–¥–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
   */
  generateHumanDelay(): number {
    // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å Œº=7.0, œÉ=2.5
    const mu = 7.0;
    const sigma = 2.5;
    
    // Box-Muller transform –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const u1 = Math.random();
    const u2 = Math.random();
    const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
    
    const delay = mu + sigma * z0;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 3-15 —Å–µ–∫—É–Ω–¥
    return Math.max(3, Math.min(15, delay)) * 1000;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ "–ø–µ—Ä–µ—Ä—ã–≤—ã" –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞
   */
  shouldTakeBreak(): boolean {
    // 5% —à–∞–Ω—Å –ø–µ—Ä–µ—Ä—ã–≤–∞ –∫–∞–∂–¥—ã–µ 20-30 –∑–∞–ø—Ä–æ—Å–æ–≤
    const recentRequests = this.requestHistory.slice(-25);
    const breakChance = 0.05;
    
    return Math.random() < breakChance && recentRequests.length > 20;
  }

  getBreakDuration(): number {
    // –ü–µ—Ä–µ—Ä—ã–≤ 120¬±30 —Å–µ–∫—É–Ω–¥
    return (120 + (Math.random() - 0.5) * 60) * 1000;
  }

  /**
   * 4Ô∏è‚É£ –î–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è API-–≤—ã–∑–æ–≤–æ–≤
   * –†–∞–∑–±–∏–≤–∞–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ —ç—Ç–∞–ø—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
   */
  async searchProducts(query: string): Promise<any> {
    try {
      // –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      const searchUrls = [
        'https://search.wb.ru/exactmatch/ru/common/v4/search',
        'https://catalog.wb.ru/catalog/search',
        'https://card.wb.ru/cards/detail'
      ];
      
      const url = searchUrls[Math.floor(Math.random() * searchUrls.length)];
      await this.delay(this.generateHumanDelay());
      
      // –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ API
      const mobileApiUrl = 'https://mobile-api.wildberries.ru/api/v1/search';
      await this.delay(this.generateHumanDelay());
      
      // –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω —á–µ—Ä–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CDN
      const cdnUrl = 'https://wbx-content-v2.wbstatic.net/price';
      await this.delay(this.generateHumanDelay());
      
      return { success: true, data: [] };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      throw error;
    }
  }

  /**
   * 5Ô∏è‚É£ –ê–Ω—Ç–∏-–æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞—â–∏—Ç–∞
   * –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ª–æ–∂–Ω—ã–µ JS-–æ—à–∏–±–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
   */
  shouldInjectFakeError(): boolean {
    // 2% –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ñ–µ–π–∫–æ–≤—É—é –æ—à–∏–±–∫—É
    return Math.random() < 0.02;
  }

  generateFakeError(): any {
    return {
      error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
      code: 429,
      fake: true, // –ú–∞—Ä–∫–µ—Ä –¥–ª—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
      timestamp: Date.now()
    };
  }

  /**
   * 6Ô∏è‚É£ –ì–µ–æ-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
   * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
   */
  getOptimalProxy(requestType: 'critical' | 'normal' | 'background'): ProxyConfig | null {
    let targetType: ProxyConfig['type'];
    
    switch (requestType) {
      case 'critical':
        targetType = 'mobile_4g';
        break;
      case 'normal':
        targetType = 'residential';
        break;
      case 'background':
        targetType = 'datacenter';
        break;
    }

    const availableProxies = this.proxyPool
      .filter(p => p.type === targetType && p.isHealthy)
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        const aScore = a.successRate - (Date.now() - a.lastUsed) / 1000000;
        const bScore = b.successRate - (Date.now() - b.lastUsed) / 1000000;
        return bScore - aScore;
      });

    if (availableProxies.length === 0) {
      console.warn(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ —Ç–∏–ø–∞ ${targetType}`);
      return null;
    }

    const selectedProxy = availableProxies[0];
    selectedProxy.lastUsed = Date.now();
    
    return selectedProxy;
  }

  /**
   * 7Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ "–ö—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–∏"
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
   */
  async activateEmergencyProtocol(): Promise<void> {
    if (this.emergencyMode) return;

    console.error('üö® –ê–ö–¢–ò–í–ê–¶–ò–Ø –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê');
    this.emergencyMode = true;

    try {
      // 1. –°–º–µ–Ω–∞ API-–∫–ª—é—á–µ–π
      await this.rotateApiKeys();
      
      // 2. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
      await this.switchDomain();
      
      // 3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
      await this.activateOfflineMode();
      
      // 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      await this.notifyAdministrators();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:', error);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    setTimeout(() => {
      this.emergencyMode = false;
      console.log('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω');
    }, 30 * 60 * 1000);
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  private generateDeviceId(): string {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  private async delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private async rotateApiKeys(): Promise<void> {
    console.log('üîÑ –†–æ—Ç–∞—Ü–∏—è API-–∫–ª—é—á–µ–π...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã –∫–ª—é—á–µ–π
  }

  private async switchDomain(): Promise<void> {
    console.log('üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã –¥–æ–º–µ–Ω–∞
  }

  private async activateOfflineMode(): Promise<void> {
    console.log('üíæ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ
  }

  private async notifyAdministrators(): Promise<void> {
    console.log('üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }

  private startHealthMonitoring(): void {
    setInterval(() => {
      this.checkProxyHealth();
    }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  }

  private async checkProxyHealth(): Promise<void> {
    for (const proxy of this.proxyPool) {
      try {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        const isHealthy = await this.testProxy(proxy);
        proxy.isHealthy = isHealthy;
        
        if (isHealthy) {
          proxy.successRate = Math.min(proxy.successRate + 0.01, 1.0);
        } else {
          proxy.successRate = Math.max(proxy.successRate - 0.05, 0.0);
        }
      } catch (error) {
        proxy.isHealthy = false;
        proxy.successRate = Math.max(proxy.successRate - 0.1, 0.0);
      }
    }
  }

  private async testProxy(proxy: ProxyConfig): Promise<boolean> {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
    return Math.random() > 0.1; // 90% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  async makeSecureRequest(url: string, options: any = {}): Promise<any> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤
    if (this.shouldTakeBreak()) {
      console.log('‚òï –î–µ–ª–∞–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤...');
      await this.delay(this.getBreakDuration());
    }

    // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.shouldInjectFakeError()) {
      throw this.generateFakeError();
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    const proxy = this.getOptimalProxy('normal');
    const device = this.deviceFingerprints[Math.floor(Math.random() * this.deviceFingerprints.length)];

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
      'User-Agent': device.userAgent,
      'X-Requested-With': 'com.wildberries.client',
      'X-Device-ID': device.deviceId,
      'Accept-Language': device.language,
      'X-Platform': device.platform,
      ...options.headers
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    await this.delay(this.generateHumanDelay());

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.requestHistory.push({
      endpoint: url,
      method: options.method || 'GET',
      delay: this.generateHumanDelay(),
      headers,
      timestamp: Date.now()
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (this.requestHistory.length > 1000) {
      this.requestHistory = this.requestHistory.slice(-1000);
    }

    return { success: true, proxy: proxy?.url, device: device.deviceId };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—â–∏—Ç—ã
   */
  getProtectionStats(): any {
    const healthyProxies = this.proxyPool.filter(p => p.isHealthy).length;
    const avgSuccessRate = this.proxyPool.reduce((sum, p) => sum + p.successRate, 0) / this.proxyPool.length;
    
    return {
      totalProxies: this.proxyPool.length,
      healthyProxies,
      avgSuccessRate: (avgSuccessRate * 100).toFixed(1) + '%',
      emergencyMode: this.emergencyMode,
      requestsToday: this.requestHistory.filter(r => 
        Date.now() - r.timestamp < 24 * 60 * 60 * 1000
      ).length,
      devices: this.deviceFingerprints.length
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const wbAntiBlockService = new WBAntiBlockService();
export default WBAntiBlockService;
