// üîê –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
import { jwtDecode } from 'jwt-decode'

// üéØ –¢–∏–ø—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export interface User {
  id: string
  email: string
  name: string
  role: 'admin' | 'manager' | 'user' | 'viewer'
  permissions: string[]
  mfaEnabled: boolean
  lastLogin: string
  avatar?: string
}

export interface AuthTokens {
  accessToken: string
  refreshToken: string
  expiresIn: number
}

export interface LoginCredentials {
  email: string
  password: string
  mfaCode?: string
  rememberMe?: boolean
}

export interface JWTPayload {
  sub: string
  email: string
  role: string
  permissions: string[]
  iat: number
  exp: number
  jti: string
}

// üîí –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
class AuthService {
  private readonly ACCESS_TOKEN_KEY = 'ozon_access_token'
  private readonly REFRESH_TOKEN_KEY = 'ozon_refresh_token'
  private readonly USER_KEY = 'ozon_user'
  
  // üöÄ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(credentials: LoginCredentials): Promise<{ user: User; tokens: AuthTokens }> {
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É')
      }

      const data = await response.json()
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
      this.setTokens(data.tokens)
      this.setUser(data.user)
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      this.logSecurityEvent('LOGIN_SUCCESS', {
        userId: data.user.id,
        email: data.user.email,
        mfaUsed: !!credentials.mfaCode,
      })

      return data
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
      this.logSecurityEvent('LOGIN_FAILED', {
        email: credentials.email,
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      throw error
    }
  }

  // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  async refreshToken(): Promise<AuthTokens> {
    const refreshToken = this.getRefreshToken()
    
    if (!refreshToken) {
      throw new Error('Refresh token –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    try {
      const response = await fetch('/api/auth/refresh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${refreshToken}`,
        },
      })

      if (!response.ok) {
        // –ï—Å–ª–∏ refresh token –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
        this.logout()
        throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞')
      }

      const tokens = await response.json()
      this.setTokens(tokens)
      
      return tokens
    } catch (error) {
      this.logout()
      throw error
    }
  }

  // üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async logout(): Promise<void> {
    const user = this.getUser()
    
    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –≤—ã—Ö–æ–¥–µ
      await fetch('/api/auth/logout', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.getAccessToken()}`,
        },
      })
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error)
    }

    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.clearTokens()
    this.clearUser()
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
    if (user) {
      this.logSecurityEvent('LOGOUT', {
        userId: user.id,
        email: user.email,
      })
    }
  }

  // üîê MFA - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–∞
  async generateMFASecret(): Promise<{ secret: string; qrCode: string }> {
    const response = await fetch('/api/auth/mfa/generate', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.getAccessToken()}`,
      },
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MFA —Å–µ–∫—Ä–µ—Ç–∞')
    }

    return response.json()
  }

  // ‚úÖ MFA - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  async enableMFA(code: string): Promise<{ backupCodes: string[] }> {
    const response = await fetch('/api/auth/mfa/enable', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.getAccessToken()}`,
      },
      body: JSON.stringify({ code }),
    })

    if (!response.ok) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ MFA')
    }

    const result = await response.json()
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = this.getUser()
    if (user) {
      user.mfaEnabled = true
      this.setUser(user)
    }

    this.logSecurityEvent('MFA_ENABLED', {
      userId: user?.id,
    })

    return result
  }

  // ‚ùå MFA - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
  async disableMFA(password: string): Promise<void> {
    const response = await fetch('/api/auth/mfa/disable', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.getAccessToken()}`,
      },
      body: JSON.stringify({ password }),
    })

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MFA')
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = this.getUser()
    if (user) {
      user.mfaEnabled = false
      this.setUser(user)
    }

    this.logSecurityEvent('MFA_DISABLED', {
      userId: user?.id,
    })
  }

  // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  isTokenValid(token: string): boolean {
    try {
      const decoded = jwtDecode<JWTPayload>(token)
      const now = Date.now() / 1000
      return decoded.exp > now
    } catch {
      return false
    }
  }

  // üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUser(): User | null {
    const userData = localStorage.getItem(this.USER_KEY)
    return userData ? JSON.parse(userData) : null
  }

  // üé´ –ü–æ–ª—É—á–µ–Ω–∏–µ access token
  getAccessToken(): string | null {
    return localStorage.getItem(this.ACCESS_TOKEN_KEY)
  }

  // üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ refresh token
  getRefreshToken(): string | null {
    return localStorage.getItem(this.REFRESH_TOKEN_KEY)
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  isAuthenticated(): boolean {
    const token = this.getAccessToken()
    return token ? this.isTokenValid(token) : false
  }

  // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  hasPermission(permission: string): boolean {
    const user = this.getUser()
    return user?.permissions.includes(permission) || false
  }

  // üëë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
  hasRole(role: string): boolean {
    const user = this.getUser()
    return user?.role === role
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  private setTokens(tokens: AuthTokens): void {
    localStorage.setItem(this.ACCESS_TOKEN_KEY, tokens.accessToken)
    localStorage.setItem(this.REFRESH_TOKEN_KEY, tokens.refreshToken)
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private setUser(user: User): void {
    localStorage.setItem(this.USER_KEY, JSON.stringify(user))
  }

  // üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
  private clearTokens(): void {
    localStorage.removeItem(this.ACCESS_TOKEN_KEY)
    localStorage.removeItem(this.REFRESH_TOKEN_KEY)
  }

  // üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private clearUser(): void {
    localStorage.removeItem(this.USER_KEY)
  }

  // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  private logSecurityEvent(event: string, data: any): void {
    const logEntry = {
      timestamp: new Date().toISOString(),
      event,
      data,
      userAgent: navigator.userAgent,
      ip: 'client-side', // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞—É–¥–∏—Ç–∞
    fetch('/api/audit/log', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(logEntry),
    }).catch(console.error)
  }
}

// üåü –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const authService = new AuthService()

// üîê –•—É–∫ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const useAuth = () => {
  const user = authService.getUser()
  const isAuthenticated = authService.isAuthenticated()

  return {
    user,
    isAuthenticated,
    login: authService.login.bind(authService),
    logout: authService.logout.bind(authService),
    refreshToken: authService.refreshToken.bind(authService),
    hasPermission: authService.hasPermission.bind(authService),
    hasRole: authService.hasRole.bind(authService),
    generateMFASecret: authService.generateMFASecret.bind(authService),
    enableMFA: authService.enableMFA.bind(authService),
    disableMFA: authService.disableMFA.bind(authService),
  }
}

export default authService
