// üíæ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
interface BackupConfig {
  enabled: boolean
  schedule: 'hourly' | 'daily' | 'weekly' | 'monthly'
  retention: number // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
  compression: boolean
  encryption: boolean
  destinations: BackupDestination[]
}

interface BackupDestination {
  type: 'local' | 'cloud' | 's3' | 'ftp'
  name: string
  config: Record<string, any>
  enabled: boolean
}

interface BackupEntry {
  id: string
  timestamp: string
  type: 'full' | 'incremental' | 'differential'
  size: number
  status: 'pending' | 'running' | 'completed' | 'failed'
  destination: string
  checksum: string
  metadata: {
    version: string
    tables: string[]
    files: string[]
    duration: number
    error?: string
  }
}

interface RestoreOptions {
  backupId: string
  destination: string
  tables?: string[]
  files?: string[]
  overwrite: boolean
  verify: boolean
}

// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_CONFIG: BackupConfig = {
  enabled: true,
  schedule: 'daily',
  retention: 7,
  compression: true,
  encryption: true,
  destinations: [
    {
      type: 'local',
      name: 'Local Storage',
      config: { path: '/backups' },
      enabled: true,
    },
  ],
}

// üíæ –ö–ª–∞—Å—Å Backup Manager
class BackupManager {
  private config: BackupConfig
  private backups: BackupEntry[] = []
  private isRunning = false
  private scheduleInterval?: NodeJS.Timeout

  constructor(config: Partial<BackupConfig> = {}) {
    this.config = { ...DEFAULT_CONFIG, ...config }
    this.loadBackupHistory()
    this.setupSchedule()
  }

  // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  async createBackup(
    type: 'full' | 'incremental' | 'differential' = 'full',
    destination?: string
  ): Promise<string> {
    if (this.isRunning) {
      throw new Error('Backup —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
    }

    const backupId = this.generateBackupId()
    const targetDestination = destination || this.config.destinations.find(d => d.enabled)?.name

    if (!targetDestination) {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö destinations –¥–ª—è backup')
    }

    const backup: BackupEntry = {
      id: backupId,
      timestamp: new Date().toISOString(),
      type,
      size: 0,
      status: 'pending',
      destination: targetDestination,
      checksum: '',
      metadata: {
        version: '1.0',
        tables: [],
        files: [],
        duration: 0,
      },
    }

    this.backups.push(backup)
    this.saveBackupHistory()

    try {
      this.isRunning = true
      backup.status = 'running'
      
      const startTime = Date.now()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º backup
      const result = await this.performBackup(backup)
      
      backup.size = result.size
      backup.checksum = result.checksum
      backup.metadata.tables = result.tables
      backup.metadata.files = result.files
      backup.metadata.duration = Date.now() - startTime
      backup.status = 'completed'

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
      await this.cleanupOldBackups()

      this.logBackupEvent('BACKUP_COMPLETED', {
        backupId,
        type,
        size: backup.size,
        duration: backup.metadata.duration,
      })

      return backupId
    } catch (error) {
      backup.status = 'failed'
      backup.metadata.error = error instanceof Error ? error.message : 'Unknown error'
      
      this.logBackupEvent('BACKUP_FAILED', {
        backupId,
        error: backup.metadata.error,
      })
      
      throw error
    } finally {
      this.isRunning = false
      this.saveBackupHistory()
    }
  }

  // üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  async restoreBackup(options: RestoreOptions): Promise<void> {
    const backup = this.backups.find(b => b.id === options.backupId)
    
    if (!backup) {
      throw new Error(`Backup ${options.backupId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }

    if (backup.status !== 'completed') {
      throw new Error(`Backup ${options.backupId} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω`)
    }

    try {
      this.logBackupEvent('RESTORE_STARTED', {
        backupId: options.backupId,
        destination: options.destination,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å backup'–∞
      if (options.verify) {
        const isValid = await this.verifyBackup(backup)
        if (!isValid) {
          throw new Error('Backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏')
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
      await this.performRestore(backup, options)

      this.logBackupEvent('RESTORE_COMPLETED', {
        backupId: options.backupId,
        destination: options.destination,
      })
    } catch (error) {
      this.logBackupEvent('RESTORE_FAILED', {
        backupId: options.backupId,
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      throw error
    }
  }

  // üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ backup'–æ–≤
  getBackups(): BackupEntry[] {
    return [...this.backups].sort((a, b) => 
      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    )
  }

  // üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ backup'–µ
  getBackupInfo(backupId: string): BackupEntry | null {
    return this.backups.find(b => b.id === backupId) || null
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ backup'–∞
  async verifyBackup(backup: BackupEntry): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º checksum
      const actualChecksum = await this.calculateChecksum(backup)
      
      if (actualChecksum !== backup.checksum) {
        console.error(`Checksum mismatch for backup ${backup.id}`)
        return false
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
      const filesExist = await this.verifyBackupFiles(backup)
      
      return filesExist
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ backup:', error)
      return false
    }
  }

  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ backup'–∞
  async deleteBackup(backupId: string): Promise<void> {
    const backupIndex = this.backups.findIndex(b => b.id === backupId)
    
    if (backupIndex === -1) {
      throw new Error(`Backup ${backupId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }

    const backup = this.backups[backupIndex]

    try {
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã backup'–∞
      await this.deleteBackupFiles(backup)
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
      this.backups.splice(backupIndex, 1)
      this.saveBackupHistory()

      this.logBackupEvent('BACKUP_DELETED', {
        backupId,
      })
    } catch (error) {
      this.logBackupEvent('BACKUP_DELETE_FAILED', {
        backupId,
        error: error instanceof Error ? error.message : 'Unknown error',
      })
      throw error
    }
  }

  // ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  updateConfig(newConfig: Partial<BackupConfig>): void {
    this.config = { ...this.config, ...newConfig }
    this.setupSchedule()
    this.saveConfig()
  }

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats(): {
    totalBackups: number
    totalSize: number
    lastBackup?: string
    successRate: number
    averageSize: number
    averageDuration: number
  } {
    const completedBackups = this.backups.filter(b => b.status === 'completed')
    const totalSize = completedBackups.reduce((sum, b) => sum + b.size, 0)
    const totalDuration = completedBackups.reduce((sum, b) => sum + b.metadata.duration, 0)
    
    const successRate = this.backups.length > 0 
      ? (completedBackups.length / this.backups.length) * 100 
      : 0

    return {
      totalBackups: this.backups.length,
      totalSize,
      lastBackup: this.backups[0]?.timestamp,
      successRate,
      averageSize: completedBackups.length > 0 ? totalSize / completedBackups.length : 0,
      averageDuration: completedBackups.length > 0 ? totalDuration / completedBackups.length : 0,
    }
  }

  // üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ backup'–∞
  private async performBackup(backup: BackupEntry): Promise<{
    size: number
    checksum: string
    tables: string[]
    files: string[]
  }> {
    // –°–∏–º—É–ª—è—Ü–∏—è backup –ø—Ä–æ—Ü–µ—Å—Å–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è:
    // 1. –°–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // 2. –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    // 3. –°–∂–∞—Ç–∏—è –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    // 4. –ó–∞–≥—Ä—É–∑–∫–∏ –≤ destination

    const tables = ['users', 'products', 'orders', 'analytics']
    const files = ['uploads/', 'configs/', 'logs/']
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    const size = Math.floor(Math.random() * 1000000000) // —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    const checksum = this.generateChecksum()

    return {
      size,
      checksum,
      tables,
      files,
    }
  }

  // üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  private async performRestore(backup: BackupEntry, options: RestoreOptions): Promise<void> {
    // –°–∏–º—É–ª—è—Ü–∏—è restore –ø—Ä–æ—Ü–µ—Å—Å–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è:
    // 1. –ó–∞–≥—Ä—É–∑–∫–∏ backup'–∞ –∏–∑ destination
    // 2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
    // 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // 4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 3000))
  }

  // üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
  private async cleanupOldBackups(): Promise<void> {
    const completedBackups = this.backups
      .filter(b => b.status === 'completed')
      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())

    if (completedBackups.length > this.config.retention) {
      const backupsToDelete = completedBackups.slice(this.config.retention)
      
      for (const backup of backupsToDelete) {
        try {
          await this.deleteBackup(backup.id)
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ backup ${backup.id}:`, error)
        }
      }
    }
  }

  // ‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  private setupSchedule(): void {
    if (this.scheduleInterval) {
      clearInterval(this.scheduleInterval)
    }

    if (!this.config.enabled) {
      return
    }

    const intervals = {
      hourly: 60 * 60 * 1000,
      daily: 24 * 60 * 60 * 1000,
      weekly: 7 * 24 * 60 * 60 * 1000,
      monthly: 30 * 24 * 60 * 60 * 1000,
    }

    const interval = intervals[this.config.schedule]
    
    this.scheduleInterval = setInterval(async () => {
      try {
        await this.createBackup('incremental')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ backup:', error)
      }
    }, interval)
  }

  // üî¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID backup'–∞
  private generateBackupId(): string {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
    const random = Math.random().toString(36).substr(2, 6)
    return `backup_${timestamp}_${random}`
  }

  // üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è checksum
  private generateChecksum(): string {
    return Math.random().toString(36).substr(2, 32)
  }

  // üîç –†–∞—Å—á–µ—Ç checksum
  private async calculateChecksum(backup: BackupEntry): Promise<string> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ checksum
    return backup.checksum
  }

  // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ backup'–∞
  private async verifyBackupFiles(backup: BackupEntry): Promise<boolean> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    return true
  }

  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ backup'–∞
  private async deleteBackupFiles(backup: BackupEntry): Promise<void> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ backup ${backup.id}`)
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ backup'–æ–≤
  private saveBackupHistory(): void {
    try {
      localStorage.setItem('backup_history', JSON.stringify(this.backups))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ backup:', error)
    }
  }

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ backup'–æ–≤
  private loadBackupHistory(): void {
    try {
      const saved = localStorage.getItem('backup_history')
      if (saved) {
        this.backups = JSON.parse(saved)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ backup:', error)
    }
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  private saveConfig(): void {
    try {
      localStorage.setItem('backup_config', JSON.stringify(this.config))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backup:', error)
    }
  }

  // üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π backup
  private logBackupEvent(event: string, data: any): void {
    const logEntry = {
      timestamp: new Date().toISOString(),
      event,
      data,
    }

    console.log('Backup event:', logEntry)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –∞—É–¥–∏—Ç–∞
    if (typeof window !== 'undefined' && (window as any).auditLogger) {
      (window as any).auditLogger.logEvent('SYSTEM', event, {
        metadata: {
          tags: ['backup'],
          ...data,
        },
      })
    }
  }

  // üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
  destroy(): void {
    if (this.scheduleInterval) {
      clearInterval(this.scheduleInterval)
    }
  }
}

// üåü Singleton instance
export const backupManager = new BackupManager()

// üéØ –•—É–∫ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const useBackup = () => {
  return {
    createBackup: backupManager.createBackup.bind(backupManager),
    restoreBackup: backupManager.restoreBackup.bind(backupManager),
    getBackups: backupManager.getBackups.bind(backupManager),
    getBackupInfo: backupManager.getBackupInfo.bind(backupManager),
    verifyBackup: backupManager.verifyBackup.bind(backupManager),
    deleteBackup: backupManager.deleteBackup.bind(backupManager),
    updateConfig: backupManager.updateConfig.bind(backupManager),
    getStats: backupManager.getStats.bind(backupManager),
  }
}

export default backupManager
