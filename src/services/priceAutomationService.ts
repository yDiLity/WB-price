/**
 * üéØ –°–ï–†–í–ò–° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ì–£–õ–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù
 * 
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:
 * 1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 * 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 * 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ Ozon
 */

import { Product, CompetitorProduct } from '../types/product';
import { PricingStrategy } from '../components/product/StrategySelectionModal';
import { automationService } from './automationService';
import { ozonCompetitorService } from './ozonCompetitorService';
import { ozonApiService } from './ozonApi';

interface PriceAnalysisResult {
  currentPrice: number;
  competitorPrices: number[];
  minCompetitorPrice: number;
  maxCompetitorPrice: number;
  avgCompetitorPrice: number;
  recommendedPrice: number;
  priceChangeReason: string;
  shouldChangePrice: boolean;
}

class PriceAutomationService {
  private static instance: PriceAutomationService;
  private monitoringProducts: Map<string, {
    product: Product;
    competitors: CompetitorProduct[];
    strategy: PricingStrategy;
    lastCheck: Date;
  }> = new Map();

  private constructor() {
    this.startAutomaticMonitoring();
    console.log('üéØ PriceAutomationService initialized - automatic price regulation started');
  }

  public static getInstance(): PriceAutomationService {
    if (!PriceAutomationService.instance) {
      PriceAutomationService.instance = new PriceAutomationService();
    }
    return PriceAutomationService.instance;
  }

  /**
   * üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  public addProductToMonitoring(
    product: Product,
    competitors: CompetitorProduct[],
    strategy: PricingStrategy
  ): void {
    console.log(`üîó Adding product ${product.sku} to automatic monitoring with ${competitors.length} competitors`);
    
    this.monitoringProducts.set(product.id, {
      product,
      competitors,
      strategy,
      lastCheck: new Date()
    });

    // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ Ozon
    automationService.toggleOzonAutoUpdate(product.id, true);

    // –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    this.checkProductPrice(product.id);

    console.log(`‚úÖ Product ${product.sku} added to monitoring. Total monitored products: ${this.monitoringProducts.size}`);
  }

  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
   */
  public async checkProductPrice(productId: string): Promise<void> {
    const monitoringData = this.monitoringProducts.get(productId);
    if (!monitoringData) {
      console.log(`‚ùå Product ${productId} not found in monitoring`);
      return;
    }

    const { product, competitors, strategy } = monitoringData;
    
    try {
      console.log(`üîç Checking price for product ${product.sku}...`);

      // 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const updatedCompetitors = await this.updateCompetitorPrices(competitors);
      
      // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ü–µ–Ω—É
      const analysis = this.analyzePrices(product, updatedCompetitors, strategy);
      
      // 3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É - –¥–µ–ª–∞–µ–º —ç—Ç–æ
      if (analysis.shouldChangePrice) {
        await this.applyPriceChange(product, analysis);
      }

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      monitoringData.lastCheck = new Date();
      
      console.log(`‚úÖ Price check completed for ${product.sku}. Recommended: ${analysis.recommendedPrice}‚ÇΩ`);
      
    } catch (error) {
      console.error(`‚ùå Error checking price for product ${product.sku}:`, error);
    }
  }

  /**
   * üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Ü–µ–Ω—ã
   */
  private analyzePrices(
    product: Product,
    competitors: CompetitorProduct[],
    strategy: PricingStrategy
  ): PriceAnalysisResult {
    const competitorPrices = competitors.map(c => c.price).filter(p => p > 0);
    
    if (competitorPrices.length === 0) {
      return {
        currentPrice: product.price.current,
        competitorPrices: [],
        minCompetitorPrice: 0,
        maxCompetitorPrice: 0,
        avgCompetitorPrice: 0,
        recommendedPrice: product.price.current,
        priceChangeReason: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
        shouldChangePrice: false
      };
    }

    const minPrice = Math.min(...competitorPrices);
    const maxPrice = Math.max(...competitorPrices);
    const avgPrice = competitorPrices.reduce((sum, price) => sum + price, 0) / competitorPrices.length;

    let recommendedPrice = product.price.current;
    let reason = '';

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    switch (strategy.type) {
      case 'MATCH_LOWEST':
        recommendedPrice = minPrice;
        reason = `–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (${minPrice}‚ÇΩ)`;
        break;

      case 'UNDERCUT':
        const reduction = strategy.parameters.percentReduction || 5;
        recommendedPrice = minPrice * (1 - reduction / 100);
        reason = `–ü–æ–¥—Ä–µ–∑–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –Ω–∞ ${reduction}% (${recommendedPrice}‚ÇΩ)`;
        break;

      case 'PREMIUM':
        const premium = strategy.parameters.percentReduction || 10;
        recommendedPrice = avgPrice * (1 + premium / 100);
        reason = `–ü—Ä–µ–º–∏—É–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: +${premium}% –∫ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ (${recommendedPrice}‚ÇΩ)`;
        break;

      case 'CUSTOM':
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
        recommendedPrice = avgPrice;
        reason = '–ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤';
        break;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    const minThreshold = strategy.parameters.minPrice || product.price.minThreshold || product.price.current * 0.8;
    const maxThreshold = strategy.parameters.maxPrice || product.price.current * 1.2;

    recommendedPrice = Math.max(minThreshold, Math.min(maxThreshold, recommendedPrice));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å —Ü–µ–Ω—É
    const priceChangePercent = Math.abs((recommendedPrice - product.price.current) / product.price.current) * 100;
    const shouldChangePrice = priceChangePercent >= 1; // –ú–µ–Ω—è–µ–º –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1%

    return {
      currentPrice: product.price.current,
      competitorPrices,
      minCompetitorPrice: minPrice,
      maxCompetitorPrice: maxPrice,
      avgCompetitorPrice: avgPrice,
      recommendedPrice: Math.round(recommendedPrice),
      priceChangeReason: reason,
      shouldChangePrice
    };
  }

  /**
   * üí∞ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
   */
  private async applyPriceChange(product: Product, analysis: PriceAnalysisResult): Promise<void> {
    try {
      console.log(`üí∞ Applying price change for ${product.sku}: ${analysis.currentPrice}‚ÇΩ ‚Üí ${analysis.recommendedPrice}‚ÇΩ`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º automationService –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
      const attempt = await automationService.attemptPriceChange(
        product.id,
        analysis.currentPrice,
        analysis.recommendedPrice,
        analysis.priceChangeReason,
        'competitor_price'
      );

      if (attempt.status === 'success') {
        console.log(`‚úÖ Price successfully changed for ${product.sku} to ${analysis.recommendedPrice}‚ÇΩ`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ø—Ä–æ–¥—É–∫—Ç–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ API)
        product.price.current = analysis.recommendedPrice;
        
      } else if (attempt.status === 'blocked') {
        console.log(`üö´ Price change blocked for ${product.sku}: ${attempt.reason}`);
        
      } else if (attempt.status === 'failed') {
        console.log(`‚ùå Price change failed for ${product.sku}: ${attempt.ozonError}`);
      }

    } catch (error) {
      console.error(`‚ùå Error applying price change for ${product.sku}:`, error);
    }
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
   */
  private async updateCompetitorPrices(competitors: CompetitorProduct[]): Promise<CompetitorProduct[]> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω —Å —Å–∞–π—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    // –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    return competitors.map(competitor => ({
      ...competitor,
      price: competitor.price + (Math.random() - 0.5) * 100, // ¬±50‚ÇΩ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      lastUpdated: new Date()
    }));
  }

  /**
   * ‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private startAutomaticMonitoring(): void {
    setInterval(() => {
      this.performMonitoringCycle();
    }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

    console.log('‚è∞ Automatic monitoring started - checking every 5 minutes');
  }

  /**
   * üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  private async performMonitoringCycle(): Promise<void> {
    if (this.monitoringProducts.size === 0) {
      return;
    }

    console.log(`üîÑ Starting monitoring cycle for ${this.monitoringProducts.size} products...`);

    for (const [productId] of this.monitoringProducts) {
      await this.checkProductPrice(productId);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('‚úÖ Monitoring cycle completed');
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public getMonitoringStats() {
    return {
      totalProducts: this.monitoringProducts.size,
      products: Array.from(this.monitoringProducts.values()).map(data => ({
        productId: data.product.id,
        sku: data.product.sku,
        title: data.product.title,
        currentPrice: data.product.price.current,
        competitorsCount: data.competitors.length,
        strategyType: data.strategy.type,
        lastCheck: data.lastCheck
      }))
    };
  }

  /**
   * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
   */
  public removeProductFromMonitoring(productId: string): void {
    if (this.monitoringProducts.delete(productId)) {
      automationService.toggleOzonAutoUpdate(productId, false);
      console.log(`üóëÔ∏è Product ${productId} removed from monitoring`);
    }
  }
}

export const priceAutomationService = PriceAutomationService.getInstance();
