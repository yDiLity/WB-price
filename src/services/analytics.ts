// üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫
interface AnalyticsEvent {
  name: string
  properties: Record<string, any>
  timestamp: number
  userId?: string
  sessionId: string
}

interface UserMetrics {
  userId: string
  sessionDuration: number
  pageViews: number
  events: number
  lastActivity: number
  features: string[]
}

interface BusinessMetrics {
  revenue: {
    mrr: number
    arr: number
    growth: number
  }
  users: {
    total: number
    active: number
    new: number
    churned: number
  }
  features: {
    adoption: Record<string, number>
    usage: Record<string, number>
  }
  performance: {
    responseTime: number
    errorRate: number
    uptime: number
  }
}

// üéØ –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
const TRACKED_EVENTS = {
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  USER: [
    'page_view',
    'button_click',
    'form_submit',
    'search',
    'filter_apply',
    'export_data',
    'import_data',
  ],

  // –ë–∏–∑–Ω–µ—Å —Å–æ–±—ã—Ç–∏—è
  BUSINESS: [
    'slot_booking',
    'price_change',
    'product_add',
    'strategy_create',
    'competitor_link',
    'notification_send',
  ],

  // –ö–æ–Ω–≤–µ—Ä—Å–∏–∏
  CONVERSION: [
    'signup',
    'activation',
    'subscription',
    'upgrade',
    'renewal',
    'cancellation',
  ],

  // –û—à–∏–±–∫–∏
  ERROR: [
    'api_error',
    'validation_error',
    'network_error',
    'permission_error',
  ],
}

// üìà –ö–ª–∞—Å—Å Analytics
class Analytics {
  private events: AnalyticsEvent[] = []
  private sessionId: string
  private userId?: string
  private sessionStart: number
  private flushInterval: NodeJS.Timeout

  constructor() {
    this.sessionId = this.generateSessionId()
    this.sessionStart = Date.now()

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
    this.flushInterval = setInterval(() => {
      this.flushEvents()
    }, 30000) // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
      this.trackSessionEnd()
      this.flushEvents()
    })

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        this.track('page_hidden')
      } else {
        this.track('page_visible')
      }
    })
  }

  // üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
  track(eventName: string, properties: Record<string, any> = {}): void {
    const event: AnalyticsEvent = {
      name: eventName,
      properties: {
        ...properties,
        url: window.location.href,
        referrer: document.referrer,
        userAgent: navigator.userAgent,
        timestamp: Date.now(),
      },
      timestamp: Date.now(),
      userId: this.userId,
      sessionId: this.sessionId,
    }

    this.events.push(event)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToLocalStorage(event)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (this.isCriticalEvent(eventName)) {
      this.sendToServer([event])
    }
  }

  // üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  identify(userId: string, traits: Record<string, any> = {}): void {
    this.userId = userId

    this.track('user_identified', {
      userId,
      traits,
    })
  }

  // üìÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  page(pageName: string, properties: Record<string, any> = {}): void {
    this.track('page_view', {
      page: pageName,
      title: document.title,
      ...properties,
    })
  }

  // üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  conversion(eventName: string, value?: number, currency = 'RUB'): void {
    this.track(eventName, {
      category: 'conversion',
      value,
      currency,
    })
  }

  // üö® –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  error(errorName: string, error: Error, context: Record<string, any> = {}): void {
    this.track('error', {
      errorName,
      message: error.message,
      stack: error.stack,
      context,
    })
  }

  // ‚è±Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  time(eventName: string): () => void {
    const startTime = Date.now()

    return () => {
      const duration = Date.now() - startTime
      this.track(eventName, {
        duration,
        category: 'timing',
      })
    }
  }

  // üéÆ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
  interaction(element: string, action: string, properties: Record<string, any> = {}): void {
    this.track('interaction', {
      element,
      action,
      ...properties,
    })
  }

  // üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
  search(query: string, results: number, filters: Record<string, any> = {}): void {
    this.track('search', {
      query,
      results,
      filters,
    })
  }

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserMetrics(): UserMetrics {
    const userEvents = this.events.filter(e => e.userId === this.userId)
    const sessionDuration = Date.now() - this.sessionStart

    const features = new Set<string>()
    userEvents.forEach(event => {
      if (event.properties.feature) {
        features.add(event.properties.feature)
      }
    })

    return {
      userId: this.userId || 'anonymous',
      sessionDuration,
      pageViews: userEvents.filter(e => e.name === 'page_view').length,
      events: userEvents.length,
      lastActivity: Math.max(...userEvents.map(e => e.timestamp)),
      features: Array.from(features),
    }
  }

  // üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫
  getBusinessMetrics(): Partial<BusinessMetrics> {
    const events = this.getLocalEvents()

    // –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    const featureUsage: Record<string, number> = {}
    const featureAdoption: Record<string, number> = {}

    events.forEach(event => {
      if (event.properties.feature) {
        featureUsage[event.properties.feature] =
          (featureUsage[event.properties.feature] || 0) + 1
      }
    })

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º
    const usersByFeature: Record<string, Set<string>> = {}
    events.forEach(event => {
      if (event.properties.feature && event.userId) {
        if (!usersByFeature[event.properties.feature]) {
          usersByFeature[event.properties.feature] = new Set()
        }
        usersByFeature[event.properties.feature].add(event.userId)
      }
    })

    Object.keys(usersByFeature).forEach(feature => {
      featureAdoption[feature] = usersByFeature[feature].size
    })

    return {
      features: {
        adoption: featureAdoption,
        usage: featureUsage,
      },
    }
  }

  // üîç –ê–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  getFunnelAnalysis(steps: string[]): {
    step: string
    users: number
    conversionRate: number
  }[] {
    const events = this.getLocalEvents()
    const usersByStep: Record<string, Set<string>> = {}

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —à–∞–≥–∞–º
    steps.forEach(step => {
      usersByStep[step] = new Set()
    })

    events.forEach(event => {
      if (steps.includes(event.name) && event.userId) {
        usersByStep[event.name].add(event.userId)
      }
    })

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
    const totalUsers = usersByStep[steps[0]]?.size || 0

    return steps.map((step, index) => {
      const users = usersByStep[step]?.size || 0
      const conversionRate = totalUsers > 0 ? (users / totalUsers) * 100 : 0

      return {
        step,
        users,
        conversionRate,
      }
    })
  }

  // üìä –ö–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  getCohortAnalysis(period: 'daily' | 'weekly' | 'monthly' = 'weekly'): any[] {
    const events = this.getLocalEvents()
    const cohorts: Record<string, any> = {}

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
    events.forEach(event => {
      if (event.name === 'user_identified' && event.userId) {
        const cohortKey = this.getCohortKey(event.timestamp, period)

        if (!cohorts[cohortKey]) {
          cohorts[cohortKey] = {
            period: cohortKey,
            users: new Set(),
            retention: {},
          }
        }

        cohorts[cohortKey].users.add(event.userId)
      }
    })

    return Object.values(cohorts)
  }

  // üéØ A/B —Ç–µ—Å—Ç —Ç—Ä–µ–∫–∏–Ω–≥
  trackExperiment(experimentName: string, variant: string, properties: Record<string, any> = {}): void {
    this.track('experiment_view', {
      experiment: experimentName,
      variant,
      ...properties,
    })
  }

  // üèÜ –¢—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  trackAchievement(achievement: string, properties: Record<string, any> = {}): void {
    this.track('achievement', {
      achievement,
      ...properties,
    })
  }

  // üí∞ –¢—Ä–µ–∫–∏–Ω–≥ –≤—ã—Ä—É—á–∫–∏
  trackRevenue(amount: number, currency = 'RUB', properties: Record<string, any> = {}): void {
    this.track('revenue', {
      amount,
      currency,
      ...properties,
    })
  }

  // üì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  trackPerformance(metric: string, value: number, unit = 'ms'): void {
    this.track('performance', {
      metric,
      value,
      unit,
    })
  }

  // üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
  private trackSessionEnd(): void {
    const sessionDuration = Date.now() - this.sessionStart

    this.track('session_end', {
      duration: sessionDuration,
      events: this.events.length,
    })
  }

  // üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
  private isCriticalEvent(eventName: string): boolean {
    return TRACKED_EVENTS.CONVERSION.includes(eventName) ||
           TRACKED_EVENTS.ERROR.includes(eventName) ||
           eventName === 'user_identified'
  }

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
  private saveToLocalStorage(event: AnalyticsEvent): void {
    try {
      const key = `analytics_${new Date().toISOString().split('T')[0]}`
      const existingEvents = JSON.parse(localStorage.getItem(key) || '[]')
      existingEvents.push(event)

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
      if (existingEvents.length > 1000) {
        existingEvents.splice(0, existingEvents.length - 1000)
      }

      localStorage.setItem(key, JSON.stringify(existingEvents))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è analytics —Å–æ–±—ã—Ç–∏—è:', error)
    }
  }

  // üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ localStorage
  private getLocalEvents(): AnalyticsEvent[] {
    const events: AnalyticsEvent[] = []

    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key?.startsWith('analytics_')) {
        try {
          const dayEvents = JSON.parse(localStorage.getItem(key) || '[]')
          events.push(...dayEvents)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è analytics —Å–æ–±—ã—Ç–∏–π:', error)
        }
      }
    }

    return events.sort((a, b) => b.timestamp - a.timestamp)
  }

  // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–µ–º–æ)
  private async sendToServer(events: AnalyticsEvent[]): Promise<void> {
    if (events.length === 0) return

    // –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
    console.log('üìä Analytics events (demo mode):', events.length, 'events')

    // try {
    //   await fetch('/api/analytics/events', {
    //     method: 'POST',
    //     headers: {
    //       'Content-Type': 'application/json',
    //     },
    //     body: JSON.stringify({ events }),
    //   })
    // } catch (error) {
    //   console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ analytics —Å–æ–±—ã—Ç–∏–π:', error)
    // }
  }

  // üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
  private async flushEvents(): Promise<void> {
    if (this.events.length === 0) return

    const eventsToSend = [...this.events]
    this.events = []

    await this.sendToServer(eventsToSend)
  }

  // üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∫–æ–≥–æ—Ä—Ç—ã
  private getCohortKey(timestamp: number, period: 'daily' | 'weekly' | 'monthly'): string {
    const date = new Date(timestamp)

    switch (period) {
      case 'daily':
        return date.toISOString().split('T')[0]
      case 'weekly':
        const week = Math.floor(date.getTime() / (7 * 24 * 60 * 60 * 1000))
        return `week-${week}`
      case 'monthly':
        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`
      default:
        return date.toISOString().split('T')[0]
    }
  }

  // üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏
  private generateSessionId(): string {
    return `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  // üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
  destroy(): void {
    if (this.flushInterval) {
      clearInterval(this.flushInterval)
    }
    this.trackSessionEnd()
    this.flushEvents()
  }
}

// üåü Singleton instance
export const analytics = new Analytics()

// üéØ –•—É–∫ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const useAnalytics = () => {
  return {
    track: analytics.track.bind(analytics),
    identify: analytics.identify.bind(analytics),
    page: analytics.page.bind(analytics),
    conversion: analytics.conversion.bind(analytics),
    error: analytics.error.bind(analytics),
    time: analytics.time.bind(analytics),
    interaction: analytics.interaction.bind(analytics),
    search: analytics.search.bind(analytics),
    trackExperiment: analytics.trackExperiment.bind(analytics),
    trackAchievement: analytics.trackAchievement.bind(analytics),
    trackRevenue: analytics.trackRevenue.bind(analytics),
    trackPerformance: analytics.trackPerformance.bind(analytics),
    getUserMetrics: analytics.getUserMetrics.bind(analytics),
    getBusinessMetrics: analytics.getBusinessMetrics.bind(analytics),
    getFunnelAnalysis: analytics.getFunnelAnalysis.bind(analytics),
    getCohortAnalysis: analytics.getCohortAnalysis.bind(analytics),
  }
}

export default analytics
