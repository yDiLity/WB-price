const Product = require('../models/Product');
const User = require('../models/User');

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
let dbConfig = null;

class PricingService {
  constructor() {
    this.isRunning = false;
    this.intervalId = null;
    this.updateInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.lastUpdateTime = null;
    this.stats = {
      totalUpdates: 0,
      successfulUpdates: 0,
      failedUpdates: 0,
      lastRunTime: null,
      averageUpdateTime: 0
    };
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  setDatabase(database) {
    dbConfig = database;
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  Pricing service is already running');
      return;
    }

    console.log('üöÄ Starting automatic pricing service...');
    this.isRunning = true;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    this.runPriceUpdate();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    this.intervalId = setInterval(() => {
      this.runPriceUpdate();
    }, this.updateInterval);

    console.log(`‚úÖ Pricing service started with ${this.updateInterval / 1000}s interval`);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è  Pricing service is not running');
      return;
    }

    console.log('üõë Stopping automatic pricing service...');
    this.isRunning = false;

    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    console.log('‚úÖ Pricing service stopped');
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
  async runPriceUpdate() {
    const startTime = Date.now();
    console.log('üîÑ Running automatic price update...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
      const users = await this.getActiveUsers();
      console.log(`Found ${users.length} active users`);

      let totalUpdated = 0;
      let totalErrors = 0;

      for (const user of users) {
        try {
          const userUpdates = await this.updateUserPrices(user);
          totalUpdated += userUpdates.updated;
          totalErrors += userUpdates.errors;
        } catch (error) {
          console.error(`Error updating prices for user ${user.id}:`, error);
          totalErrors++;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const duration = Date.now() - startTime;
      this.updateStats(totalUpdated, totalErrors, duration);

      console.log(`‚úÖ Price update completed: ${totalUpdated} updated, ${totalErrors} errors, ${duration}ms`);
      this.lastUpdateTime = new Date();

    } catch (error) {
      console.error('‚ùå Error in automatic price update:', error);
      this.stats.failedUpdates++;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getActiveUsers() {
    try {
      if (!dbConfig || !dbConfig.query) {
        console.log('Database not initialized, returning empty users list');
        return [];
      }

      const result = await dbConfig.query(`
        SELECT DISTINCT u.*
        FROM users u
        INNER JOIN products p ON u.id = p.user_id
        WHERE u.is_active = true
        AND p.auto_pricing_enabled = true
        AND p.is_active = true
      `);

      return result.rows.map(row => new User(row));
    } catch (error) {
      console.error('Error getting active users:', error);
      return [];
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserPrices(user) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ—Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
      const products = await Product.findByUserId(user.id, {
        limit: 1000 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑
      });

      const autoPricingProducts = products.filter(p =>
        p.auto_pricing_enabled && p.is_active
      );

      console.log(`Processing ${autoPricingProducts.length} products for user ${user.name || user.id}`);

      let updated = 0;
      let errors = 0;

      for (const product of autoPricingProducts) {
        try {
          const wasUpdated = await this.updateProductPrice(product, user);
          if (wasUpdated) {
            updated++;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å Telegram
            if (user.telegram_chat_id && user.notifications_enabled) {
              await this.sendPriceUpdateNotification(user, product);
            }
          }
        } catch (error) {
          console.error(`Error updating product ${product.id}:`, error);
          errors++;
        }
      }

      return { updated, errors };
    } catch (error) {
      console.error('Error updating user prices:', error);
      return { updated: 0, errors: 1 };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  async updateProductPrice(product, user) {
    try {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ü–µ–Ω—É
      const recommendedPrice = await product.calculateRecommendedPrice();

      if (!recommendedPrice || recommendedPrice <= 0) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ü–µ–Ω—É
      if (!product.needsPriceUpdate()) {
        return false;
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      if (!this.isPriceSafe(product, recommendedPrice)) {
        console.log(`Skipping unsafe price update for product ${product.id}: ${product.current_price} -> ${recommendedPrice}`);
        return false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
      await product.updatePrice(
        recommendedPrice,
        'automatic_optimization',
        user.id
      );

      console.log(`Updated price for ${product.name}: ${product.current_price} -> ${recommendedPrice}`);
      return true;

    } catch (error) {
      console.error(`Error updating product price ${product.id}:`, error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
  isPriceSafe(product, newPrice) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    if (product.min_price > 0 && newPrice < product.min_price) {
      return false;
    }

    if (product.max_price > 0 && newPrice > product.max_price) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–µ–∑–∫–æ–µ (–Ω–µ –±–æ–ª–µ–µ 30% –∑–∞ —Ä–∞–∑)
    const currentPrice = product.current_price;
    const changePercent = Math.abs((newPrice - currentPrice) / currentPrice) * 100;

    if (changePercent > 30) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –º–∞—Ä–∂—É (–Ω–µ –º–µ–Ω–µ–µ 5%)
    if (product.cost_price > 0) {
      const margin = ((newPrice - product.cost_price) / newPrice) * 100;
      if (margin < 5) {
        return false;
      }
    }

    return true;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
  async sendPriceUpdateNotification(user, product) {
    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`üì± Notification sent to ${user.telegram_chat_id}: Price updated for ${product.name}`);

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
      // await telegramBot.sendMessage(user.telegram_chat_id, message);

    } catch (error) {
      console.error('Error sending notification:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateStats(updated, errors, duration) {
    this.stats.totalUpdates += updated;
    this.stats.successfulUpdates += updated;
    this.stats.failedUpdates += errors;
    this.stats.lastRunTime = new Date();

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.stats.totalUpdates > 0) {
      this.stats.averageUpdateTime = (this.stats.averageUpdateTime + duration) / 2;
    } else {
      this.stats.averageUpdateTime = duration;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
  getStats() {
    return {
      ...this.stats,
      isRunning: this.isRunning,
      lastUpdateTime: this.lastUpdateTime,
      updateInterval: this.updateInterval,
      nextUpdateTime: this.isRunning && this.lastUpdateTime ?
        new Date(this.lastUpdateTime.getTime() + this.updateInterval) : null
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async forceUpdateUser(userId) {
    try {
      const user = await User.findById(userId);
      if (!user) {
        throw new Error('User not found');
      }

      console.log(`üîÑ Force updating prices for user ${user.name || user.id}`);
      const result = await this.updateUserPrices(user);

      return {
        success: true,
        updated: result.updated,
        errors: result.errors,
        user: user.name || user.id
      };
    } catch (error) {
      console.error('Error in force update:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
  async analyzeEffectiveness(userId, days = 30) {
    try {
      if (!dbConfig || !dbConfig.query) {
        console.log('Database not initialized');
        return null;
      }

      const result = await dbConfig.query(`
        SELECT
          COUNT(*) as total_changes,
          AVG(new_price - old_price) as avg_price_change,
          SUM(CASE WHEN new_price > old_price THEN 1 ELSE 0 END) as price_increases,
          SUM(CASE WHEN new_price < old_price THEN 1 ELSE 0 END) as price_decreases
        FROM price_history ph
        INNER JOIN products p ON ph.product_id = p.id
        WHERE p.user_id = $1
        AND ph.change_type = 'automatic'
        AND ph.created_at >= CURRENT_DATE - INTERVAL '${days} days'
      `, [userId]);

      return result.rows[0];
    } catch (error) {
      console.error('Error analyzing effectiveness:', error);
      return null;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  setUpdateInterval(intervalMs) {
    this.updateInterval = intervalMs;

    if (this.isRunning) {
      this.stop();
      this.start();
    }

    console.log(`Update interval set to ${intervalMs / 1000}s`);
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const pricingService = new PricingService();

module.exports = pricingService;
