const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function createDatabase() {
  console.log('üîß Setting up PostgreSQL database...');

  // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const connectionOptions = [
    {
      user: 'postgres',
      host: 'localhost',
      database: 'postgres',
      password: 'Qazwsx123',
      port: 5432,
    },
    {
      user: 'postgres',
      host: 'localhost',
      database: 'postgres',
      password: 'postgres',
      port: 5432,
    },
    {
      user: 'postgres',
      host: 'localhost',
      database: 'postgres',
      password: 'admin',
      port: 5432,
    }
  ];

  let systemPool = null;
  let connectionSuccessful = false;

  for (const config of connectionOptions) {
    try {
      console.log(`üîç Trying connection with user: ${config.user}, password: ${config.password ? '***' : 'empty'}`);
      systemPool = new Pool({
        ...config,
        connectionTimeoutMillis: 3000,
        idleTimeoutMillis: 5000,
      });

      await systemPool.query('SELECT NOW()');
      console.log('‚úÖ PostgreSQL connection successful!');
      connectionSuccessful = true;
      break;
    } catch (error) {
      console.log(`‚ùå Failed with user ${config.user}:`, error.message);
      if (systemPool) {
        await systemPool.end();
        systemPool = null;
      }
    }
  }

  if (!connectionSuccessful) {
    throw new Error('Could not connect to PostgreSQL with any credentials');
  }

  try {

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const dbName = process.env.DB_NAME || 'ozon_price_optimizer';
    const checkDbQuery = `SELECT 1 FROM pg_database WHERE datname = $1`;
    const dbExists = await systemPool.query(checkDbQuery, [dbName]);

    if (dbExists.rows.length === 0) {
      console.log(`üìä Creating database: ${dbName}`);
      await systemPool.query(`CREATE DATABASE "${dbName}"`);
      console.log('‚úÖ Database created successfully!');
    } else {
      console.log(`üìä Database ${dbName} already exists`);
    }

    await systemPool.end();

    // –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
    const appPool = new Pool({
      user: process.env.DB_USER || 'postgres',
      host: process.env.DB_HOST || 'localhost',
      database: dbName,
      password: process.env.DB_PASSWORD || 'postgres',
      port: process.env.DB_PORT || 5432,
    });

    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Å—Ö–µ–º—É
    console.log('üìã Creating database schema...');
    const schemaPath = path.join(__dirname, 'database', 'schema.sql');
    const schemaSql = fs.readFileSync(schemaPath, 'utf8');

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å SQL –∫–∞–∫ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
      await appPool.query(schemaSql);
      console.log('‚úÖ Database schema created successfully!');
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
      if (!error.message.includes('already exists') &&
          !error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') &&
          !error.message.includes('relation') &&
          !error.message.includes('–æ—Ç–Ω–æ—à–µ–Ω–∏–µ')) {
        console.warn('‚ö†Ô∏è  SQL schema warning:', error.message);
      } else {
        console.log('‚úÖ Database schema already exists, skipping...');
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üìù Adding test data...');
    await addTestData(appPool);

    await appPool.end();
    console.log('üéâ Database setup completed successfully!');

  } catch (error) {
    console.error('‚ùå Database setup failed:', error.message);
    console.error('üí° Make sure PostgreSQL is running and credentials are correct');
    console.error('üí° Current settings:');
    console.error(`   Host: ${process.env.DB_HOST || 'localhost'}`);
    console.error(`   Port: ${process.env.DB_PORT || 5432}`);
    console.error(`   User: ${process.env.DB_USER || 'postgres'}`);
    console.error(`   Database: ${process.env.DB_NAME || 'ozon_price_optimizer'}`);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function addTestData(pool) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(`
      INSERT INTO users (telegram_chat_id, name, username, email, role, api_key)
      VALUES (123456789, 'Test User', 'testuser', 'test@example.com', 'admin', 'test_api_key_12345')
      ON CONFLICT (telegram_chat_id) DO NOTHING
      RETURNING id
    `);

    let userId;
    if (userResult.rows.length > 0) {
      userId = userResult.rows[0].id;
    } else {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await pool.query(
        'SELECT id FROM users WHERE telegram_chat_id = $1',
        [123456789]
      );
      userId = existingUser.rows[0].id;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try {
      await pool.query(`
        INSERT INTO categories (name, ozon_category_id, description, commission_rate)
        VALUES
          ('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 15621, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –≥–∞–¥–∂–µ—Ç—ã', 5.00),
          ('–û–¥–µ–∂–¥–∞', 7500, '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', 8.00),
          ('–î–æ–º –∏ —Å–∞–¥', 6000, '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ —Å–∞–¥–∞', 6.00)
      `);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      if (!error.message.includes('duplicate') && !error.message.includes('–¥—É–±–ª–∏—Ä—É–µ—Ç')) {
        console.warn('‚ö†Ô∏è  Categories warning:', error.message);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    try {
      await pool.query(`
        INSERT INTO products (user_id, ozon_product_id, sku, name, current_price, cost_price, min_price, max_price, stock_quantity, rating, review_count, auto_pricing_enabled)
        VALUES
          ($1, 123456, 'SKU001', '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy', 25000.00, 20000.00, 22000.00, 30000.00, 50, 4.5, 120, true),
          ($1, 123457, 'SKU002', '–ù–∞—É—à–Ω–∏–∫–∏ Apple AirPods', 15000.00, 12000.00, 13000.00, 18000.00, 30, 4.8, 85, true),
          ($1, 123458, 'SKU003', '–§—É—Ç–±–æ–ª–∫–∞ —Ö–ª–æ–ø–∫–æ–≤–∞—è', 1500.00, 800.00, 1000.00, 2000.00, 100, 4.2, 45, false)
      `, [userId]);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      if (!error.message.includes('duplicate') && !error.message.includes('–¥—É–±–ª–∏—Ä—É–µ—Ç')) {
        console.warn('‚ö†Ô∏è  Products warning:', error.message);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–æ—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫
    try {
      await pool.query(`
        INSERT INTO delivery_slots (warehouse_id, warehouse_name, warehouse_region, slot_date, time_slot, slot_type, capacity, used_capacity, price, is_available, ai_rating, priority)
        VALUES
          ('WH001', '–°–∫–ª–∞–¥ –ú–æ—Å–∫–≤–∞-1', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', CURRENT_DATE + INTERVAL '1 day', '09:00-12:00', 'FBS', 100, 25, 500.00, true, 85, 'high'),
          ('WH002', '–°–∫–ª–∞–¥ –°–ü–±-1', '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', CURRENT_DATE + INTERVAL '2 days', '14:00-17:00', 'FBO', 150, 50, 750.00, true, 92, 'critical'),
          ('WH003', '–°–∫–ª–∞–¥ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', CURRENT_DATE + INTERVAL '3 days', '10:00-13:00', 'Crossdocking', 80, 10, 400.00, true, 78, 'medium')
      `);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      if (!error.message.includes('duplicate') && !error.message.includes('–¥—É–±–ª–∏—Ä—É–µ—Ç')) {
        console.warn('‚ö†Ô∏è  Delivery slots warning:', error.message);
      }
    }

    console.log('‚úÖ Test data added successfully!');

  } catch (error) {
    console.error('‚ö†Ô∏è  Error adding test data:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
if (require.main === module) {
  createDatabase();
}

module.exports = { createDatabase };
