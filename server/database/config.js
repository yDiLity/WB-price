require('dotenv').config();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const DB_TYPE = process.env.DATABASE_TYPE || process.env.DB_TYPE || 'memory'; // auto, postgresql, sqlite, memory

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –ë–î
async function detectAvailableDatabase() {
  // –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω memory, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (DB_TYPE === 'memory') {
    console.log('üß† Using In-Memory database as specified');
    return 'memory';
  }

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º PostgreSQL
  if (DB_TYPE === 'auto' || DB_TYPE === 'postgresql') {
    try {
      const { Pool } = require('pg');
      const testPool = new Pool({
        user: process.env.DB_USER || 'postgres',
        host: process.env.DB_HOST || 'localhost',
        database: process.env.DB_NAME || 'ozon_price_optimizer',
        password: process.env.DB_PASSWORD || 'password',
        port: process.env.DB_PORT || 5432,
        connectionTimeoutMillis: 2000
      });

      await testPool.query('SELECT NOW()');
      await testPool.end();
      console.log('üîç PostgreSQL detected and available');
      return 'postgresql';
    } catch (error) {
      console.log('‚ö†Ô∏è  PostgreSQL not available:', error.message);
    }
  }

  // –ï—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º In-Memory
  console.log('üîÑ Falling back to In-Memory database');
  return 'memory';
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ë–î
let dbConfig;

async function initializeDatabase() {
  const dbType = await detectAvailableDatabase();

  if (dbType === 'postgresql') {
    console.log('üìä Using PostgreSQL database');
    dbConfig = require('./postgresql-config');
  } else if (dbType === 'sqlite') {
    console.log('üìÅ Using SQLite database');
    dbConfig = require('./sqlite-config');
  } else {
    console.log('üß† Using In-Memory database');
    dbConfig = require('./memory-config');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await dbConfig.seedTestData();
  }

  return dbConfig;
}

module.exports = { initializeDatabase };
