require('dotenv').config();
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const axios = require('axios');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { initializeDatabase } = require('./database/config');
const User = require('./models/User');
const Product = require('./models/Product');
const DeliverySlot = require('./models/DeliverySlot');

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
const pricingService = require('./services/PricingService');
const analyticsService = require('./services/AnalyticsService');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabaseConnection() {
  console.log('üîÑ Initializing database connection...');

  try {
    const dbConfig = await initializeDatabase();
    const isConnected = await dbConfig.testConnection();

    if (isConnected) {
      console.log('‚úÖ Database connected successfully');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PricingService —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      pricingService.setDatabase(dbConfig);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      console.log('üöÄ Starting pricing service...');
      pricingService.start();
    } else {
      console.error('‚ùå Failed to connect to database');
      console.log('‚ö†Ô∏è  Running in fallback mode without database');
    }
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error.message);
    console.log('‚ö†Ô∏è  Running in fallback mode without database');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initializeDatabaseConnection();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(cors({
  origin: '*', // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ JSON-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∑–∞—â–∏—Ç—É
app.use((req, res, next) => {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
  res.setHeader('X-XSS-Protection', '1; mode=block');
  // –ó–∞–ø—Ä–µ—Ç –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ iframe
  res.setHeader('X-Frame-Options', 'DENY');
  // –ó–∞–ø—Ä–µ—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏—è MIME-—Ç–∏–ø–∞
  res.setHeader('X-Content-Type-Options', 'nosniff');
  next();
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const start = Date.now();
  res.on('finish', () => {
    const duration = Date.now() - start;
    console.log(`${req.method} ${req.originalUrl} ${res.statusCode} ${duration}ms`);
  });
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
const token = '7417338072:AAFG5p7TWvZuvbTr38r91Q8VFCfDotxR0ak'; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
console.log('Using token:', token);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
const botOptions = {
  polling: true,
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  request: {
    agentOptions: {
      keepAlive: true,
      keepAliveMsecs: 4000,
      maxSockets: 100,
      maxFreeSockets: 10
    }
  }
};

const bot = new TelegramBot(token, botOptions);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
  console.error('Telegram bot polling error:', error);
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  setTimeout(() => {
    bot.stopPolling().then(() => {
      console.log('Restarting polling after error...');
      bot.startPolling();
    });
  }, 5000);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
console.log('Telegram bot started successfully with optimized settings');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
// const OPENAI_API_KEY = 'sk-your-openai-api-key';
let openai = null;

// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞
console.log('OpenAI API not configured, using fallback analysis');

// –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ò–ò
function simulateAIResponse(prompt) {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const isAboutPrice = prompt.toLowerCase().includes('—Ü–µ–Ω') || prompt.toLowerCase().includes('price');
  const isAboutCompetitors = prompt.toLowerCase().includes('–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç') || prompt.toLowerCase().includes('competitor');
  const isAboutOptimization = prompt.toLowerCase().includes('–æ–ø—Ç–∏–º–∏–∑') || prompt.toLowerCase().includes('optimiz');

  let response = "# –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞\n\n";

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
  const productNameMatch = prompt.match(/–¢–æ–≤–∞—Ä: ([^\n]+)/);
  const productName = productNameMatch ? productNameMatch[1] : "—Ç–æ–≤–∞—Ä–∞";

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
  const currentPriceMatch = prompt.match(/–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: (\d+)/);
  const currentPrice = currentPriceMatch ? parseInt(currentPriceMatch[1]) : 1000;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ü–µ–Ω—É
  const recommendedPrice = Math.round(currentPrice * (Math.random() * 0.2 + 0.9)); // -10% –¥–æ +10%

  response += `## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –¥–ª—è ${productName}\n\n`;

  if (isAboutPrice) {
    response += `### –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω—ã\n\n`;
    response += `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${currentPrice} ‚ÇΩ. –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, `;

    if (recommendedPrice > currentPrice) {
      response += `—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É –¥–æ ${recommendedPrice} ‚ÇΩ, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂.\n\n`;
    } else {
      response += `—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –¥–æ ${recommendedPrice} ‚ÇΩ, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n`;
    }
  }

  if (isAboutCompetitors) {
    response += `### –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤\n\n`;
    response += `–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ü–µ–Ω–∞–º –æ—Ç ${Math.round(currentPrice * 0.8)} ‚ÇΩ –¥–æ ${Math.round(currentPrice * 1.2)} ‚ÇΩ. `;
    response += `–í–∞—à–µ —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è ${currentPrice > recommendedPrice ? '–≤—ã—à–µ' : '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ —Ä—ã–Ω–∫—É.\n\n`;
  }

  if (isAboutOptimization) {
    response += `### –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n`;
    response += `–î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n\n`;
    response += `1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${Math.round(recommendedPrice * 0.95)} - ${Math.round(recommendedPrice * 1.05)} ‚ÇΩ\n`;
    response += `2. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é —Ä—ã–Ω–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã\n`;
    response += `3. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 7-14 –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø—Ä–æ—Å–∞\n`;
    response += `4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –ø–µ—Ä–∏–æ–¥—ã –Ω–∏–∑–∫–æ–≥–æ —Å–ø—Ä–æ—Å–∞\n\n`;
  }

  response += `### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${recommendedPrice} ‚ÇΩ\n\n`;
  response += `### –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞: ${Math.round(currentPrice * 0.8)} ‚ÇΩ\n\n`;

  response += `–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –∏ –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥—ã.`;

  return response;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
async function analyzeProductWithAI(product, competitors) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Ozon:

–¢–æ–≤–∞—Ä: ${product.name}
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${product.currentPrice} ‚ÇΩ
–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${product.costPrice} ‚ÇΩ
–†–µ–π—Ç–∏–Ω–≥: ${product.rating}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: ${product.reviewCount}

–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:
${competitors.map(c => `- ${c.name}: ${c.price} ‚ÇΩ, —Ä–µ–π—Ç–∏–Ω–≥: ${c.rating}, –æ—Ç–∑—ã–≤–æ–≤: ${c.reviewCount}`).join('\n')}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:
1. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
2. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏
4. –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
`;

    // –ï—Å–ª–∏ OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (openai) {
      try {
        const response = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é." },
            { role: "user", content: prompt }
          ],
          temperature: 0.7,
          max_tokens: 1000
        });

        return {
          success: true,
          analysis: response.choices[0].message.content
        };
      } catch (error) {
        console.error('Error with OpenAI API, falling back to simulated response:', error);
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
          success: true,
          analysis: simulateAIResponse(prompt)
        };
      }
    } else {
      // –ï—Å–ª–∏ OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      console.log('Using simulated AI response');
      return {
        success: true,
        analysis: simulateAIResponse(prompt)
      };
    }
  } catch (error) {
    console.error('Error analyzing product with AI:', error);
    return {
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò: ' + error.message
    };
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const users = {};
const pendingActions = {};
const productCache = {};
const connectedUsers = {};
const requestStats = {
  totalRequests: 0,
  requestsPerMinute: 0,
  lastMinuteRequests: 0,
  lastMinuteTimestamp: Date.now(),
  requestsPerUser: {}
};

// –°–∏—Å—Ç–µ–º–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const rateLimits = {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  perUserPerMinute: 60,
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  globalPerMinute: 1000
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤
function checkRateLimit(chatId) {
  const now = Date.now();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
  requestStats.totalRequests++;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  if (now - requestStats.lastMinuteTimestamp > 60000) {
    requestStats.requestsPerMinute = requestStats.lastMinuteRequests;
    requestStats.lastMinuteRequests = 0;
    requestStats.lastMinuteTimestamp = now;
  }
  requestStats.lastMinuteRequests++;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  if (!requestStats.requestsPerUser[chatId]) {
    requestStats.requestsPerUser[chatId] = {
      count: 0,
      timestamp: now
    };
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
  if (now - requestStats.requestsPerUser[chatId].timestamp > 60000) {
    requestStats.requestsPerUser[chatId].count = 0;
    requestStats.requestsPerUser[chatId].timestamp = now;
  }

  requestStats.requestsPerUser[chatId].count++;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  if (requestStats.requestsPerUser[chatId].count > rateLimits.perUserPerMinute) {
    console.log(`Rate limit exceeded for user ${chatId}: ${requestStats.requestsPerUser[chatId].count} requests per minute`);
    return false;
  }

  if (requestStats.lastMinuteRequests > rateLimits.globalPerMinute) {
    console.log(`Global rate limit exceeded: ${requestStats.lastMinuteRequests} requests per minute`);
    return false;
  }

  return true;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
setInterval(() => {
  console.log(`Stats: ${requestStats.totalRequests} total requests, ${requestStats.requestsPerMinute} requests per minute, ${Object.keys(connectedUsers).length} connected users`);
}, 60000);

// –û–±—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const COMMON_PASSWORD = 'ozonpro2025';
console.log('Using common password for all users:', COMMON_PASSWORD);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (!checkRateLimit(chatId)) {
    bot.sendMessage(
      chatId,
      `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
  bot.sendPhoto(
    chatId,
    './public/images/ozon_logo.png', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    {
      caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Price Optimizer Pro Bot!\n\n` +
               `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ Ozon –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n` +
               `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ozonpro2025`,
      parse_mode: 'Markdown'
    }
  ).catch(error => {
    console.error('Error sending photo:', error);
    // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(
      chatId,
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Price Optimizer Pro Bot!\n\n` +
      `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã –≤ Ozon –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n` +
      `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.`
    );
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    `üîç *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n` +
    `*/start* - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n` +
    `*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n` +
    `*/status* - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n` +
    `*/products* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n` +
    `*/analyze* _[ID —Ç–æ–≤–∞—Ä–∞]_ - –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò\n` +
    `*/price* _[ID —Ç–æ–≤–∞—Ä–∞] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]_ - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n\n` +
    `–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∏—Ö.`,
    { parse_mode: 'Markdown' }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
bot.onText(/\/status/, (msg) => {
  const chatId = msg.chat.id;

  if (!users[chatId]) {
    bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.');
    return;
  }

  bot.sendMessage(
    chatId,
    `‚úÖ *–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*\n\n` +
    `–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: *${users[chatId].name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}*\n` +
    `Chat ID: \`${chatId}\`\n` +
    `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *${users[chatId].notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}*\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Ozon Price Optimizer Pro –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`,
    { parse_mode: 'Markdown' }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /products —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
bot.onText(/\/products/, async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!users[chatId]) {
    bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
  const loadingMessage = await bot.sendMessage(chatId, 'üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
    const now = Date.now();
    const cacheTime = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

    let mockProducts;

    if (productCache[chatId] && productCache[chatId].timestamp && (now - productCache[chatId].timestamp < cacheTime)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log(`Using cached products for chat ${chatId}`);
      mockProducts = productCache[chatId].products;
    } else {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      mockProducts = generateMockProducts(5);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
      productCache[chatId] = {
        products: mockProducts,
        timestamp: now
      };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    let message = 'üìã *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
    const productMessages = mockProducts.map((product, index) => {
      return [
        `*${index + 1}. ${product.name}*`,
        `   ID: \`${product.id}\``,
        `   –¶–µ–Ω–∞: *${product.currentPrice.toLocaleString()} ‚ÇΩ*`,
        `   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: *${product.recommendedPrice.toLocaleString()} ‚ÇΩ*\n`
      ].join('\n');
    });

    message += productMessages.join('');
    message += '\n–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n';
    message += '`/analyze [ID —Ç–æ–≤–∞—Ä–∞]`\n\n';
    message += '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n';
    message += '`/price [ID —Ç–æ–≤–∞—Ä–∞] [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]`';

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: loadingMessage.message_id,
      parse_mode: 'Markdown'
    });
  } catch (error) {
    console.error('Error fetching products:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    try {
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
    } catch (editError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze
bot.onText(/\/analyze (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const productId = match[1];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (!checkRateLimit(chatId)) {
    bot.sendMessage(
      chatId,
      `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
    return;
  }

  if (!users[chatId]) {
    bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
  const loadingMessage = await bot.sendMessage(chatId, `üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä —Å ID: ${productId}...`);

  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–µ—à–µ
    const products = productCache[chatId]?.products || productCache[chatId] || generateMockProducts(5);
    const product = products.find(p => p.id === productId);

    if (!product) {
      await bot.editMessageText('‚ùå –¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /products –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.', {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = [];
    const competitorCount = Math.floor(Math.random() * 5) + 3; // 3-7 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤

    for (let i = 0; i < competitorCount; i++) {
      const priceVariation = (Math.random() * 0.4) - 0.2; // -20% –¥–æ +20%
      const price = Math.round(product.currentPrice * (1 + priceVariation));

      competitors.push({
        name: `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç ${i+1}`,
        price: price,
        rating: (Math.random() * 2) + 3, // –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 3 –¥–æ 5
        reviewCount: Math.floor(Math.random() * 100) + 5 // 5-105 –æ—Ç–∑—ã–≤–æ–≤
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const enrichedProduct = {
      ...product,
      costPrice: product.costPrice || Math.round(product.currentPrice * 0.6), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
      rating: product.rating || (Math.random() * 2) + 3, // –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 3 –¥–æ 5
      reviewCount: product.reviewCount || Math.floor(Math.random() * 100) + 10 // 10-110 –æ—Ç–∑—ã–≤–æ–≤
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑
    let analysis;

    if (openai) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const aiResult = await analyzeProductWithAI(enrichedProduct, competitors);

      if (aiResult.success) {
        // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò —É—Å–ø–µ—à–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        analysis = `üìä *–ò–ò-–∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ "${product.name}"*\n\n`;
        analysis += `*–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* ${product.currentPrice.toLocaleString()} ‚ÇΩ\n`;
        analysis += `*–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:* ${enrichedProduct.costPrice.toLocaleString()} ‚ÇΩ\n`;
        analysis += `*–†–µ–π—Ç–∏–Ω–≥:* ${enrichedProduct.rating.toFixed(1)} (${enrichedProduct.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)\n\n`;
        analysis += `*–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:*\n`;
        analysis += `- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}\n`;
        analysis += `- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${Math.round(competitors.reduce((sum, c) => sum + c.price, 0) / competitors.length).toLocaleString()} ‚ÇΩ\n\n`;
        analysis += `*–ê–Ω–∞–ª–∏–∑ –ò–ò:*\n${aiResult.analysis}\n\n`;
        analysis += `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`;
        analysis += `/price ${product.id} [–Ω–æ–≤–∞—è —Ü–µ–Ω–∞]`;
      } else {
        // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –ò–ò –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        console.warn('AI analysis failed, falling back to standard analysis');
        analysis = await generateAIAnalysis(enrichedProduct);
      }
    } else {
      // –ï—Å–ª–∏ OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      analysis = await generateAIAnalysis(enrichedProduct);
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    await bot.editMessageText(analysis, {
      chat_id: chatId,
      message_id: loadingMessage.message_id,
      parse_mode: 'Markdown'
    });
  } catch (error) {
    console.error('Error analyzing product:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    try {
      await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
    } catch (editError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price
bot.onText(/\/price (.+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const productId = match[1];
  const newPrice = parseFloat(match[2]);

  if (!users[chatId]) {
    bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.');
    return;
  }

  if (isNaN(newPrice) || newPrice <= 0) {
    bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
    return;
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–µ—à–µ
    const products = productCache[chatId] || generateMockProducts(5);
    const product = products.find(p => p.id === productId);

    if (!product) {
      bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /products –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    const actionId = `price_${Date.now()}`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏
    pendingActions[actionId] = {
      type: 'price_change',
      productId,
      oldPrice: product.currentPrice,
      newPrice,
      chatId,
      timestamp: Date.now()
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    const message = `‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã*\n\n` +
      `–¢–æ–≤–∞—Ä: *${product.name}*\n` +
      `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${product.currentPrice.toLocaleString()} ‚ÇΩ*\n` +
      `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: *${newPrice.toLocaleString()} ‚ÇΩ*\n` +
      `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: *${((newPrice - product.currentPrice) / product.currentPrice * 100).toFixed(2)}%*\n\n` +
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É?`;

    const options = {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_${actionId}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_${actionId}` }
          ]
        ]
      }
    };

    bot.sendMessage(chatId, message, options);
  } catch (error) {
    console.error('Error changing price:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data.startsWith('confirm_')) {
    const actionId = data.replace('confirm_', '');
    const action = pendingActions[actionId];

    if (!action) {
      bot.answerCallbackQuery(callbackQuery.id, { text: '–î–µ–π—Å—Ç–≤–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' });
      return;
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    if (action.type === 'price_change') {
      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–µ—à–µ
      const products = productCache[chatId] || [];
      const product = products.find(p => p.id === action.productId);

      if (product) {
        product.currentPrice = action.newPrice;
      }

      bot.answerCallbackQuery(callbackQuery.id, { text: '–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!' });
      bot.editMessageText(
        `‚úÖ *–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n` +
        `–¢–æ–≤–∞—Ä: *${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}*\n` +
        `–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: *${action.oldPrice.toLocaleString()} ‚ÇΩ*\n` +
        `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: *${action.newPrice.toLocaleString()} ‚ÇΩ*\n` +
        `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: *${((action.newPrice - action.oldPrice) / action.oldPrice * 100).toFixed(2)}%*`,
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: [] }
        }
      );
    }

    // –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
    delete pendingActions[actionId];
  } else if (data.startsWith('cancel_')) {
    const actionId = data.replace('cancel_', '');
    const action = pendingActions[actionId];

    if (!action) {
      bot.answerCallbackQuery(callbackQuery.id, { text: '–î–µ–π—Å—Ç–≤–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.' });
      return;
    }

    bot.answerCallbackQuery(callbackQuery.id, { text: '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.' });
    bot.editMessageText(
      `‚ùå *–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n` +
      `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: [] }
      }
    );

    // –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
    delete pendingActions[actionId];
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
bot.on('message', (msg) => {
  if (msg.text && !msg.text.startsWith('/') && !users[msg.chat.id]) {
    const chatId = msg.chat.id;
    const password = msg.text.trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö)
    if (password === COMMON_PASSWORD) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = `user_${Date.now()}_${Math.floor(Math.random() * 1000)}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      users[chatId] = {
        chatId,
        userId,
        name: msg.from.first_name,
        username: msg.from.username,
        notifications: true,
        authorized: true,
        connectedAt: new Date().toISOString()
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
      connectedUsers[chatId] = {
        chatId,
        userId,
        name: msg.from.first_name,
        username: msg.from.username,
        connectedAt: new Date().toISOString()
      };

      bot.sendMessage(
        chatId,
        `‚úÖ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${msg.from.first_name}!\n\n` +
        `–í–∞—à Chat ID: \`${chatId}\`\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç Chat ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Ozon Price Optimizer Pro –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
        { parse_mode: 'Markdown' }
      );
    } else {
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.post('/api/notify', async (req, res) => {
  try {
    const { chatId, type, data } = req.body;

    if (!chatId || !type || !data) {
      return res.status(400).json({ success: false, message: 'Missing required parameters' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!users[chatId] || !users[chatId].authorized) {
      return res.status(403).json({ success: false, message: 'User not authorized' });
    }

    let message = '';
    let options = { parse_mode: 'Markdown' };

    switch (type) {
      case 'price_change':
        message = generatePriceChangeNotification(data);
        break;
      case 'suspicious_activity':
        message = generateSuspiciousActivityNotification(data);
        break;
      case 'recommended_price':
        message = generateRecommendedPriceNotification(data);
        break;
      default:
        return res.status(400).json({ success: false, message: 'Invalid notification type' });
    }

    await bot.sendMessage(chatId, message, options);

    res.json({ success: true });
  } catch (error) {
    console.error('Error sending notification:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
function generateMockProducts(count) {
  const products = [];

  const categories = ['–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–û–¥–µ–∂–¥–∞', '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã', '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ'];
  const brands = ['Apple', 'Samsung', 'Xiaomi', 'LG', 'Sony', 'Nike', 'Adidas', 'Lego', 'L\'Oreal'];

  for (let i = 0; i < count; i++) {
    const categoryIndex = i % categories.length;
    const brandIndex = i % brands.length;

    const basePrice = 5000 + Math.floor(Math.random() * 15000);
    const recommendedPrice = basePrice * (1 + (Math.random() * 0.2 - 0.1));

    let productName = '';
    const category = categories[categoryIndex];
    const brand = brands[brandIndex];

    switch (category) {
      case '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞':
        productName = `${brand} –°–º–∞—Ä—Ç—Ñ–æ–Ω Pro ${i + 1}`;
        break;
      case '–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞':
        productName = `${brand} –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Smart ${i + 1}`;
        break;
      case '–û–¥–µ–∂–¥–∞':
        productName = `${brand} –§—É—Ç–±–æ–ª–∫–∞ Sport ${i + 1}`;
        break;
      case '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã':
        productName = `${brand} –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è" ${i + 1}`;
        break;
      case '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ':
        productName = `${brand} –®–∞–º–ø—É–Ω—å "–°–∏—è–Ω–∏–µ" ${i + 1}`;
        break;
      default:
        productName = `${brand} –¢–æ–≤–∞—Ä ${i + 1}`;
    }

    products.push({
      id: `product-${i + 1}`,
      name: productName,
      category,
      brand,
      currentPrice: basePrice,
      recommendedPrice,
      stock: Math.floor(Math.random() * 50)
    });
  }

  return products;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
async function generateAIAnalysis(product) {
  try {
    if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'YOUR_OPENAI_API_KEY') {
      // –ï—Å–ª–∏ –µ—Å—Ç—å API-–∫–ª—é—á OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      const response = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "–¢—ã - –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω –Ω–∞ Ozon. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é."
          },
          {
            role: "user",
            content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}\n–ë—Ä–µ–Ω–¥: ${product.brand}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${product.currentPrice} ‚ÇΩ\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${product.recommendedPrice} ‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.`
          }
        ],
        max_tokens: 500
      });

      return `üîç *–ò–ò-–∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞*\n\n${response.choices[0].message.content}`;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç API-–∫–ª—é—á–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const priceDiff = ((product.recommendedPrice - product.currentPrice) / product.currentPrice * 100).toFixed(2);
      const isPriceHigher = product.recommendedPrice > product.currentPrice;

      let analysis = `üîç *–ò–ò-–∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞*\n\n`;
      analysis += `*–¢–æ–≤–∞—Ä:* ${product.name}\n`;
      analysis += `*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${product.category}\n`;
      analysis += `*–ë—Ä–µ–Ω–¥:* ${product.brand}\n\n`;

      analysis += `*–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:*\n`;
      analysis += `- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${product.currentPrice.toLocaleString()} ‚ÇΩ*\n`;
      analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: *${product.recommendedPrice.toLocaleString()} ‚ÇΩ* (${isPriceHigher ? '+' : ''}${priceDiff}%)\n`;
      analysis += `- –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ: *${product.stock} —à—Ç.*\n\n`;

      analysis += `*–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞:*\n`;
      if (product.stock < 10) {
        analysis += `- –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å\n`;
        analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${isPriceHigher ? '–ø–æ–≤—ã—Å–∏—Ç—å' : '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'} —Ü–µ–Ω—É –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏\n`;
      } else if (product.stock > 30) {
        analysis += `- –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å\n`;
        analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${!isPriceHigher ? '—Å–Ω–∏–∑–∏—Ç—å' : '–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å'} —Ü–µ–Ω—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂\n`;
      } else {
        analysis += `- –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å\n`;
        analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${isPriceHigher ? '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–æ–≤—ã—à–∞—Ç—å' : '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞—Ç—å'} —Ü–µ–Ω—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏\n`;
      }

      analysis += `\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
      if (Math.abs(priceDiff) < 5) {
        analysis += `- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –±–ª–∏–∑–∫–∞ –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è\n`;
        analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n`;
      } else if (isPriceHigher) {
        analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω—É –¥–æ *${product.recommendedPrice.toLocaleString()} ‚ÇΩ*\n`;
        analysis += `- –ü–æ–≤—ã—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤\n`;
        analysis += `- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é —Ä—ã–Ω–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è\n`;
      } else {
        analysis += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –¥–æ *${product.recommendedPrice.toLocaleString()} ‚ÇΩ*\n`;
        analysis += `- –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂ –∏ –æ–±–æ—Ä–æ—Ç\n`;
        analysis += `- –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n`;
      }

      return analysis;
    }
  } catch (error) {
    console.error('Error generating AI analysis:', error);
    return '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
function generatePriceChangeNotification(data) {
  const { product, oldPrice, newPrice, reason } = data;
  const priceDiff = ((newPrice - oldPrice) / oldPrice * 100).toFixed(2);

  return `üìä *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞*\n\n` +
    `–¢–æ–≤–∞—Ä: *${product.name}*\n` +
    `–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: *${oldPrice.toLocaleString()} ‚ÇΩ*\n` +
    `–ù–æ–≤–∞—è —Ü–µ–Ω–∞: *${newPrice.toLocaleString()} ‚ÇΩ*\n` +
    `–ò–∑–º–µ–Ω–µ–Ω–∏–µ: *${priceDiff}%*\n` +
    `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n` +
    `_–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Ozon Price Optimizer Pro_`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function generateSuspiciousActivityNotification(data) {
  const { type, product, competitor, description, recommendedAction } = data;

  let typeText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  switch (type) {
    case 'fake_reviews':
      typeText = '–§–µ–π–∫–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã';
      break;
    case 'fake_shop':
      typeText = '–§–µ–π–∫–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω';
      break;
    case 'dumping':
      typeText = '–î–µ–º–ø–∏–Ω–≥';
      break;
  }

  return `‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!*\n\n` +
    `–¢–∏–ø: *${typeText}*\n` +
    `–¢–æ–≤–∞—Ä: *${product.name}*\n` +
    `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: *${competitor}*\n` +
    `–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n\n` +
    `*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:*\n` +
    `${recommendedAction}\n\n` +
    `_–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Ozon Price Optimizer Pro_`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ
function generateRecommendedPriceNotification(data) {
  const { product, currentPrice, recommendedPrice } = data;
  const priceDiff = ((recommendedPrice - currentPrice) / currentPrice * 100).toFixed(2);
  const diffText = recommendedPrice > currentPrice ? `–Ω–∞ ${priceDiff}% –≤—ã—à–µ` : `–Ω–∞ ${Math.abs(Number(priceDiff))}% –Ω–∏–∂–µ`;

  return `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ*\n\n` +
    `–¢–æ–≤–∞—Ä: *${product.name}*\n` +
    `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${currentPrice.toLocaleString()} ‚ÇΩ*\n` +
    `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: *${recommendedPrice.toLocaleString()} ‚ÇΩ* (${diffText})\n\n` +
    `_–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Ozon Price Optimizer Pro_`;
}

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/connected-users', (req, res) => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersList = Object.values(connectedUsers).map(user => ({
      chatId: user.chatId,
      name: user.name,
      username: user.username || '–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      connectedAt: user.connectedAt
    }));

    res.json({ success: true, users: usersList });
  } catch (error) {
    console.error('Error getting connected users:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
app.post('/api/send-test-message', (req, res) => {
  try {
    const { chatId } = req.body;

    if (!chatId) {
      return res.status(400).json({ success: false, message: 'Missing required parameter: chatId' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Chat ID
    if (!connectedUsers[chatId]) {
      return res.status(404).json({ success: false, message: 'User with this Chat ID not found' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    try {
      bot.sendPhoto(
        chatId,
        './public/images/ozon_logo.png', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
        {
          caption: `üîî *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n` +
                  `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Ozon Price Optimizer Pro.\n\n` +
                  `–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤–∞—à Chat ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Ü–µ–Ω –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.`,
          parse_mode: 'Markdown'
        }
      ).then(() => {
        res.json({ success: true });
      }).catch(photoError => {
        console.error('Error sending photo in test message:', photoError);
        // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(
          chatId,
          `üîî *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n` +
          `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Ozon Price Optimizer Pro.\n\n` +
          `–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤–∞—à Chat ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`,
          { parse_mode: 'Markdown' }
        ).then(() => {
          res.json({ success: true });
        });
      });
    } catch (error) {
      console.error('Error in send-test-message endpoint:', error);
      res.status(500).json({ success: false, message: 'Internal server error' });
    }
  } catch (error) {
    console.error('Error sending test message:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/api/connected-users/:chatId', (req, res) => {
  try {
    const { chatId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Chat ID
    if (!connectedUsers[chatId]) {
      return res.status(404).json({ success: false, message: 'User with this Chat ID not found' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    bot.sendMessage(
      chatId,
      `‚ö†Ô∏è *–í–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ*\n\n` +
      `–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Ozon Price Optimizer Pro.\n\n` +
      `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.`,
      { parse_mode: 'Markdown' }
    );

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
    delete users[chatId];
    delete connectedUsers[chatId];

    res.json({ success: true });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/stats', (req, res) => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    const os = require('os');
    const systemInfo = {
      platform: os.platform(),
      arch: os.arch(),
      cpus: os.cpus().length,
      totalMemory: Math.round(os.totalmem() / (1024 * 1024 * 1024) * 100) / 100 + ' GB',
      freeMemory: Math.round(os.freemem() / (1024 * 1024 * 1024) * 100) / 100 + ' GB',
      uptime: Math.floor(os.uptime() / 3600) + ' hours ' + Math.floor((os.uptime() % 3600) / 60) + ' minutes'
    };

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      system: systemInfo,
      server: {
        uptime: Math.floor(process.uptime() / 3600) + ' hours ' + Math.floor((process.uptime() % 3600) / 60) + ' minutes',
        nodeVersion: process.version,
        memoryUsage: {
          rss: Math.round(process.memoryUsage().rss / (1024 * 1024) * 100) / 100 + ' MB',
          heapTotal: Math.round(process.memoryUsage().heapTotal / (1024 * 1024) * 100) / 100 + ' MB',
          heapUsed: Math.round(process.memoryUsage().heapUsed / (1024 * 1024) * 100) / 100 + ' MB'
        }
      },
      requests: {
        total: requestStats.totalRequests,
        perMinute: requestStats.requestsPerMinute,
        currentMinute: requestStats.lastMinuteRequests
      },
      users: {
        total: Object.keys(connectedUsers).length,
        active: Object.keys(users).length
      },
      rateLimits: {
        perUserPerMinute: rateLimits.perUserPerMinute,
        globalPerMinute: rateLimits.globalPerMinute
      }
    };

    res.json({ success: true, stats });
  } catch (error) {
    console.error('Error getting stats:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ (health check)
app.get('/api/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
app.post('/api/analyze-product', async (req, res) => {
  try {
    const { product, competitors } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!product || !competitors) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö'
      });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Analyzing product:', product.name);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò
    const result = await analyzeProductWithAI(product, competitors);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json(result);
  } catch (error) {
    console.error('Error in analyze-product endpoint:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–∞'
    });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã
app.post('/api/optimize-price', async (req, res) => {
  try {
    const { product, marketData, targetProfit } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!product || !marketData) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ä—ã–Ω–∫–µ'
      });
    }

    // –ï—Å–ª–∏ OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
    if (!openai) {
      // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã
      const competitors = marketData.competitors || [];
      const avgCompetitorPrice = competitors.reduce((sum, comp) => sum + comp.price, 0) /
                                (competitors.length || 1);

      // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const minPrice = product.costPrice * 1.2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ 20%
      const recommendedPrice = Math.max(
        minPrice,
        avgCompetitorPrice * 0.95 // –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ —Ä—ã–Ω–∫—É
      );

      return res.json({
        success: true,
        recommendation: {
          recommendedPrice: Math.round(recommendedPrice),
          minPrice: Math.round(minPrice),
          marketAverage: Math.round(avgCompetitorPrice),
          explanation: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.'
        }
      });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const prompt = `
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Ozon:

–¢–æ–≤–∞—Ä: ${product.name}
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${product.currentPrice} ‚ÇΩ
–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${product.costPrice} ‚ÇΩ
–¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: ${targetProfit || '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è'}

–î–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ:
- –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${marketData.categoryAvgPrice} ‚ÇΩ
- –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –æ—Ç ${marketData.minPrice} ‚ÇΩ –¥–æ ${marketData.maxPrice} ‚ÇΩ
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${marketData.competitors?.length || 0}

${marketData.competitors ? `–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:
${marketData.competitors.slice(0, 5).map(c => `- ${c.name}: ${c.price} ‚ÇΩ, —Ä–µ–π—Ç–∏–Ω–≥: ${c.rating}`).join('\n')}` : ''}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
2. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é —Ü–µ–Ω—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
3. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
`;

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    let aiResponse;

    // –ï—Å–ª–∏ OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (openai) {
      try {
        const response = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            { role: "system", content: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏." },
            { role: "user", content: prompt }
          ],
          temperature: 0.5,
          max_tokens: 800
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        aiResponse = response.choices[0].message.content;
      } catch (error) {
        console.error('Error with OpenAI API, falling back to simulated response:', error);
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        aiResponse = simulateAIResponse(prompt);
      }
    } else {
      // –ï—Å–ª–∏ OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      console.log('Using simulated AI response for price optimization');
      aiResponse = simulateAIResponse(prompt);
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Ü–µ–Ω—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä)
    let recommendedPrice = 0;
    let minPrice = 0;

    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–µ–Ω –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä)
    const priceMatch = aiResponse.match(/–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:?\s*(\d+[\d\s]*)/i);
    if (priceMatch && priceMatch[1]) {
      recommendedPrice = parseInt(priceMatch[1].replace(/\s/g, ''));
    }

    const minPriceMatch = aiResponse.match(/–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞:?\s*(\d+[\d\s]*)/i);
    if (minPriceMatch && minPriceMatch[1]) {
      minPrice = parseInt(minPriceMatch[1].replace(/\s/g, ''));
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
    if (!recommendedPrice) {
      recommendedPrice = Math.round(product.costPrice * 1.5);
    }

    if (!minPrice) {
      minPrice = Math.round(product.costPrice * 1.2);
    }

    res.json({
      success: true,
      recommendation: {
        recommendedPrice,
        minPrice,
        explanation: aiResponse,
        aiGenerated: true
      }
    });
  } catch (error) {
    console.error('Error in optimize-price endpoint:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Telegram bot started. Common password: ${COMMON_PASSWORD}`);
  console.log(`Server ready to handle high load of requests`);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
server.timeout = 120000; // 2 –º–∏–Ω—É—Ç—ã

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
app.post('/api/analyze-product', async (req, res) => {
  try {
    const { product, competitors } = req.body;

    if (!product || !competitors) {
      return res.status(400).json({ success: false, message: 'Missing required parameters' });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–º–æ—â—å—é –ò–ò
    const result = await analyzeProductWithAI(product, competitors);

    if (result.success) {
      res.json({ success: true, analysis: result.analysis });
    } else {
      res.status(500).json({ success: false, message: result.message });
    }
  } catch (error) {
    console.error('Error in analyze-product endpoint:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/products', (req, res) => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const products = [
      // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
      {
        id: 'product-1',
        name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S21',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã',
        brand: 'Samsung',
        currentPrice: 59990,
        costPrice: 35000,
        rating: 4.7,
        reviewCount: 128
      },
      {
        id: 'product-2',
        name: '–ù–æ—É—Ç–±—É–∫ Apple MacBook Air',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–ù–æ—É—Ç–±—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã',
        brand: 'Apple',
        currentPrice: 89990,
        costPrice: 65000,
        rating: 4.9,
        reviewCount: 256
      },
      {
        id: 'product-3',
        name: '–ù–∞—É—à–Ω–∏–∫–∏ Sony WH-1000XM4',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ',
        brand: 'Sony',
        currentPrice: 27990,
        costPrice: 15000,
        rating: 4.8,
        reviewCount: 189
      },
      {
        id: 'product-4',
        name: '–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch Series 7',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–£–º–Ω—ã–µ —á–∞—Å—ã –∏ –±—Ä–∞—Å–ª–µ—Ç—ã',
        brand: 'Apple',
        currentPrice: 36990,
        costPrice: 22000,
        rating: 4.6,
        reviewCount: 112
      },
      {
        id: 'product-5',
        name: '–ü–ª–∞–Ω—à–µ—Ç Samsung Galaxy Tab S7',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–ü–ª–∞–Ω—à–µ—Ç—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏',
        brand: 'Samsung',
        currentPrice: 49990,
        costPrice: 30000,
        rating: 4.5,
        reviewCount: 95
      },

      // –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å
      {
        id: 'product-6',
        name: '–ö—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è Columbia',
        category: '–û–¥–µ–∂–¥–∞, –æ–±—É–≤—å –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        subcategory: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞',
        brand: 'Columbia',
        currentPrice: 12990,
        costPrice: 7500,
        rating: 4.6,
        reviewCount: 87
      },
      {
        id: 'product-7',
        name: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max',
        category: '–û–¥–µ–∂–¥–∞, –æ–±—É–≤—å –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        subcategory: '–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å',
        brand: 'Nike',
        currentPrice: 8990,
        costPrice: 4500,
        rating: 4.8,
        reviewCount: 156
      },

      // –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
      {
        id: 'product-8',
        name: '–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –≤–æ–¥–∞ Chanel Coco Mademoiselle',
        category: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
        subcategory: '–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è',
        brand: 'Chanel',
        currentPrice: 9890,
        costPrice: 5200,
        rating: 4.9,
        reviewCount: 312
      },
      {
        id: 'product-9',
        name: '–ù–∞–±–æ—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏ –¥–ª—è –ª–∏—Ü–∞ Clinique',
        category: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
        subcategory: '–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º',
        brand: 'Clinique',
        currentPrice: 5490,
        costPrice: 2800,
        rating: 4.7,
        reviewCount: 78
      },

      // –î–æ–º –∏ —Å–∞–¥
      {
        id: 'product-10',
        name: '–î–∏–≤–∞–Ω-–∫—Ä–æ–≤–∞—Ç—å IKEA –ë–ï–î–ò–ù–ì–ï',
        category: '–î–æ–º –∏ —Å–∞–¥',
        subcategory: '–ú–µ–±–µ–ª—å',
        brand: 'IKEA',
        currentPrice: 24990,
        costPrice: 15000,
        rating: 4.3,
        reviewCount: 45
      },
      {
        id: 'product-11',
        name: '–ö–æ–º–ø–ª–µ–∫—Ç –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è Tac',
        category: '–î–æ–º –∏ —Å–∞–¥',
        subcategory: '–¢–µ–∫—Å—Ç–∏–ª—å',
        brand: 'Tac',
        currentPrice: 3990,
        costPrice: 1800,
        rating: 4.5,
        reviewCount: 124
      },

      // –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
      {
        id: 'product-12',
        name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä LEGO Star Wars',
        category: '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã',
        subcategory: '–ò–≥—Ä—É—à–∫–∏ –∏ –∏–≥—Ä—ã',
        brand: 'LEGO',
        currentPrice: 7990,
        costPrice: 4200,
        rating: 4.9,
        reviewCount: 87
      },

      // –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
      {
        id: 'product-13',
        name: '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö Lavazza Crema e Aroma',
        category: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
        subcategory: '–ß–∞–π –∏ –∫–æ—Ñ–µ',
        brand: 'Lavazza',
        currentPrice: 1290,
        costPrice: 650,
        rating: 4.7,
        reviewCount: 203
      },

      // –°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö
      {
        id: 'product-14',
        name: '–í–µ–ª–æ—Å–∏–ø–µ–¥ –≥–æ—Ä–Ω—ã–π Merida Big.Nine',
        category: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö',
        subcategory: '–í–µ–ª–æ—Å–∏–ø–µ–¥—ã –∏ —Å–∞–º–æ–∫–∞—Ç—ã',
        brand: 'Merida',
        currentPrice: 54990,
        costPrice: 32000,
        rating: 4.8,
        reviewCount: 34
      },

      // –ö–Ω–∏–≥–∏
      {
        id: 'product-15',
        name: '–ö–Ω–∏–≥–∞ "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å"',
        category: '–ö–Ω–∏–≥–∏',
        subcategory: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
        brand: '–†–æ—Å–º—ç–Ω',
        currentPrice: 790,
        costPrice: 350,
        rating: 4.9,
        reviewCount: 456
      }
    ];

    res.json({ success: true, products });
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
app.get('/api/products/:id', (req, res) => {
  try {
    const { id } = req.params;

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const allProducts = [
      // –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
      {
        id: 'product-1',
        name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung Galaxy S21',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã',
        brand: 'Samsung',
        currentPrice: 59990,
        costPrice: 35000,
        rating: 4.7,
        reviewCount: 128
      },
      {
        id: 'product-2',
        name: '–ù–æ—É—Ç–±—É–∫ Apple MacBook Air',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–ù–æ—É—Ç–±—É–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã',
        brand: 'Apple',
        currentPrice: 89990,
        costPrice: 65000,
        rating: 4.9,
        reviewCount: 256
      },
      {
        id: 'product-3',
        name: '–ù–∞—É—à–Ω–∏–∫–∏ Sony WH-1000XM4',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ',
        brand: 'Sony',
        currentPrice: 27990,
        costPrice: 15000,
        rating: 4.8,
        reviewCount: 189
      },
      {
        id: 'product-4',
        name: '–£–º–Ω—ã–µ —á–∞—Å—ã Apple Watch Series 7',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–£–º–Ω—ã–µ —á–∞—Å—ã –∏ –±—Ä–∞—Å–ª–µ—Ç—ã',
        brand: 'Apple',
        currentPrice: 36990,
        costPrice: 22000,
        rating: 4.6,
        reviewCount: 112
      },
      {
        id: 'product-5',
        name: '–ü–ª–∞–Ω—à–µ—Ç Samsung Galaxy Tab S7',
        category: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        subcategory: '–ü–ª–∞–Ω—à–µ—Ç—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏',
        brand: 'Samsung',
        currentPrice: 49990,
        costPrice: 30000,
        rating: 4.5,
        reviewCount: 95
      },

      // –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å
      {
        id: 'product-6',
        name: '–ö—É—Ä—Ç–∫–∞ –∑–∏–º–Ω—è—è Columbia',
        category: '–û–¥–µ–∂–¥–∞, –æ–±—É–≤—å –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        subcategory: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞',
        brand: 'Columbia',
        currentPrice: 12990,
        costPrice: 7500,
        rating: 4.6,
        reviewCount: 87
      },
      {
        id: 'product-7',
        name: '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike Air Max',
        category: '–û–¥–µ–∂–¥–∞, –æ–±—É–≤—å –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
        subcategory: '–ú—É–∂—Å–∫–∞—è –æ–±—É–≤—å',
        brand: 'Nike',
        currentPrice: 8990,
        costPrice: 4500,
        rating: 4.8,
        reviewCount: 156
      },

      // –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
      {
        id: 'product-8',
        name: '–ü–∞—Ä—Ñ—é–º–µ—Ä–Ω–∞—è –≤–æ–¥–∞ Chanel Coco Mademoiselle',
        category: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
        subcategory: '–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è',
        brand: 'Chanel',
        currentPrice: 9890,
        costPrice: 5200,
        rating: 4.9,
        reviewCount: 312
      },
      {
        id: 'product-9',
        name: '–ù–∞–±–æ—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏ –¥–ª—è –ª–∏—Ü–∞ Clinique',
        category: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ',
        subcategory: '–£—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º',
        brand: 'Clinique',
        currentPrice: 5490,
        costPrice: 2800,
        rating: 4.7,
        reviewCount: 78
      },

      // –î–æ–º –∏ —Å–∞–¥
      {
        id: 'product-10',
        name: '–î–∏–≤–∞–Ω-–∫—Ä–æ–≤–∞—Ç—å IKEA –ë–ï–î–ò–ù–ì–ï',
        category: '–î–æ–º –∏ —Å–∞–¥',
        subcategory: '–ú–µ–±–µ–ª—å',
        brand: 'IKEA',
        currentPrice: 24990,
        costPrice: 15000,
        rating: 4.3,
        reviewCount: 45
      },
      {
        id: 'product-11',
        name: '–ö–æ–º–ø–ª–µ–∫—Ç –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è Tac',
        category: '–î–æ–º –∏ —Å–∞–¥',
        subcategory: '–¢–µ–∫—Å—Ç–∏–ª—å',
        brand: 'Tac',
        currentPrice: 3990,
        costPrice: 1800,
        rating: 4.5,
        reviewCount: 124
      },

      // –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
      {
        id: 'product-12',
        name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä LEGO Star Wars',
        category: '–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã',
        subcategory: '–ò–≥—Ä—É—à–∫–∏ –∏ –∏–≥—Ä—ã',
        brand: 'LEGO',
        currentPrice: 7990,
        costPrice: 4200,
        rating: 4.9,
        reviewCount: 87
      },

      // –ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è
      {
        id: 'product-13',
        name: '–ö–æ—Ñ–µ –≤ –∑–µ—Ä–Ω–∞—Ö Lavazza Crema e Aroma',
        category: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
        subcategory: '–ß–∞–π –∏ –∫–æ—Ñ–µ',
        brand: 'Lavazza',
        currentPrice: 1290,
        costPrice: 650,
        rating: 4.7,
        reviewCount: 203
      },

      // –°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö
      {
        id: 'product-14',
        name: '–í–µ–ª–æ—Å–∏–ø–µ–¥ –≥–æ—Ä–Ω—ã–π Merida Big.Nine',
        category: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö',
        subcategory: '–í–µ–ª–æ—Å–∏–ø–µ–¥—ã –∏ —Å–∞–º–æ–∫–∞—Ç—ã',
        brand: 'Merida',
        currentPrice: 54990,
        costPrice: 32000,
        rating: 4.8,
        reviewCount: 34
      },

      // –ö–Ω–∏–≥–∏
      {
        id: 'product-15',
        name: '–ö–Ω–∏–≥–∞ "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å"',
        category: '–ö–Ω–∏–≥–∏',
        subcategory: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
        brand: '–†–æ—Å–º—ç–Ω',
        currentPrice: 790,
        costPrice: 350,
        rating: 4.9,
        reviewCount: 456
      }
    ];

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID
    const products = {};
    allProducts.forEach(product => {
      products[product.id] = product;
    });

    const product = products[id];

    if (!product) {
      return res.status(404).json({ success: false, message: 'Product not found' });
    }

    res.json({ success: true, product });
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
app.post('/api/fetch-competitors', async (req, res) => {
  try {
    const { productName, category, brand } = req.body;

    if (!productName || !category) {
      return res.status(400).json({ success: false, message: 'Missing required parameters' });
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    await new Promise(resolve => setTimeout(resolve, 1500));

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const generateCompetitors = (count, basePrice) => {
      const competitors = [];
      const brands = ['Samsung', 'Apple', 'Sony', 'Xiaomi', 'Huawei', 'LG', 'Asus', 'Lenovo', 'HP', 'Dell'];
      const brandToExclude = brand || '';

      for (let i = 0; i < count; i++) {
        // –í—ã–±–∏—Ä–∞–µ–º –±—Ä–µ–Ω–¥, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        let competitorBrand;
        do {
          competitorBrand = brands[Math.floor(Math.random() * brands.length)];
        } while (competitorBrand === brandToExclude);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±20% –æ—Ç –±–∞–∑–æ–≤–æ–π
        const priceVariation = basePrice * (0.8 + Math.random() * 0.4);
        const price = Math.round(priceVariation / 10) * 10; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç–∫–æ–≤

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        const rating = (3.5 + Math.random() * 1.5).toFixed(1);
        const reviewCount = Math.floor(Math.random() * 200) + 10;

        competitors.push({
          name: `${competitorBrand} ${category} ${i + 1}`,
          price,
          rating: parseFloat(rating),
          reviewCount
        });
      }

      return competitors;
    };

    const basePrice = Math.floor(Math.random() * 50000) + 10000;
    const competitors = generateCompetitors(5, basePrice);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º
    const prices = competitors.map(c => c.price);
    const categoryAvgPrice = Math.round(prices.reduce((sum, price) => sum + price, 0) / prices.length);
    const minPrice = Math.min(...prices);
    const maxPrice = Math.max(...prices);

    res.json({
      success: true,
      competitors,
      categoryAvgPrice,
      minPrice,
      maxPrice
    });
  } catch (error) {
    console.error('Error fetching competitors:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
app.post('/api/schedule-analysis', (req, res) => {
  try {
    const { productId, frequency, time, userId } = req.body;

    if (!productId || !frequency || !time) {
      return res.status(400).json({ success: false, message: 'Missing required parameters' });
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`Scheduled analysis for product ${productId} with frequency ${frequency} at ${time} for user ${userId || 'anonymous'}`);

    res.json({
      success: true,
      message: 'Analysis scheduled successfully',
      schedule: {
        productId,
        frequency,
        time,
        userId,
        nextRun: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
      }
    });
  } catch (error) {
    console.error('Error scheduling analysis:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤
app.post('/api/batch-analyze', (req, res) => {
  try {
    const { productIds, userId } = req.body;

    if (!productIds || !Array.isArray(productIds) || productIds.length === 0) {
      return res.status(400).json({ success: false, message: 'Missing or invalid product IDs' });
    }

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`Batch analysis started for ${productIds.length} products for user ${userId || 'anonymous'}`);
    console.log('Products:', productIds);

    res.json({
      success: true,
      message: 'Batch analysis started',
      jobId: `batch-${Date.now()}`,
      productCount: productIds.length,
      estimatedCompletionTime: new Date(Date.now() + productIds.length * 30 * 1000).toISOString() // –ü—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–æ–≤–∞—Ä
    });
  } catch (error) {
    console.error('Error starting batch analysis:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

// ==================== API ENDPOINTS –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ====================

// Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API
const authenticateAPI = async (req, res, next) => {
  try {
    const apiKey = req.headers['x-api-key'] || req.query.api_key;

    if (!apiKey) {
      return res.status(401).json({ error: 'API key required' });
    }

    const user = await User.findByApiKey(apiKey);
    if (!user) {
      return res.status(401).json({ error: 'Invalid API key' });
    }

    req.user = user;
    next();
  } catch (error) {
    console.error('Authentication error:', error);
    res.status(500).json({ error: 'Authentication failed' });
  }
};

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get('/api/user/profile', authenticateAPI, async (req, res) => {
  try {
    const stats = await req.user.getStats();
    res.json({
      user: req.user.toJSON(),
      stats
    });
  } catch (error) {
    console.error('Error getting user profile:', error);
    res.status(500).json({ error: 'Failed to get user profile' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/products', authenticateAPI, async (req, res) => {
  try {
    const {
      limit = 50,
      offset = 0,
      search = '',
      category_id = null,
      sort_by = 'created_at',
      sort_order = 'DESC'
    } = req.query;

    const products = await Product.findByUserId(req.user.id, {
      limit: parseInt(limit),
      offset: parseInt(offset),
      search,
      category_id,
      sort_by,
      sort_order
    });

    res.json({
      products,
      pagination: {
        limit: parseInt(limit),
        offset: parseInt(offset),
        total: products.length
      }
    });
  } catch (error) {
    console.error('Error getting products:', error);
    res.status(500).json({ error: 'Failed to get products' });
  }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
app.post('/api/products', authenticateAPI, async (req, res) => {
  try {
    const productData = {
      ...req.body,
      user_id: req.user.id
    };

    const product = await Product.create(productData);
    res.status(201).json(product);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ error: 'Failed to create product' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
app.get('/api/products/:id', authenticateAPI, async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);

    if (!product || product.user_id !== req.user.id) {
      return res.status(404).json({ error: 'Product not found' });
    }

    const competitors = await product.getCompetitors();
    const priceHistory = await product.getPriceHistory(20);
    const analytics = await product.getAnalytics(30);

    res.json({
      product,
      competitors,
      priceHistory,
      analytics
    });
  } catch (error) {
    console.error('Error getting product:', error);
    res.status(500).json({ error: 'Failed to get product' });
  }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
app.put('/api/products/:id/price', authenticateAPI, async (req, res) => {
  try {
    const { price, reason = 'manual' } = req.body;

    if (!price || price <= 0) {
      return res.status(400).json({ error: 'Valid price is required' });
    }

    const product = await Product.findById(req.params.id);

    if (!product || product.user_id !== req.user.id) {
      return res.status(404).json({ error: 'Product not found' });
    }

    await product.updatePrice(price, reason, req.user.id);
    res.json({ success: true, product });
  } catch (error) {
    console.error('Error updating product price:', error);
    res.status(500).json({ error: 'Failed to update price' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫
app.get('/api/delivery-slots', authenticateAPI, async (req, res) => {
  try {
    const filters = {
      warehouse_id: req.query.warehouse_id,
      warehouse_region: req.query.warehouse_region,
      slot_type: req.query.slot_type,
      date_from: req.query.date_from,
      date_to: req.query.date_to,
      min_capacity: req.query.min_capacity ? parseInt(req.query.min_capacity) : null,
      max_price: req.query.max_price ? parseFloat(req.query.max_price) : null,
      priority: req.query.priority,
      limit: req.query.limit ? parseInt(req.query.limit) : 50,
      offset: req.query.offset ? parseInt(req.query.offset) : 0,
      sort_by: req.query.sort_by || 'slot_date',
      sort_order: req.query.sort_order || 'ASC'
    };

    const slots = await DeliverySlot.findAvailable(filters);
    res.json({ slots });
  } catch (error) {
    console.error('Error getting delivery slots:', error);
    res.status(500).json({ error: 'Failed to get delivery slots' });
  }
});

// API –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
app.post('/api/delivery-slots/:id/book', authenticateAPI, async (req, res) => {
  try {
    const { notes = '' } = req.body;
    const slot = await DeliverySlot.findById(req.params.id);

    if (!slot) {
      return res.status(404).json({ error: 'Slot not found' });
    }

    const booking = await slot.book(req.user.id, notes);
    res.json(booking);
  } catch (error) {
    console.error('Error booking slot:', error);
    res.status(500).json({ error: error.message || 'Failed to book slot' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–≤
app.get('/api/warehouses', authenticateAPI, async (req, res) => {
  try {
    const warehouses = await DeliverySlot.getWarehouses();
    res.json({ warehouses });
  } catch (error) {
    console.error('Error getting warehouses:', error);
    res.status(500).json({ error: 'Failed to get warehouses' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º
app.get('/api/delivery-slots/stats', authenticateAPI, async (req, res) => {
  try {
    const days = req.query.days ? parseInt(req.query.days) : 14;
    const stats = await DeliverySlot.getDateStats(days);
    res.json({ stats });
  } catch (error) {
    console.error('Error getting delivery stats:', error);
    res.status(500).json({ error: 'Failed to get delivery stats' });
  }
});

// API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
app.post('/api/products/auto-price-update', authenticateAPI, async (req, res) => {
  try {
    const products = await Product.findByUserId(req.user.id, {
      limit: 1000 // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    });

    const updatedProducts = [];

    for (const product of products) {
      if (product.auto_pricing_enabled && product.needsPriceUpdate()) {
        await product.calculateRecommendedPrice();

        if (product.recommended_price > 0) {
          await product.updatePrice(
            product.recommended_price,
            'automatic_optimization',
            req.user.id
          );
          updatedProducts.push(product);
        }
      }
    }

    res.json({
      success: true,
      updatedCount: updatedProducts.length,
      products: updatedProducts
    });
  } catch (error) {
    console.error('Error in auto price update:', error);
    res.status(500).json({ error: 'Failed to update prices automatically' });
  }
});

// ==================== API ENDPOINTS –î–õ–Ø –°–ï–†–í–ò–°–û–í ====================

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
app.get('/api/pricing/status', authenticateAPI, (req, res) => {
  try {
    const stats = pricingService.getStats();
    res.json(stats);
  } catch (error) {
    console.error('Error getting pricing status:', error);
    res.status(500).json({ error: 'Failed to get pricing status' });
  }
});

app.post('/api/pricing/start', authenticateAPI, (req, res) => {
  try {
    pricingService.start();
    res.json({ success: true, message: 'Pricing service started' });
  } catch (error) {
    console.error('Error starting pricing service:', error);
    res.status(500).json({ error: 'Failed to start pricing service' });
  }
});

app.post('/api/pricing/stop', authenticateAPI, (req, res) => {
  try {
    pricingService.stop();
    res.json({ success: true, message: 'Pricing service stopped' });
  } catch (error) {
    console.error('Error stopping pricing service:', error);
    res.status(500).json({ error: 'Failed to stop pricing service' });
  }
});

app.post('/api/pricing/force-update', authenticateAPI, async (req, res) => {
  try {
    const result = await pricingService.forceUpdateUser(req.user.id);
    res.json(result);
  } catch (error) {
    console.error('Error in force update:', error);
    res.status(500).json({ error: 'Failed to force update prices' });
  }
});

app.get('/api/pricing/effectiveness', authenticateAPI, async (req, res) => {
  try {
    const days = req.query.days ? parseInt(req.query.days) : 30;
    const effectiveness = await pricingService.analyzeEffectiveness(req.user.id, days);
    res.json(effectiveness);
  } catch (error) {
    console.error('Error getting pricing effectiveness:', error);
    res.status(500).json({ error: 'Failed to get pricing effectiveness' });
  }
});

// API –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/api/analytics/dashboard', authenticateAPI, async (req, res) => {
  try {
    const days = req.query.days ? parseInt(req.query.days) : 30;
    const dashboard = await analyticsService.getUserDashboard(req.user.id, days);
    res.json(dashboard);
  } catch (error) {
    console.error('Error getting analytics dashboard:', error);
    res.status(500).json({ error: 'Failed to get analytics dashboard' });
  }
});

app.get('/api/analytics/forecast', authenticateAPI, async (req, res) => {
  try {
    const days = req.query.days ? parseInt(req.query.days) : 7;
    const forecast = await analyticsService.getSalesForecast(req.user.id, days);
    res.json(forecast);
  } catch (error) {
    console.error('Error getting sales forecast:', error);
    res.status(500).json({ error: 'Failed to get sales forecast' });
  }
});

app.post('/api/analytics/record', authenticateAPI, async (req, res) => {
  try {
    const { productId, metricType, value, additionalData } = req.body;

    if (!productId || !metricType || value === undefined) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const success = await analyticsService.recordMetric(
      req.user.id,
      productId,
      metricType,
      value,
      additionalData
    );

    if (success) {
      res.json({ success: true, message: 'Metric recorded successfully' });
    } else {
      res.status(500).json({ error: 'Failed to record metric' });
    }
  } catch (error) {
    console.error('Error recording metric:', error);
    res.status(500).json({ error: 'Failed to record metric' });
  }
});

app.delete('/api/analytics/cache', authenticateAPI, (req, res) => {
  try {
    analyticsService.clearUserCache(req.user.id);
    res.json({ success: true, message: 'Cache cleared successfully' });
  } catch (error) {
    console.error('Error clearing cache:', error);
    res.status(500).json({ error: 'Failed to clear cache' });
  }
});

// API –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
app.get('/api/system/status', authenticateAPI, async (req, res) => {
  try {
    const pricingStats = pricingService.getStats();
    const cacheStats = analyticsService.getCacheStats();

    res.json({
      database: {
        connected: true,
        timestamp: new Date()
      },
      pricing: pricingStats,
      analytics: {
        cache: cacheStats
      },
      server: {
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        version: process.version
      }
    });
  } catch (error) {
    console.error('Error getting system status:', error);
    res.status(500).json({ error: 'Failed to get system status' });
  }
});

// ==================== –í–ï–ë-–ú–ê–†–®–†–£–¢–´ ====================

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Ozon Price Optimizer Pro</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 0;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .container {
                text-align: center;
                max-width: 800px;
                padding: 40px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 20px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            h1 {
                font-size: 3em;
                margin-bottom: 20px;
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            }
            .subtitle {
                font-size: 1.2em;
                margin-bottom: 30px;
                opacity: 0.9;
            }
            .features {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 40px 0;
            }
            .feature {
                background: rgba(255, 255, 255, 0.1);
                padding: 20px;
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            .feature h3 {
                margin-top: 0;
                color: #ffd700;
            }
            .api-section {
                margin-top: 40px;
                padding: 20px;
                background: rgba(0, 0, 0, 0.2);
                border-radius: 15px;
            }
            .api-endpoint {
                background: rgba(255, 255, 255, 0.1);
                padding: 10px;
                margin: 10px 0;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                text-align: left;
            }
            .status {
                display: inline-block;
                padding: 5px 15px;
                background: #4CAF50;
                border-radius: 20px;
                font-size: 0.9em;
                margin-bottom: 20px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Ozon Price Optimizer Pro</h1>
            <div class="status">‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç</div>
            <p class="subtitle">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ Ozon</p>

            <div class="features">
                <div class="feature">
                    <h3>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h3>
                    <p>–ò–ò-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
                </div>
                <div class="feature">
                    <h3>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã</h3>
                    <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤</p>
                </div>
                <div class="feature">
                    <h3>üîî Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                    <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö</p>
                </div>
                <div class="feature">
                    <h3>üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏</h3>
                    <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫</p>
                </div>
            </div>

            <div class="api-section">
                <h3>üîó API Endpoints</h3>
                <div class="api-endpoint">GET /api/products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</div>
                <div class="api-endpoint">GET /api/delivery-slots - –°–ª–æ—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫</div>
                <div class="api-endpoint">GET /api/analytics/dashboard - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                <div class="api-endpoint">GET /api/system/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</div>
                <p style="margin-top: 20px; font-size: 0.9em; opacity: 0.8;">
                    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫: <code>X-API-Key: test_api_key_12345</code>
                </p>
            </div>

            <div style="margin-top: 40px;">
                <h3>üì± Telegram Bot</h3>
                <p>–ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: <strong>ozonpro2025</strong></p>
                <p style="font-size: 0.9em; opacity: 0.8;">
                    –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –∫–æ–º–∞–Ω–¥–æ–π /start
                </p>
            </div>
        </div>
    </body>
    </html>
  `);
});

// API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
app.get('/api', (req, res) => {
  res.json({
    name: 'Ozon Price Optimizer Pro API',
    version: '1.0.0',
    status: 'running',
    endpoints: {
      products: '/api/products',
      deliverySlots: '/api/delivery-slots',
      analytics: '/api/analytics/dashboard',
      system: '/api/system/status'
    },
    authentication: 'X-API-Key header required',
    testApiKey: 'test_api_key_12345'
  });
});

// –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async function gracefulShutdown() {
  console.log('Received shutdown signal, closing server and bot...');

  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    pricingService.stop();
    console.log('Pricing service stopped');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
    await bot.stopPolling();
    console.log('Bot polling stopped');

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    try {
      const dbConfig = await initializeDatabase();
      await dbConfig.closePool();
      console.log('Database connections closed');
    } catch (error) {
      console.log('Database already closed or not initialized');
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
    server.close(() => {
      console.log('HTTP server closed');
      process.exit(0);
    });

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    setTimeout(() => {
      console.log('Forcing process exit after timeout');
      process.exit(1);
    }, 10000);
  } catch (error) {
    console.error('Error during graceful shutdown:', error);
    process.exit(1);
  }
}
