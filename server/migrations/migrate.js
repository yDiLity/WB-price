const fs = require('fs');
const path = require('path');
const { query, testConnection } = require('../database/config');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
async function runMigrations() {
  console.log('üöÄ Starting database migrations...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const isConnected = await testConnection();
    if (!isConnected) {
      throw new Error('Cannot connect to database');
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å—Ö–µ–º—ã
    const schemaPath = path.join(__dirname, '../database/schema.sql');
    const schemaSql = fs.readFileSync(schemaPath, 'utf8');
    
    console.log('üìã Executing database schema...');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = schemaSql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      
      try {
        await query(command);
        console.log(`‚úÖ Command ${i + 1}/${commands.length} executed successfully`);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "already exists"
        if (error.message.includes('already exists')) {
          console.log(`‚ö†Ô∏è  Command ${i + 1}/${commands.length} skipped (already exists)`);
        } else {
          console.error(`‚ùå Command ${i + 1}/${commands.length} failed:`, error.message);
          throw error;
        }
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    await query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    await query(`
      INSERT INTO migrations (name) 
      VALUES ('initial_schema') 
      ON CONFLICT (name) DO NOTHING
    `);
    
    console.log('üéâ Database migrations completed successfully!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('üìä Created tables:');
    tablesResult.rows.forEach(row => {
      console.log(`   - ${row.table_name}`);
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–π (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
async function rollbackMigrations() {
  console.log('üîÑ Rolling back database migrations...');
  
  try {
    const isConnected = await testConnection();
    if (!isConnected) {
      throw new Error('Cannot connect to database');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    console.log('üóëÔ∏è  Dropping tables...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    for (const row of tablesResult.rows) {
      await query(`DROP TABLE IF EXISTS ${row.table_name} CASCADE`);
      console.log(`   - Dropped table: ${row.table_name}`);
    }
    
    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    await query('DROP EXTENSION IF EXISTS "uuid-ossp"');
    await query('DROP EXTENSION IF EXISTS "pg_trgm"');
    
    console.log('‚úÖ Rollback completed successfully!');
    return true;
    
  } catch (error) {
    console.error('‚ùå Rollback failed:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π
async function checkMigrationStatus() {
  try {
    const result = await query('SELECT * FROM migrations ORDER BY executed_at');
    console.log('üìã Migration status:');
    
    if (result.rows.length === 0) {
      console.log('   No migrations executed yet');
    } else {
      result.rows.forEach(row => {
        console.log(`   ‚úÖ ${row.name} - ${row.executed_at}`);
      });
    }
    
    return result.rows;
  } catch (error) {
    console.log('   ‚ö†Ô∏è  Migrations table not found - database not initialized');
    return [];
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const command = process.argv[2];
  
  switch (command) {
    case 'rollback':
      rollbackMigrations().then(() => process.exit(0));
      break;
    case 'status':
      checkMigrationStatus().then(() => process.exit(0));
      break;
    default:
      runMigrations().then(() => process.exit(0));
  }
}

module.exports = {
  runMigrations,
  rollbackMigrations,
  checkMigrationStatus
};
